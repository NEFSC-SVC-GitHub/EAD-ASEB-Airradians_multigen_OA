dplyr::filter(Sample.Name %in% colnames(counts_matrix))
Exp.metadata.df    <- data.frame(Exp.metadata[,-1], row.names=Exp.metadata[,1]) # move Sample.Name column as row names
Exp.metadata.mtx   <- as.matrix(Exp.metadata.df, row.names="BayScallop.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
Exp.metadata.mtx_2 <- as.data.frame(Exp.metadata.mtx[match(colnames(counts_matrix),rownames(Exp.metadata.mtx)), ]) %>% rename(pCO2 = 1)
all(rownames(Exp.metadata.mtx_2) %in% colnames(counts_matrix)) # should be TRUE
all(rownames(Exp.metadata.mtx_2) == colnames(counts_matrix)) # should be TRUE
# build dds
dds <- DESeqDataSetFromMatrix(countData = counts_matrix,
colData = Exp.metadata.mtx_2,
design = ~pCO2) # DESeq Data Set (dds) - design as ~Primary_Treatment
# DAY 0 PLOT THE (1) READS PER SAMPLE (2) READS PER GENE - FOR EACH DDS
nsamples        <- ncol(counts(dds)) # Number of samples - for the plot label
rps             <- qplot(colSums(counts(dds))) +# reads of reads per sample
labs(x = "Mapped reads per sample", y = "Number of samples",
title = "Day 0: Mapped reads per sample") +
geom_label(aes(x = 1.5e6, y = 3, label = paste(nsamples, "samples")))
ngenes          <- nrow(counts(dds)) # Number of genes
ngenes_min      <- min(rowSums(counts(dds))) #  minimum reads
ngenes_mean.min <- min(rowMeans2(counts(dds))) # minimum row mean
ngenes_max      <- max(rowSums(counts(dds))) #  maximum reads
rpg             <- qplot(log10(rowSums(counts(dds))), bins = 16) + # number of reads per gene
labs(x = "log10(Mapped reads per gene)",
y = "Number of genes",
title = "Mapped reads per gene") +
geom_label(aes(x = 4, y = 2000, label = paste(ngenes, "total genes"))) +
geom_label(aes(x = 4, y = 1700, label = paste("max count =", ngenes_max))) +
geom_label(aes(x = 4, y = 1400, label = paste("min count =", ngenes_min))) +
geom_label(aes(x = 4, y = 1100, label = paste("min mean =", ngenes_mean.min)))
countfig
rpg             <- qplot(log10(rowSums(counts(dds))), bins = 16) + # number of reads per gene
labs(x = "log10(Mapped reads per gene)",
y = "Number of genes",
title = "Mapped reads per gene") +
geom_label(aes(x = 4, y = 2000, label = paste(ngenes, "total genes"))) +
geom_label(aes(x = 4, y = 1700, label = paste("max count =", ngenes_max))) +
geom_label(aes(x = 4, y = 1400, label = paste("min count =", ngenes_min))) +
geom_label(aes(x = 4, y = 1100, label = paste("min mean =", ngenes_mean.min)))
countfig <- plot_grid(rps, rpg)
countfig
dds.run <- DESeq(dds) # wait for this to complete....
# main model
# resprimary <- results(dds.d0, name="Primary_Treatment_M_vs_A", alpha = 0.05)
resprimary         <- results(dds.run, contrast=c("pCO2", "Low", "High"), alpha = 0.05)
numDEGs_padj       <- data.frame(table(resprimary$padj<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
numDEGs_padj
resprimary.ordered <- resprimary[order(resprimary$padj), ] # Order by adjusted p-value
num.DownReg        <- sum((resprimary.ordered$log2FoldChange[1:numDEGs_padj] > 0) == TRUE) #  LFC >= 1
num.UpReg          <- sum((resprimary.ordered$log2FoldChange[1:numDEGs_padj] < 0) == TRUE) # LFC >= 1
total              <- sum(num.DownReg,num.UpReg) # sum of DEGs with the criteria pdj < 0.05 + LFC>1 (< -1)
hist(resprimary$pvalue, breaks=20, col="grey") # view histogram
abline(h=c( (nrow(resprimary)*0.05),
((table(resprimary$padj < 0.1)[2]) + (nrow(resprimary)*0.1)),
((table(resprimary$padj < 0.05)[2]) + (nrow(resprimary)*0.05)) ),
col=c("blue", "red", "red"), lty=c(1,2,1), lwd=c(1, 3, 1)) # add line at
# Write results - covert to as.data.frame for the ordered results
resdata.primary  <- merge(as.data.frame(resprimary.ordered), as.data.frame(counts(dds.run, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.primary)[1] <- "Gene"
resdata.primary <- resdata.primary[order(resdata.primary$padj), ] # Order by adjusted p-value
EnhancedVolcano(resprimary,
lab = rownames(resprimary),
x = 'log2FoldChange',
y = 'padj',
title = 'pCO2 Treatment (Low v High)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 1,
pCutoff = 0.05,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
# Data transformations for heatmap and PCA visuals ======================================================================================= #
# rlog - regularized log transformation of origin count data to log2 scale - fit for each sample and dist. of coefficients in the data
rlog<- rlogTransformation(dds.run) # rlog transform (regularized log)
# Data transformations for heatmap and PCA visuals ======================================================================================= #
# rlog - regularized log transformation of origin count data to log2 scale - fit for each sample and dist. of coefficients in the data
rlog<- rlogTransformation(dds.run) # rlog transform (regularized log)
# PCA plot rlog ------------------------ #
pcaData_d0 <- plotPCA(rlog.d0, intgroup = "Primary_Treatment", re
# PCA plot rlog ------------------------ #
pcaData    <- plotPCA(rlog, intgroup = "pCO2", returnData = TRUE)
percentVar <- round(100 * attr(pcaData_d0, "percentVar"))
# PCA plot rlog ------------------------ #
pcaData    <- plotPCA(rlog, intgroup = "pCO2", returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("PCA: Day0 (rlog)") +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
# parameters for the pheatmap
topgenes.IDs <- head(rownames(resprimary.ordered),54) # call the first 13 genes that are differentially expressed, FDR < 0.05 correct pdj
topgenes_rlog.counts <- assay(rlog)[topgenes.IDs,]
topgenes_corrected <- topgenes_rlog.counts - rowMeans(topgenes_rlog.counts) # substract from the row mean to get +/- 0 to normalizze and ease the asthetic
df_annot.col <- as.data.frame(colData(dds.run)[c("pCO2")])
df_annot.col
ann_colors = list(
pCO2 = c(A="turquoise", M="coral1"))
rlog.heatmap <- pheatmap(topgenes_corrected,
annotation_col=df_annot.col,
main = "Ambient versus Moderate (54 total DEGs)",
cutree_cols = 2,
cutree_rows = 2,
annotation_legend = TRUE,
annotation_colors = ann_colors,
show_rownames = FALSE,
labels_col=df_annot.col$Primary_Treatment,
angle_col = 0,
fontsize = 8,
legend = TRUE)
ann_colors = list(
pCO2 = c(Low="turquoise", High="coral1"))
rlog.heatmap <- pheatmap(topgenes_corrected,
annotation_col=df_annot.col,
main = "Ambient versus Moderate (54 total DEGs)",
cutree_cols = 2,
cutree_rows = 2,
annotation_legend = TRUE,
annotation_colors = ann_colors,
show_rownames = FALSE,
labels_col=df_annot.col$Primary_Treatment,
angle_col = 0,
fontsize = 8,
legend = TRUE)
rlog.heatmap
rlog.heatmap
df_annot.col
rlog.heatmap <- pheatmap(topgenes_corrected,
annotation_col=df_annot.col,
main = "Ambient versus Moderate (54 total DEGs)",
cutree_cols = 2,
cutree_rows = 2,
annotation_legend = TRUE,
annotation_colors = ann_colors,
show_rownames = FALSE,
labels_col=df_annot.col$pCO2,
angle_col = 0,
fontsize = 8,
legend = TRUE)
rlog.heatmap
#Save ppheatmap
save_pheatmap(rlog.heatmap, filename = "../../Output/Transcriptomics/DESeq2/rlog_heatmap.png")
?pheatmap
# Plot pheatmap map rlog------------------------ #
# save pheatmap fxn
save_pheatmap <- function(x, filename, width=1000, height=960) { # template for saving pheatmap outputs
stopifnot(!missing(x))
stopifnot(!missing(filename))
png(filename,width = width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
#Save ppheatmap
save_pheatmap(rlog.heatmap, filename = "../../Output/Transcriptomics/DESeq2/rlog_heatmap.png")
topgenes_rlog.counts <- assay(rlog)[topgenes.IDs,]
topgenes_rlog.counts
resprimary.ordered
head(rownames(resprimary.ordered),54)
resprimary.ordered
# parameters for the pheatmap
topgenes.IDs <- head(rownames(resprimary.ordered),54) # call the first 13 genes that are differentially expressed, FDR < 0.05 correct head(resprimary.ordered)
head(resprimary.ordered)
head(resprimary.ordered, 60)
head(resprimary.ordered, 55)
# parameters for the pheatmap
topgenes.IDs <- head(rownames(resprimary.ordered),54) # call the first 13 genes that are differentially expressed, FDR < 0.05 correct
[topgenes.IDs,]
topgenes.IDs
topgenes_rlog.counts
df_annot.col <- as.data.frame(colData(dds)[c("pCO2")])
df_annot.col
colData(dds)
ann_colors = list(
pCO2 = c(Low="turquoise", High="coral1"))
rlog.heatmap <- pheatmap(topgenes_corrected,
annotation_col=df_annot.col,
main = "Ambient versus Moderate (54 total DEGs)",
cutree_cols = 2,
cutree_rows = 2,
annotation_legend = TRUE,
annotation_colors = ann_colors,
show_rownames = FALSE,
labels_col=df_annot.col$pCO2,
angle_col = 0,
fontsize = 8,
legend = TRUE)
rlog.heatmap
#Save ppheatmap
save_pheatmap(rlog.heatmap, filename = "../../Output/Transcriptomics/DESeq2/rlog_heatmap.png")
# main model
# resprimary <- results(dds.d0, name="Primary_Treatment_M_vs_A", alpha = 0.05)
resprimary         <- results(dds.run, contrast=c("pCO2", "Low", "High"), alpha = 0.05)
numDEGs_padj       <- data.frame(table(resprimary$padj<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
numDEGs_padj
resprimary.ordered <- resprimary[order(resprimary$padj), ] # Order by adjusted p-value
resprimary.ordered
num.DownReg        <- sum((resprimary.ordered$log2FoldChange[1:numDEGs_padj] > 0) == TRUE) #  LFC >= 1
num.DownReg
num.UpReg          <- sum((resprimary.ordered$log2FoldChange[1:numDEGs_padj] < 0) == TRUE) # LFC >= 1
num.UpReg
total              <- sum(num.DownReg,num.UpReg) # sum of DEGs with the criteria pdj < 0.05 + LFC>1 (< -1)
total
# Write results - covert to as.data.frame for the ordered results
resdata.primary  <- merge(as.data.frame(resprimary.ordered), as.data.frame(counts(dds.run, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.primary)[1] <- "Gene"
resdata.primary <- resdata.primary[order(resdata.primary$padj), ] # Order by adjusted p-value
resdata.primary
resdata.primary <- resdata.primary[order(resdata.primary$padj), ] # Order by adjusted p-value
resdata.primary
# Data transformations for heatmap and PCA visuals ======================================================================================= #
# rlog - regularized log transformation of origin count data to log2 scale - fit for each sample and dist. of coefficients in the data
rlog<- rlogTransformation(dds) # rlog transform (regularized log)
hist(assay(rlog)) # view histogram
# parameters for the pheatmap
topgenes.IDs <- head(rownames(resprimary.ordered),54) # call the first 13 genes that are differentially expressed, FDR < 0.05 correct
topgenes_rlog.counts <- assay(rlog)[topgenes.IDs,]
topgenes_corrected <- topgenes_rlog.counts - rowMeans(topgenes_rlog.counts) # substract from the row mean to get +/- 0 to normalizze and ease the asthetic
df_annot.col <- as.data.frame(colData(dds)[c("pCO2")])
ann_colors = list(
pCO2 = c(Low="turquoise", High="coral1"))
rlog.heatmap <- pheatmap(topgenes_corrected,
annotation_col=df_annot.col,
main = "Ambient versus Moderate (54 total DEGs)",
cutree_cols = 2,
cutree_rows = 2,
annotation_legend = TRUE,
annotation_colors = ann_colors,
show_rownames = FALSE,
labels_col=df_annot.col$pCO2,
angle_col = 0,
fontsize = 8,
legend = TRUE)
#Save ppheatmap
save_pheatmap(rlog.heatmap, filename = "../../Output/Transcriptomics/DESeq2/rlog_heatmap.png")
topgenes_corrected
rowMeans(topgenes_rlog.counts)
topgenes_rlog.counts
rowMeans(topgenes_rlog.counts)
rlog.heatmap <- pheatmap(topgenes_rlog.counts,
annotation_col=df_annot.col,
main = "Ambient versus Moderate (54 total DEGs)",
cutree_cols = 2,
cutree_rows = 2,
annotation_legend = TRUE,
annotation_colors = ann_colors,
show_rownames = FALSE,
labels_col=df_annot.col$pCO2,
angle_col = 0,
fontsize = 8,
legend = TRUE)
#Save ppheatmap
save_pheatmap(rlog.heatmap, filename = "../../Output/Transcriptomics/DESeq2/rlog_heatmap.png")
topgenes_rlog.counts <- assay(rlog)[topgenes.IDs,]
topgenes_corrected <- topgenes_rlog.counts - rowMeans(topgenes_rlog.counts) # substract from the row mean to get +/- 0 to normalizze and ease the asthetic
df_annot.col <- as.data.frame(colData(dds)[c("pCO2")])
df_annot.col <- as.data.frame(colData(dds,run)[c("pCO2")])
df_annot.col <- as.data.frame(colData(dds.run)[c("pCO2")])
ann_colors = list(
pCO2 = c(Low="turquoise", High="coral1"))
df_annot.col$pCO2
topgenes_corrected
assay(rlog)
assay(rlog)[topgenes.IDs,]
ggplot(pcaData, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("PCA: Day0 (rlog)") +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
ggplot(pcaData, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
counts_matrix <- data.frame(filtered_counts_matrix_annotation[,-c(1,41:44)], row.names=filtered_counts_matrix_annotation[,1])
### filtered counts tables - format matrix after upload [from Count_Matrix_Stats.Filter.R]
filtered_counts_matrix_annotation  <- read.csv(file="../../Output/Transcriptomics/Filtered_counts_matrix/filter_3cmpm50perc_WITH_ANNOTATION.csv",
sep=',',
header=TRUE)
counts_matrix <- data.frame(filtered_counts_matrix_annotation[,-c(1,41:44)], row.names=filtered_counts_matrix_annotation[,1])
# ==========================================================
#  FULL MODEL ==  design = ~ pCO2
# ========================================================== #
#####
Exp.metadata       <- exp_data %>%
dplyr::select(c('SampleName_readmatrix', 'pCO2')) %>%
dplyr::rename(Sample.Name = SampleName_readmatrix) %>% # coondense dataset to build target matrix
dplyr::filter(Sample.Name %in% colnames(counts_matrix))
Exp.metadata.df    <- data.frame(Exp.metadata[,-1], row.names=Exp.metadata[,1]) # move Sample.Name column as row names
Exp.metadata.mtx   <- as.matrix(Exp.metadata.df, row.names="BayScallop.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
Exp.metadata.mtx_2 <- as.data.frame(Exp.metadata.mtx[match(colnames(counts_matrix),rownames(Exp.metadata.mtx)), ]) %>% rename(pCO2 = 1)
all(rownames(Exp.metadata.mtx_2) %in% colnames(counts_matrix)) # should be TRUE
all(rownames(Exp.metadata.mtx_2) == colnames(counts_matrix)) # should be TRUE
# build dds
dds <- DESeqDataSetFromMatrix(countData = counts_matrix,
colData = Exp.metadata.mtx_2,
design = ~pCO2) # DESeq Data Set (dds) - design as ~Primary_Treatment
dds.run <- DESeq(dds) # wait for this to complete....
# main model
# resprimary <- results(dds.d0, name="Primary_Treatment_M_vs_A", alpha = 0.05)
resprimary         <- results(dds.run, contrast=c("pCO2", "Low", "High"), alpha = 0.05)
# main model
# resprimary <- results(dds.d0, name="Primary_Treatment_M_vs_A", alpha = 0.05)
resprimary         <- results(dds.run, contrast=c("pCO2", "Low", "High"), alpha = 0.05)
numDEGs_padj       <- data.frame(table(resprimary$padj<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
numDEGs_padj
# PCA plot rlog ------------------------ #
pcaData    <- plotPCA(rlog, intgroup = "pCO2", returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
# parameters for the pheatmap
topgenes.IDs <- head(rownames(resprimary.ordered),54) # call the first 13 genes that are differentially expressed, FDR < 0.05 correct
topgenes_rlog.counts <- assay(rlog)[topgenes.IDs,]
topgenes_corrected <- topgenes_rlog.counts - rowMeans(topgenes_rlog.counts) # substract from the row mean to get +/- 0 to normalizze and ease the asthetic
df_annot.col <- as.data.frame(colData(dds.run)[c("pCO2")])
# main model
# resprimary <- results(dds.d0, name="Primary_Treatment_M_vs_A", alpha = 0.05)
resprimary         <- results(dds.run, contrast=c("pCO2", "Low", "High"), alpha = 0.05)
# main model
# resprimary <- results(dds.d0, name="Primary_Treatment_M_vs_A", alpha = 0.05)
resprimary         <- results(dds.run, contrast=c("pCO2", "Low", "High"), alpha = 0.05)
numDEGs_padj       <- data.frame(table(resprimary$padj<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
resprimary.ordered <- resprimary[order(resprimary$padj), ] # Order by adjusted p-value
resprimary.ordered <- resprimary[order(resprimary$padj), ] # Order by adjusted p-value
num.DownReg        <- sum((resprimary.ordered$log2FoldChange[1:numDEGs_padj] > 0) == TRUE) #  LFC >= 1
resprimary.ordered <- resprimary[order(resprimary$padj), ] # Order by adjusted p-value
num.DownReg        <- sum((resprimary.ordered$log2FoldChange[1:numDEGs_padj] > 0) == TRUE) #  LFC >= 1
num.UpReg          <- sum((resprimary.ordered$log2FoldChange[1:numDEGs_padj] < 0) == TRUE) # LFC >= 1
total              <- sum(num.DownReg,num.UpReg) # sum of DEGs with the criteria pdj < 0.05 + LFC>1 (< -1)
# parameters for the pheatmap
topgenes.IDs <- head(rownames(resprimary.ordered),54) # call the first 13 genes that are differentially expressed, FDR < 0.05 correct
topgenes_rlog.counts <- assay(rlog)[topgenes.IDs,]
topgenes_corrected <- topgenes_rlog.counts - rowMeans(topgenes_rlog.counts) # substract from the row mean to get +/- 0 to normalizze and ease the asthetic
df_annot.col <- as.data.frame(colData(dds.run)[c("pCO2")])
ann_colors = list(
pCO2 = c(Low="turquoise", High="coral1"))
rlog.heatmap <- pheatmap(topgenes_corrected,
annotation_col=df_annot.col,
main = "Ambient versus Moderate (54 total DEGs)",
cutree_cols = 2,
cutree_rows = 2,
annotation_legend = TRUE,
annotation_colors = ann_colors,
show_rownames = FALSE,
labels_col=df_annot.col$pCO2,
angle_col = 0,
fontsize = 8,
legend = TRUE)
#Save ppheatmap
save_pheatmap(rlog.heatmap, filename = "../../Output/Transcriptomics/DESeq2/rlog_heatmap.png")
ggplot(pcaData, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
raw_counts_matrix_annotation
raw_counts_matrix_annotation  <- read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep=',',
header=TRUE) %>%
dplyr::select(!c(Ai19, Ai3))
raw_counts_matrix_annotation
### filtered counts tables - format matrix after upload [from Count_Matrix_Stats.Filter.R]
filtered_counts_matrix_annotation  <- read.csv(file="../../Output/Transcriptomics/Filtered_counts_matrix/filter_3cmpm50perc_WITH_ANNOTATION.csv",
sep=',',
header=TRUE) %>%
dplyr::select(!c(Ai19, Ai3))
counts_matrix <- data.frame(raw_counts_matrix_annotation[,-c(1,41:44)], row.names=raw_counts_matrix_annotation[,1])
raw_counts_matrix_annotation
ncol(counts_matrix) # 39 samples
raw_counts_matrix_annotation
colnames(raw_counts_matrix_annotation)
counts_matrix <- data.frame(filtered_counts_matrix_annotation[,-c(1,39:42)], row.names=filtered_counts_matrix_annotation[,1])# data.frame(filtered_counts_matrix_annotation[,-c(1,41:44)], row.names=filtered_counts_matrix_annotation[,1])
counts_matrix <- data.frame(raw_counts_matrix_annotation[,-c(1,39:42)], row.names=raw_counts_matrix_annotation[,1])#data.frame(raw_counts_matrix_annotation[,-c(1,41:44)], row.names=raw_counts_matrix_annotation[,1])
# ==========================================================
#  FULL MODEL ==  design = ~ pCO2
# ========================================================== #
#####
Exp.metadata       <- exp_data %>%
dplyr::select(c('SampleName_readmatrix', 'pCO2')) %>%
dplyr::rename(Sample.Name = SampleName_readmatrix) %>% # coondense dataset to build target matrix
dplyr::filter(Sample.Name %in% colnames(counts_matrix))
Exp.metadata.df    <- data.frame(Exp.metadata[,-1], row.names=Exp.metadata[,1]) # move Sample.Name column as row names
Exp.metadata.mtx   <- as.matrix(Exp.metadata.df, row.names="BayScallop.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
Exp.metadata.mtx_2 <- as.data.frame(Exp.metadata.mtx[match(colnames(counts_matrix),rownames(Exp.metadata.mtx)), ]) %>% rename(pCO2 = 1)
all(rownames(Exp.metadata.mtx_2) %in% colnames(counts_matrix)) # should be TRUE
all(rownames(Exp.metadata.mtx_2) == colnames(counts_matrix)) # should be TRUE
# build dds
dds <- DESeqDataSetFromMatrix(countData = counts_matrix,
colData = Exp.metadata.mtx_2,
design = ~pCO2) # DESeq Data Set (dds) - design as ~Primary_Treatment
Exp.metadata
# DAY 0 PLOT THE (1) READS PER SAMPLE (2) READS PER GENE - FOR EACH DDS
nsamples        <- ncol(counts(dds)) # Number of samples - for the plot label
rps             <- qplot(colSums(counts(dds))) +# reads of reads per sample
labs(x = "Mapped reads per sample", y = "Number of samples",
title = "Day 0: Mapped reads per sample") +
geom_label(aes(x = 1.5e6, y = 3, label = paste(nsamples, "samples")))
ngenes          <- nrow(counts(dds)) # Number of genes
ngenes_min      <- min(rowSums(counts(dds))) #  minimum reads
ngenes_mean.min <- min(rowMeans2(counts(dds))) # minimum row mean
ngenes_max      <- max(rowSums(counts(dds))) #  maximum reads
rpg             <- qplot(log10(rowSums(counts(dds))), bins = 16) + # number of reads per gene
labs(x = "log10(Mapped reads per gene)",
y = "Number of genes",
title = "Mapped reads per gene") +
geom_label(aes(x = 4, y = 2000, label = paste(ngenes, "total genes"))) +
geom_label(aes(x = 4, y = 1700, label = paste("max count =", ngenes_max))) +
geom_label(aes(x = 4, y = 1400, label = paste("min count =", ngenes_min))) +
geom_label(aes(x = 4, y = 1100, label = paste("min mean =", ngenes_mean.min)))
countfig <- plot_grid(rps, rpg)
countfig
dds.run <- DESeq(dds) # wait for this to complete....
# main model
# resprimary <- results(dds.d0, name="Primary_Treatment_M_vs_A", alpha = 0.05)
resprimary         <- results(dds.run, contrast=c("pCO2", "Low", "High"), alpha = 0.05)
numDEGs_padj       <- data.frame(table(resprimary$padj<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
numDEGs_padj
resprimary.ordered <- resprimary[order(resprimary$padj), ] # Order by adjusted p-value
num.DownReg        <- sum((resprimary.ordered$log2FoldChange[1:numDEGs_padj] > 0) == TRUE) #  LFC >= 1
num.UpReg          <- sum((resprimary.ordered$log2FoldChange[1:numDEGs_padj] < 0) == TRUE) # LFC >= 1
total              <- sum(num.DownReg,num.UpReg) # sum of DEGs with the criteria pdj < 0.05 + LFC>1 (< -1)
# Write results - covert to as.data.frame for the ordered results
resdata.primary  <- merge(as.data.frame(resprimary.ordered), as.data.frame(counts(dds.run, normalized=TRUE)), by="row.names", sort=FALSE) ## Merge with normalized count data
names(resdata.primary)[1] <- "Gene"
resdata.primary <- resdata.primary[order(resdata.primary$padj), ] # Order by adjusted p-value
resdata.primary
# Data transformations for heatmap and PCA visuals ======================================================================================= #
# rlog - regularized log transformation of origin count data to log2 scale - fit for each sample and dist. of coefficients in the data
rlog<- rlogTransformation(dds) # rlog transform (regularized log)
EnhancedVolcano(resprimary,
lab = rownames(resprimary),
x = 'log2FoldChange',
y = 'padj',
title = 'pCO2 Treatment (Low v High)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 1,
pCutoff = 0.05,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
# parameters for the pheatmap
topgenes.IDs <- head(rownames(resprimary.ordered),54) # call the first 13 genes that are differentially expressed, FDR < 0.05 correct
topgenes_rlog.counts <- assay(rlog)[topgenes.IDs,]
topgenes_corrected <- topgenes_rlog.counts - rowMeans(topgenes_rlog.counts) # substract from the row mean to get +/- 0 to normalizze and ease the asthetic
df_annot.col <- as.data.frame(colData(dds.run)[c("pCO2")])
ann_colors = list(
pCO2 = c(Low="turquoise", High="coral1"))
rlog.heatmap <- pheatmap(topgenes_corrected,
annotation_col=df_annot.col,
main = "Ambient versus Moderate (54 total DEGs)",
cutree_cols = 2,
cutree_rows = 2,
annotation_legend = TRUE,
annotation_colors = ann_colors,
show_rownames = FALSE,
labels_col=df_annot.col$pCO2,
angle_col = 0,
fontsize = 8,
legend = TRUE)
#Save ppheatmap
save_pheatmap(rlog.heatmap, filename = "../../Output/Transcriptomics/DESeq2/rlog_heatmap.png")
# PCA plot rlog ------------------------ #
pcaData    <- plotPCA(rlog, intgroup = "pCO2", returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
