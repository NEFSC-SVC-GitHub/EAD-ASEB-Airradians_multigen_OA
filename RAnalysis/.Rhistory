shapiro.test(resid(SGFmod_223)) # 0.5899
leveneTest(SGFmod_223)# 0.3686
summary(SGFmod_223)
#             Df Sum Sq Mean Sq F value  Pr(>F)
# pCO2         2   5991  2995.7    7.92 0.00371 **
# Residuals   17   6431   378.3
TukeyHSD(SGFmod_223)
#             Df Sum Sq Mean Sq F value  Pr(>F)
# pCO2         2   5991  2995.7    7.92 0.00371 **
# Residuals   17   6431   378.3
# TukeyHSD(SGFmod_223)
# $pCO2
#                         diff       lwr       upr     p adj
# 500 μatm-1200 μatm -31.47811 -59.23644 -3.719785 0.0251343
# 800 μatm-1200 μatm  10.23495 -16.43438 36.904290 0.5961931
# 800 μatm-500 μatm   41.71306  13.95474 69.471390 0.0034461
SGFmod_223.tukey <- emmeans::emmeans(object = SGFmod_223, # run tukey
pairwise ~ "pCO2",
adjust = "tukey")
SGFmod_223.tukey.letters   <- multcomp::cld(object = SGFmod_223.tukey$emmeans, Letters = letters) # letter display\
SGFmod_223.tukey.letters
F2_Masterfile_3_27_23 <- F2_Masterfile_2.0_all %>% dplyr::filter(Date %in% '3/27/2023')
SGFmod_327 <- aov(lm(SFG ~ pCO2 , data =F2_Masterfile_3_27_23 ))
shapiro.test(resid(SGFmod_327)) # 0.1709
leveneTest(SGFmod_327)# 0.004695 **
SGFmod_327_KW <- kruskal.test(SFG ~ pCO2, data =F2_Masterfile_3_27_23)
SGFmod_327_KW
# ?kruskal.test
# Kruskal-Wallis chi-squared = 6.4526, df = 2, p-value = 0.0397
library(FSA)
dunnTest(SFG ~ pCO2, data =F2_Masterfile_3_27_23)
F2_Masterfile_2.0_all$pCO2 <- factor(F2_Masterfile_2.0$pCO2, levels= c('500 μatm','800 μatm','1200 μatm'))
F2_Masterfile_2.0_all$pCO2 <- factor(F2_Masterfile_2.0_all$pCO2, levels= c('500 μatm','800 μatm','1200 μatm'))
F2_SGF_Means_by_tank <- F2_Masterfile_2.0_all %>%
Rmisc::summarySE(measurevar="SFG",
groupvars=c("Age", "pCO2", "Replicate"))
SFG_Pousse_F2       <- ggplot(data=F2_SGF_Means_by_tank, aes(x=pCO2, y=SFG, colour=pCO2)) +
scale_colour_manual(values=c("forestgreen","orange", "purple"))+
theme_classic() +
geom_boxplot(fill="white",
outlier.colour=NA,
position=position_dodge(width=0.9)) +
geom_point(position=position_jitterdodge()) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
labs(title="F2 Bay Scallops: Scope for Growth ", x ="Month", y = "Scope for Growth") +
facet_wrap(~Age)
F2_SGF_Means_plotting <- F2_SGF_Means_by_tank %>%
Rmisc::summarySE(measurevar="SFG",
groupvars=c("Age", "pCO2"))
F2_SGF_MeanSE <-  F2_SGF_Means_plotting %>%
ggplot(aes(x=(as.factor(Age)),
y=SFG,
color=as.factor(pCO2))) +
geom_point(position=position_dodge(.5))+
scale_color_manual(values=c("forestgreen",
"darkorange2",
"purple"))+
geom_errorbar(aes(ymin=SFG-se,
ymax=SFG+se), width=.2,
position=position_dodge(.5)) +
ggtitle("SFG (mean+-SE)") +
theme_classic() +
xlab("Age (dpf)") +
ylab("SFG") +
#xlab("Age (d)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
# scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
# labs(color='pCO2 treatment') + # legend name
theme(text = element_text(size=10))
print(ggarrange(SFG_Pousse_F2,F2_SGF_MeanSE,nrow=2))
pdf("Output/F2_SFG.pdf", width = 6, height = 8)
print(ggarrange(SFG_Pousse_F2,F2_SGF_MeanSE,nrow=2))
dev.off()
run_ttest <- function(datafilename,  outputfilename) {
# variables for both for loops
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 12)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Age_DPF', 'model', 'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom',
'Tstat','P_val', 'SigDif') # names for comuns in the for loop
unique(datafilename$Age)
outputfilename <- data.frame()
for (i in 1:length(unique(datafilename$Age))) {
GROUPvar_loop <- unique(datafilename$GROUPvar)[i]
Data_all      <- datafilename %>% dplyr::filter(GROUPvar %in% GROUPvar_loop)
# Data_mean   <- Data_all %>% summarySE(measurevar="DPvar",
#                                       groupvars=c("group1","Tank_Replicate", "INDvar"))
# run assumptions
# normality of data
normality_A <- (Data_all %>%
group_by(as.factor(INDvar)) %>%
rstatix::shapiro_test(DPvar))$p[1]
normality_B <- (Data_all %>%
group_by(as.factor(INDvar)) %>%
rstatix::shapiro_test(DPvar))$p[2]
# equal variance
variance <- (Data_all %>% rstatix::levene_test(DPvar ~ as.factor(INDvar)))$p[1]
# run all modles
Ttestmod.eqvar      <- t.test(Data_all$DPvar ~ (as.factor(Data_all$INDvar)),
alternative = "greater",
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test(Data_all$DPvar ~ (as.factor(Data_all$INDvar)),
alternative = "greater",
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(Data_all$DPvar ~
as.numeric(as.factor(Data_all$INDvar)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- paste0(normality_A, '; ',normality_B)
DF_loop$ResidNorm   <- if(normality_A > 0.05 & normality_B > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality_A > 0.05 & normality_B > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality_A > 0.05 & normality_B > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
DF_loop$Age_DPF     <- GROUPvar_loop
# asign loop and cumulative output table
df                        <- data.frame(DF_loop) # name dataframe for this single row
outputfilename <- rbind(outputfilename,DF_loop) #bind to a cumulative list dataframe
# print(outputfilename) # print to monitor progress
}
return(outputfilename)
}
library(purrr)
F2_Masterfile_2.0_LvM$GROUPvar <- F2_Masterfile_2.0_LvM$Age
F2_Masterfile_2.0_LvM$DPvar    <- F2_Masterfile_2.0_LvM$SFG
F2_Masterfile_2.0_LvM$INDvar   <- F2_Masterfile_2.0_LvM$pCO2
as.data.frame(run_ttest(F2_Masterfile_2.0_LvM))
F2_Masterfile_2.0_LvM
F2_Masterfile_2.0_LvM$pCO2 <- factor(F2_Masterfile_2.0_LvM$pCO2, levels= c('500 μatm','800 μatm','1200 μatm'))
F2_SGF_Means_by_tank <- F2_Masterfile_2.0_LvM %>%
Rmisc::summarySE(measurevar="SFG",
groupvars=c("Age", "pCO2", "Replicate"))
SFG_Pousse_F2       <- ggplot(data=F2_SGF_Means_by_tank, aes(x=pCO2, y=SFG, colour=pCO2)) +
scale_colour_manual(values=c("forestgreen","orange", "purple"))+
theme_classic() +
geom_boxplot(fill="white",
outlier.colour=NA,
position=position_dodge(width=0.9)) +
geom_point(position=position_jitterdodge()) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
labs(title="F2 Bay Scallops: Scope for Growth ", x ="Month", y = "Scope for Growth") +
facet_wrap(~Age)
SFG_Pousse_F2
F2_SGF_Means_plotting <- F2_SGF_Means_by_tank %>%
Rmisc::summarySE(measurevar="SFG",
groupvars=c("Age", "pCO2"))
F2_SGF_MeanSE <-  F2_SGF_Means_plotting %>%
ggplot(aes(x=(as.factor(Age)),
y=SFG,
color=as.factor(pCO2))) +
geom_point(position=position_dodge(.5))+
scale_color_manual(values=c("forestgreen",
"darkorange2",
"purple"))+
geom_errorbar(aes(ymin=SFG-se,
ymax=SFG+se), width=.2,
position=position_dodge(.5)) +
ggtitle("SFG (mean+-SE)") +
theme_classic() +
xlab("Age (dpf)") +
ylab("SFG") +
#xlab("Age (d)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
# scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
# labs(color='pCO2 treatment') + # legend name
theme(text = element_text(size=10))
F2_SGF_MeanSE
as.data.frame(run_ttest(F2_Masterfile_2.0_LvM))
F2_Masterfile_2.0_LvM
as.data.frame(run_ttest(F2_Masterfile_2.0_LvM))
F2_Masterfile_2.0_LvH$GROUPvar <- F2_Masterfile_2.0_LvH$Age
F2_Masterfile_2.0_LvH$DPvar    <- F2_Masterfile_2.0_LvH$SFG
F2_Masterfile_2.0_LvH$INDvar   <- F2_Masterfile_2.0_LvH$pCO2
as.data.frame(run_ttest(F2_Masterfile_2.0_LvH))
library(purrr)
F2_Masterfile_2.0_LvH$GROUPvar <- F2_Masterfile_2.0_LvH$Age
F2_Masterfile_2.0_LvH$DPvar    <- F2_Masterfile_2.0_LvH$SFG
F2_Masterfile_2.0_LvH$INDvar   <- F2_Masterfile_2.0_LvH$pCO2
as.data.frame(run_ttest(F2_Masterfile_2.0_LvH))
run_ttest(F2_Masterfile_2.0_LvH)
as.data.frame(run_ttest(F2_Masterfile_2.0_LvM))
F2_Masterfile_2.0_LvH
F2_Masterfile_2.0_LvM
F2_Masterfile_2.0_LvH
F2_Masterfile_2.0_LvH <- merge(Biodep_blanks,F2_Masterfile, by = c("Date", "pH")) %>% #
tidyr::drop_na(RR_umol_hr_bfactorTDW_LvH) %>%
dplyr::mutate(
# RR RR_umol_hr_bfactorTDW_LvH
RR_mgO2_hr_bfactorTDW = ((RR_umol_hr_bfactorTDW_LvH/1000)*32),# convert umol to mg O2
RR_Joules_hr          = RR_mgO2_hr_bfactorTDW*14, # convert to joules
# ER ER_umol_hr_bfactorTDW_LvH
ExcretionRate_mgNH4_bFactorNormTDW =
((ER_umol_hr_bfactorTDW_LvH/1000)*18.04), # convert umol to mg NH4
ER_Joules_hr                       = ExcretionRate_mgNH4_bFactorNormTDW*24.83, # convert o Joules
# caloric value of dried phytoplankton
Food_Joules_mg = (0.632+0.086 *(Perc_ORG_1))*4.184, # caloric value of dried phytoplaknton following
#Pousee et al. -referenced paper below for calculation
#Platt T, Irwin B. Caloric content of phytoplankton. Limnology and Oceanography. 1973;18(2)
A_Joules_hr = (CR_correct*AE)*Food_Joules_mg,
# FINALLY SCOPE FOR GROWTH YALL
SFG = A_Joules_hr - (RR_Joules_hr + ER_Joules_hr)
)
F2_Masterfile_2.0_LvH$GROUPvar <- F2_Masterfile_2.0_LvH$Age
F2_Masterfile_2.0_LvH$DPvar    <- F2_Masterfile_2.0_LvH$SFG
F2_Masterfile_2.0_LvH$INDvar   <- F2_Masterfile_2.0_LvH$pCO2
as.data.frame(run_ttest(F2_Masterfile_2.0_LvH))
F2_Masterfile_2.0_LvM$GROUPvar <- F2_Masterfile_2.0_LvM$Age
F2_Masterfile_2.0_LvM$DPvar    <- F2_Masterfile_2.0_LvM$SFG
F2_Masterfile_2.0_LvM$INDvar   <- F2_Masterfile_2.0_LvM$pCO2
as.data.frame(run_ttest(F2_Masterfile_2.0_LvM))
as.data.frame(run_ttest(F2_Masterfile_2.0_LvH))
write.csv(
as.data.frame(run_ttest(F2_Masterfile_2.0_LvH)),
"Output/F2_SFG_Ttests_LOWvHIGH.csv"
)
write.csv(
as.data.frame(run_ttest(F2_Masterfile_2.0_LvM)),
"Output/F2_SFG_Ttests_LOWvMOD.csv"
)
F2_Masterfile_2.0_LvM
F2_Masterfile_2.0_LvH$pCO2 <- factor(F2_Masterfile_2.0_LvH$pCO2, levels= c('500 μatm','800 μatm','1200 μatm'))
F2_SGF_Means_by_tank <- F2_Masterfile_2.0_LvH %>%
Rmisc::summarySE(measurevar="SFG",
groupvars=c("Age", "pCO2", "Replicate"))
SFG_Pousse_F2       <- ggplot(data=F2_SGF_Means_by_tank, aes(x=pCO2, y=SFG, colour=pCO2)) +
scale_colour_manual(values=c("forestgreen","orange", "purple"))+
theme_classic() +
geom_boxplot(fill="white",
outlier.colour=NA,
position=position_dodge(width=0.9)) +
geom_point(position=position_jitterdodge()) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
labs(title="F2 Bay Scallops: Scope for Growth ", x ="Month", y = "Scope for Growth") +
facet_wrap(~Age)
F2_SGF_Means_plotting <- F2_SGF_Means_by_tank %>%
Rmisc::summarySE(measurevar="SFG",
groupvars=c("Age", "pCO2"))
F2_SGF_MeanSE <-  F2_SGF_Means_plotting %>%
ggplot(aes(x=(as.factor(Age)),
y=SFG,
color=as.factor(pCO2))) +
geom_point(position=position_dodge(.5))+
scale_color_manual(values=c("forestgreen",
"darkorange2",
"purple"))+
geom_errorbar(aes(ymin=SFG-se,
ymax=SFG+se), width=.2,
position=position_dodge(.5)) +
ggtitle("SFG (mean+-SE)") +
theme_classic() +
xlab("Age (dpf)") +
ylab("SFG") +
#xlab("Age (d)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
# scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
# labs(color='pCO2 treatment') + # legend name
theme(text = element_text(size=10))
print(ggarrange(SFG_Pousse_F2,F2_SGF_MeanSE,nrow=2))
F2_Masterfile_2.0_LvM$pCO2 <- factor(F2_Masterfile_2.0_LvM$pCO2, levels= c('500 μatm','800 μatm','1200 μatm'))
F2_SGF_Means_by_tank <- F2_Masterfile_2.0_LvM %>%
Rmisc::summarySE(measurevar="SFG",
groupvars=c("Age", "pCO2", "Replicate"))
SFG_Pousse_F2       <- ggplot(data=F2_SGF_Means_by_tank, aes(x=pCO2, y=SFG, colour=pCO2)) +
scale_colour_manual(values=c("forestgreen","orange", "purple"))+
theme_classic() +
geom_boxplot(fill="white",
outlier.colour=NA,
position=position_dodge(width=0.9)) +
geom_point(position=position_jitterdodge()) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
labs(title="F2 Bay Scallops: Scope for Growth ", x ="Month", y = "Scope for Growth") +
facet_wrap(~Age)
F2_SGF_Means_plotting <- F2_SGF_Means_by_tank %>%
Rmisc::summarySE(measurevar="SFG",
groupvars=c("Age", "pCO2"))
F2_SGF_MeanSE <-  F2_SGF_Means_plotting %>%
ggplot(aes(x=(as.factor(Age)),
y=SFG,
color=as.factor(pCO2))) +
geom_point(position=position_dodge(.5))+
scale_color_manual(values=c("forestgreen",
"darkorange2",
"purple"))+
geom_errorbar(aes(ymin=SFG-se,
ymax=SFG+se), width=.2,
position=position_dodge(.5)) +
ggtitle("SFG (mean+-SE)") +
theme_classic() +
xlab("Age (dpf)") +
ylab("SFG") +
#xlab("Age (d)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
# scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
# labs(color='pCO2 treatment') + # legend name
theme(text = element_text(size=10))
print(ggarrange(SFG_Pousse_F2,F2_SGF_MeanSE,nrow=2))
F2_Masterfile_2.0_all$pCO2 <- factor(F2_Masterfile_2.0_all$pCO2, levels= c('500 μatm','800 μatm','1200 μatm'))
F2_SGF_Means_by_tank <- F2_Masterfile_2.0_all %>%
Rmisc::summarySE(measurevar="SFG",
groupvars=c("Age", "pCO2", "Replicate"))
SFG_Pousse_F2       <- ggplot(data=F2_SGF_Means_by_tank, aes(x=pCO2, y=SFG, colour=pCO2)) +
scale_colour_manual(values=c("forestgreen","orange", "purple"))+
theme_classic() +
geom_boxplot(fill="white",
outlier.colour=NA,
position=position_dodge(width=0.9)) +
geom_point(position=position_jitterdodge()) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
labs(title="F2 Bay Scallops: Scope for Growth ", x ="Month", y = "Scope for Growth") +
facet_wrap(~Age)
F2_SGF_MeanSE <-  F2_SGF_Means_plotting %>%
ggplot(aes(x=(as.factor(Age)),
y=SFG,
color=as.factor(pCO2))) +
geom_point(position=position_dodge(.5))+
scale_color_manual(values=c("forestgreen",
"darkorange2",
"purple"))+
geom_errorbar(aes(ymin=SFG-se,
ymax=SFG+se), width=.2,
position=position_dodge(.5)) +
ggtitle("SFG (mean+-SE)") +
theme_classic() +
xlab("Age (dpf)") +
ylab("SFG") +
#xlab("Age (d)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
# scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
# labs(color='pCO2 treatment') + # legend name
theme(text = element_text(size=10))
print(ggarrange(SFG_Pousse_F2,F2_SGF_MeanSE,nrow=2))
F2_SGF_Means_plotting <- F2_SGF_Means_by_tank %>%
Rmisc::summarySE(measurevar="SFG",
groupvars=c("Age", "pCO2"))
F2_SGF_MeanSE <-  F2_SGF_Means_plotting %>%
ggplot(aes(x=(as.factor(Age)),
y=SFG,
color=as.factor(pCO2))) +
geom_point(position=position_dodge(.5))+
scale_color_manual(values=c("forestgreen",
"darkorange2",
"purple"))+
geom_errorbar(aes(ymin=SFG-se,
ymax=SFG+se), width=.2,
position=position_dodge(.5)) +
ggtitle("SFG (mean+-SE)") +
theme_classic() +
xlab("Age (dpf)") +
ylab("SFG") +
#xlab("Age (d)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
# scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
# labs(color='pCO2 treatment') + # legend name
theme(text = element_text(size=10))
print(ggarrange(SFG_Pousse_F2,F2_SGF_MeanSE,nrow=2))
F2_Masterfile_2.0_LvM$pCO2 <- factor(F2_Masterfile_2.0_LvM$pCO2, levels= c('500 μatm','800 μatm','1200 μatm'))
F2_SGF_Means_by_tank <- F2_Masterfile_2.0_LvM %>%
Rmisc::summarySE(measurevar="SFG",
groupvars=c("Age", "pCO2", "Replicate"))
SFG_Pousse_F2       <- ggplot(data=F2_SGF_Means_by_tank, aes(x=pCO2, y=SFG, colour=pCO2)) +
scale_colour_manual(values=c("forestgreen","orange", "purple"))+
theme_classic() +
geom_boxplot(fill="white",
outlier.colour=NA,
position=position_dodge(width=0.9)) +
geom_point(position=position_jitterdodge()) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
labs(title="F2 Bay Scallops: Scope for Growth ", x ="Month", y = "Scope for Growth") +
facet_wrap(~Age)
F2_SGF_MeanSE <-  F2_SGF_Means_plotting %>%
ggplot(aes(x=(as.factor(Age)),
y=SFG,
color=as.factor(pCO2))) +
geom_point(position=position_dodge(.5))+
scale_color_manual(values=c("forestgreen",
"darkorange2",
"purple"))+
geom_errorbar(aes(ymin=SFG-se,
ymax=SFG+se), width=.2,
position=position_dodge(.5)) +
ggtitle("SFG (mean+-SE)") +
theme_classic() +
xlab("Age (dpf)") +
ylab("SFG") +
#xlab("Age (d)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="none")+
# scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +
# labs(color='pCO2 treatment') + # legend name
theme(text = element_text(size=10))
print(ggarrange(SFG_Pousse_F2,F2_SGF_MeanSE,nrow=2))
run_ttest <- function(datafilename,  outputfilename) {
# variables for both for loops
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 12)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Age_DPF', 'model', 'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom',
'Tstat','P_val', 'SigDif') # names for comuns in the for loop
unique(datafilename$Age)
outputfilename <- data.frame()
for (i in 1:length(unique(datafilename$Age))) {
GROUPvar_loop <- unique(datafilename$GROUPvar)[i]
Data_all      <- datafilename %>% dplyr::filter(GROUPvar %in% GROUPvar_loop)
# Data_mean   <- Data_all %>% summarySE(measurevar="DPvar",
#                                       groupvars=c("group1","Tank_Replicate", "INDvar"))
# run assumptions
# normality of data
normality_A <- (Data_all %>%
group_by(as.factor(INDvar)) %>%
rstatix::shapiro_test(DPvar))$p[1]
normality_B <- (Data_all %>%
group_by(as.factor(INDvar)) %>%
rstatix::shapiro_test(DPvar))$p[2]
# equal variance
variance <- (Data_all %>% rstatix::levene_test(DPvar ~ as.factor(INDvar)))$p[1]
# run all modles
Ttestmod.eqvar      <- t.test(Data_all$DPvar ~ (as.factor(Data_all$INDvar)),
alternative = "greater",
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test(Data_all$DPvar ~ (as.factor(Data_all$INDvar)),
alternative = "greater",
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(Data_all$DPvar ~
as.numeric(as.factor(Data_all$INDvar)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- paste0(normality_A, '; ',normality_B)
DF_loop$ResidNorm   <- if(normality_A > 0.05 & normality_B > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality_A < 0.05 & normality_B > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality_A < 0.05 & normality_B > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
DF_loop$Age_DPF     <- GROUPvar_loop
# asign loop and cumulative output table
df                        <- data.frame(DF_loop) # name dataframe for this single row
outputfilename <- rbind(outputfilename,DF_loop) #bind to a cumulative list dataframe
# print(outputfilename) # print to monitor progress
}
return(outputfilename)
}
as.data.frame(run_ttest(F2_Masterfile_2.0_LvM))
