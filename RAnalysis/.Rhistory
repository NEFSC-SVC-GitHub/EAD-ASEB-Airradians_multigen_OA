print(ggarrange(F1s.BOXPLOT_Length_bfactor.MEDIAN,F1s.BOXPLOT_Length_bfactor.MEDIAN.nofacet, nrow = 1, ncol = 2)) # print the model diagnostics
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/Respiration_Boxplots_LENGTH_bfactorMEDIAN.pdf"), width = 18, height = 8)
print(ggarrange(F1s.BOXPLOT_Length_bfactor.MEDIAN,F1s.BOXPLOT_Length_bfactor.MEDIAN.nofacet, nrow = 1, ncol = 2)) # print the model diagnostics
dev.off()
RR_formatted_F1s.length <- RR_formatted_F1s %>%
dplyr::mutate(Length_mm = Length_um/1000) %>%
dplyr::mutate(resp_mmol_L_hr_bFactorNormLength.MEAN = (resp_umol_L_hr/1000) / ((Length_mm/meanLength)^bLength) ) %>%
dplyr::mutate(resp_mmol_L_hr_bFactorNormLength.MEDIAN = (resp_umol_L_hr/1000) * ((Length_mm/medianLength)^bLength) )
F1s.BOXPLOT_Length_bfactor.MEAN <- RR_formatted_F1s.length %>%
ggplot(aes(x = factor(Date),
y = resp_mmol_L_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange")) +
theme_classic() +
ggtitle("Resp / [ (Length_meas / meanLength)^2.22 ]") +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Gen_lifestage, scales = "free") #, scales = "free)
F1s.BOXPLOT_Length_bfactor.MEAN.nofacet <- RR_formatted_F1s.length %>%
ggplot(aes(x = factor(Date),
y = resp_mmol_L_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange")) +
theme_classic() +
ggtitle("Resp / [ (Length_meas / meanLength)^2.22 ]") +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) # no facet
print(ggarrange(F1s.BOXPLOT_Length_bfactor.MEAN,F1s.BOXPLOT_Length_bfactor.MEAN.nofacet, nrow = 1, ncol = 2)) # print the model diagnostics
RR_formatted_F1s.length <- RR_formatted_F1s %>%
dplyr::mutate(Length_mm = Length_um/1000) %>%
dplyr::mutate(resp_mmol_L_hr_bFactorNormLength.MEAN = (resp_umol_L_hr/1000) / ((Length_mm/meanLength)^bLength) ) %>%
dplyr::mutate(resp_mmol_L_hr_bFactorNormLength.MEDIAN = (resp_umol_L_hr/1000) / ((Length_mm/medianLength)^bLength) )
F1s.BOXPLOT_Length_bfactor.MEDIAN <- RR_formatted_F1s.length %>%
ggplot(aes(x = factor(Date),
y = resp_mmol_L_hr_bFactorNormLength.MEDIAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange")) +
theme_classic() +
ggtitle("Resp / [ (Length_meas / medianLength)^2.22 ]") +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Gen_lifestage, scales = "free") #, scales = "free)
F1s.BOXPLOT_Length_bfactor.MEDIAN.nofacet <- RR_formatted_F1s.length %>%
ggplot(aes(x = factor(Date),
y = resp_mmol_L_hr_bFactorNormLength.MEDIAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange")) +
theme_classic() +
ggtitle("Resp / [ (Length_meas / medianLength)^2.22 ]") +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) # no facet
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/Respiration_Boxplots_LENGTH_bfactorMEDIAN.pdf"), width = 18, height = 8)
print(ggarrange(F1s.BOXPLOT_Length_bfactor.MEDIAN,F1s.BOXPLOT_Length_bfactor.MEDIAN.nofacet, nrow = 1, ncol = 2)) # print the model diagnostics
dev.off()
print(ggarrange(F1s.BOXPLOT_Length_bfactor.MEDIAN,F1s.BOXPLOT_Length_bfactor.MEDIAN.nofacet, nrow = 1, ncol = 2)) # print the model diagnostics
print(ggarrange(F1s.BOXPLOT_Length_bfactor.MEDIAN,F1s.BOXPLOT_Length_bfactor.MEDIAN.nofacet, nrow = 1, ncol = 2)) # print the model diagnostics
RR_formatted_F1s.length <- RR_formatted_F1s %>%
dplyr::mutate(Length_mm = Length_um/1000) %>%
dplyr::mutate(resp_umol_L_hr_bFactorNormLength.MEAN = (resp_umol_L_hr) / ((Length_mm/meanLength)^bLength) ) %>%
dplyr::mutate(resp_umol_L_hr_bFactorNormLength.MEDIAN = (resp_umol_L_hr) / ((Length_mm/medianLength)^bLength) )
F1s.BOXPLOT_Length_bfactor.MEAN <- RR_formatted_F1s.length %>%
ggplot(aes(x = factor(Date),
y = resp_umol_L_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange")) +
theme_classic() +
ggtitle("Resp / [ (Length_meas / meanLength)^2.22 ]") +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Gen_lifestage, scales = "free") #, scales = "free)
F1s.BOXPLOT_Length_bfactor.MEAN.nofacet <- RR_formatted_F1s.length %>%
ggplot(aes(x = factor(Date),
y = resp_umol_L_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange")) +
theme_classic() +
ggtitle("Resp / [ (Length_meas / meanLength)^2.22 ]") +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) # no facet
print(ggarrange(F1s.BOXPLOT_Length_bfactor.MEAN,F1s.BOXPLOT_Length_bfactor.MEAN.nofacet, nrow = 1, ncol = 2)) # print the model diagnostics
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/Respiration_Boxplots_LENGTH_bfactorMEAN.pdf"), width = 18, height = 8)
print(ggarrange(F1s.BOXPLOT_Length_bfactor.MEAN,F1s.BOXPLOT_Length_bfactor.MEAN.nofacet, nrow = 1, ncol = 2)) # print the model diagnostics
dev.off()
F1s.BOXPLOT_Length_bfactor.MEDIAN <- RR_formatted_F1s.length %>%
ggplot(aes(x = factor(Date),
y = resp_umol_L_hr_bFactorNormLength.MEDIAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange")) +
theme_classic() +
ggtitle("Resp / [ (Length_meas / medianLength)^2.22 ]") +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Gen_lifestage, scales = "free") #, scales = "free)
F1s.BOXPLOT_Length_bfactor.MEDIAN.nofacet <- RR_formatted_F1s.length %>%
ggplot(aes(x = factor(Date),
y = resp_umol_L_hr_bFactorNormLength.MEDIAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange")) +
theme_classic() +
ggtitle("Resp / [ (Length_meas / medianLength)^2.22 ]") +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) # no facet
print(ggarrange(F1s.BOXPLOT_Length_bfactor.MEDIAN,F1s.BOXPLOT_Length_bfactor.MEDIAN.nofacet, nrow = 1, ncol = 2)) # print the model diagnostics
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/Respiration_Boxplots_LENGTH_bfactorMEDIAN.pdf"), width = 18, height = 8)
print(ggarrange(F1s.BOXPLOT_Length_bfactor.MEDIAN,F1s.BOXPLOT_Length_bfactor.MEDIAN.nofacet, nrow = 1, ncol = 2)) # print the model diagnostics
dev.off()
print(ggarrange(F1s.BOXPLOT_Length_bfactor.MEDIAN,F1s.BOXPLOT_Length_bfactor.MEDIAN.nofacet, nrow = 1, ncol = 2)) # print the model diagnostics
AOVdf_total
write.csv(AOVdf_total, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/Respiration_ANOVA_table_Length_meanstandard.csv")
library(knitr)
knitr::kable(summary(aov(new_model)) )
as.table(summary(aov(new_model)) )
as.data.table(summary(aov(new_model)))
summary(aov(new_model))
as.data.frame(summary(aov(new_model)))
aov(new_model) %>% kable()
summary(aov(new_model)) %>% kable()
summary(anova(new_model)) %>% kable()
(anova(new_model)) %>% kable()
anova(new_model)
(anova(new_model)) %>% kable()
pander(anova(new_model), style='rmarkdown') # anova table of lmer
kable(as.data.frame(anova(new_model))) %>%  # print a png of this table
kable_styling() %>%
save_kable(file = "C:/Users/samjgurr/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/Respiration_TwoWayANOVA_table_Length_mean.png", zoom = 1.5)
kable(as.data.frame(anova(new_model))) %>%  # print a png of this table
kable_styling() %>%
save_kable(file = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/Respiration_TwoWayANOVA_table_Length_mean.png", zoom = 1.5)
# WRITE CSV OF THE MASTER FILE
write.csv(AOVdf_total, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/Respiration_ANOVA_table_Length_mean.csv")
# f1s data
RR_formatted_F1s <- RR_formatted_F1s.length %>% dplyr::filter(!Gen %in% 'F2s')
# (1) First, run anova within date for all records (for looped!)
ANOVA_Dates       <- as.data.frame(unique(RR_formatted_F1s$Date)) # call a list to loop in
AOVdf_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model', 'DF.num' , 'DF.denom', 'F_val','P_val', 'SigDif', 'ShapiroWilk', 'ResidNorm', 'Levenes', 'HomogVar') # names for comuns in the for loop
for (i in 1:nrow(ANOVA_Dates)) {
date_loop     <- as.character(ANOVA_Dates[i,])
data_loop     <- RR_formatted_F1s %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, resp_umol_L_hr_bFactorNormLength.MEDIAN) %>%
na.omit()
AOVmod              <- aov(lm(data_loop$resp_umol_L_hr_bFactorNormLength ~ data_loop$pCO2))
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'Respiration rate; Length b factor normalized'
DF_loop$model       <- 'one-way AOV; x ~ treatment'
DF_loop$DF.num      <- summary(AOVmod)[[1]][["Df"]][1]
DF_loop$DF.denom    <- summary(AOVmod)[[1]][["Df"]][2]
DF_loop$F_val       <- summary(AOVmod)[[1]][["F value"]][1]
DF_loop$P_val       <- summary(AOVmod)[[1]][["Pr(>F)"]][1]
DF_loop$SigDif      <- if( (summary(AOVmod)[[1]][["Pr(>F)"]][1]) > 0.05) {
'NO'} else {'YES'}
DF_loop$ShapiroWilk <- shapiro.test(resid(AOVmod))[[2]]
DF_loop$ResidNorm   <- if( shapiro.test(resid(AOVmod))[[2]] > 0.05) {
'YES'} else {'NO'}
DF_loop$Levenes     <- leveneTest(AOVmod)[[3]][[1]]
DF_loop$HomogVar    <- if( leveneTest(AOVmod)[[3]][[1]] > 0.05) {
'YES'} else {'NO'}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
AOVdf_total <- rbind(AOVdf_total,DF_loop) #bind to a cumulative list dataframe
print(AOVdf_total) # print to monitor progress
}
AOVdf_total <- AOVdf_total %>% dplyr::arrange(Age)
# WRITE CSV OF THE MASTER FILE
write.csv(AOVdf_total, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/Respiration_ANOVA_table_Length_median.csv")
# Two way anova for pH * time
total_mod  <- aov(lm(resp_umol_L_hr_bFactorNormLength.MEDIAN  ~ pCO2 * Date, data = RR_formatted_F1s))
leveneTest(total_mod) # 0.0672
shapiro.test(resid(total_mod)) # 0.002743
RR_formatted_F1s.length <- RR_formatted_F1s %>%
dplyr::mutate(Length_mm = Length_um/1000) %>%
dplyr::mutate(resp_umol_L_hr_bFactorNormLength.MEAN = (resp_umol_L_hr) / ((Length_mm/meanLength)^bLength) ) %>%
dplyr::mutate(resp_umol_L_hr_bFactorNormLength.MEDIAN = (resp_umol_L_hr) / ((Length_mm/medianLength)^bLength) )
pander(anova(new_model), style='rmarkdown') # anova table of lmer
BioSamples_merged
BioSamples_merged$animal_dry_weight_mg
mean(BioSamples_merged$animal_dry_weight_mg)
meanTDW <- mean(BioSamples_merged$animal_dry_weight_mg)
meanTDW
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# FOR LOOP PREP ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
dates             <- as.data.frame(unique(biodep$Date))
colnames(dates)   <- "Date"
Biodep_Master     <- data.frame() # start dataframe
meanTDW <- mean(BioSamples_merged$animal_dry_weight_mg) # 0.8582318
for (i in 1:nrow(dates)) {
date_loop       <- dates[i,]
blanks_loop     <- WaterSamples_blank_AVE %>% filter(Date %in% date_loop) %>% arrange(treatment)# filter blanks, sort as 7.5 then 8 for treatment pH
waterinput_loop <- WaterSamples_input_AVE %>% filter(Date %in% date_loop) %>% arrange(treatment) # filter blanks, sort as 7.5 then 8 for treatment pH
data_loop       <- BioSamples_merged %>%
dplyr::filter(Date %in% date_loop) %>%
# IER == Inorganic Egestion Rate: PIM of feces/feces collection time
dplyr::mutate(IER_correct = IER_mghr*((animal_dry_weight_mg/meanTDW)^sp_COEF)) %>% # previously 0.1/animal_dry_weight_mg
# IRR == Inorganic Rejection Rate: PIM of pseudofeces/pseudofeces collection time
dplyr::mutate(IRR_correct = IRR_mghr*((animal_dry_weight_mg/meanTDW)^sp_COEF)) %>%  # previously 0.1/animal_dry_weight_mg
# OER == Organic Egestion Rate: POM of feces/feces collection time
dplyr::mutate(OER_correct = OER_mghr*((animal_dry_weight_mg/meanTDW)^sp_COEF)) %>% # previously 0.1/animal_dry_weight_mg
# ORR == Organic Rejection Rate: POM of pseudofeces/pseudofeces collection time
dplyr::mutate(ORR_correct = ORR_mghr*(0.1/animal_dry_weight_mg)^sp_COEF) %>%
# CR  == Cleanrance Rate: IFR/PIM of the water
dplyr::mutate(CR = case_when(
treatment == 7.5 ~ (IRR_mghr + IER_mghr) / waterinput_loop$PIM_mgL_1[1],
treatment == 8.0 ~ (IRR_mghr + IER_mghr) / waterinput_loop$PIM_mgL_1[2]
)) %>%
# FR  == Filtration Rate: CR * TPM of the water
dplyr::mutate(FR = case_when(
treatment == 7.5 ~ CR * waterinput_loop$TPM_mgL_1[1],
treatment == 8.0 ~ CR * waterinput_loop$TPM_mgL_1[2]
)) %>%
# RR  == Rejection Rate: ORR+IRR
dplyr::mutate(RR_correct = ORR_correct + IRR_correct) %>%
# p   == Fraction of Organic Rejected: ORR/RR (organic fraction of the pseudofeces)
dplyr::mutate(p = ORR_correct / RR_correct ) %>%
# f   == POM available: Average POM of the water
dplyr::mutate(f =  case_when(
treatment == 7.5 ~ waterinput_loop$Perc_ORG_1[1] / 100,
treatment == 8.0 ~ waterinput_loop$Perc_ORG_1[2] / 100
)) %>%
# SE  == Selection Efficiency: 1-(p/f) (organic content of pseudofeces/organic content of the water)
dplyr::mutate(SE = 1 - (p / f)) %>%
# IFR == Inorganic Filtration Rate: IER + IRR (PIM feces + PIM pseudofeces; i.e. total inorganic matter filtered/collection time)
dplyr::mutate(IFR = IER_correct + IRR_correct) %>%
# CR  == Cleanrance Rate: IFR/PIM of the water
dplyr::mutate(CR_correct = case_when(
treatment == 7.5 ~ IFR /  waterinput_loop$PIM_mgL_1[1],
treatment == 8.0 ~ IFR /  waterinput_loop$PIM_mgL_1[2]
)) %>%
# FR  == Filtration Rate: CR * TPM of the water
dplyr::mutate(FR_correct = case_when(
treatment == 7.5 ~ CR_correct * waterinput_loop$TPM_mgL_1[1],
treatment == 8.0 ~ CR_correct *  waterinput_loop$TPM_mgL_1[2]
)) %>%
# %RR == RR/FR (amount rejected/total amount filtered)
dplyr::mutate(RR_Percent = (RR_correct/FR_correct)*100) %>%
# TIR == Total Ingestion Rate: FR - RR
dplyr::mutate(TIR = FR_correct -
RR_correct) %>%
# OFR == Organic FIltration Rate: CR * POM of the water
dplyr::mutate(OFR = case_when(
treatment == 7.5 ~ CR_correct * waterinput_loop$POM_mgL_1[1],
treatment == 8.0 ~ CR_correct *  waterinput_loop$POM_mgL_1[2]
)) %>%
# ORI == Organic INgestion Rate: OFR-ORR
dplyr::mutate(OIR = OFR - ORR_correct) %>%
# i   == Fraction of Organic Matter ingested: OIR/TIR (i.e. fraction of ingested material that was organic)
dplyr::mutate(i = OIR / TIR) %>%
# AR  == Assimilation Rate: OIR-OER (rate of POM filtration - rate of POM rejection - rate of POM egestion)
dplyr::mutate(AR = OIR - OER_correct) %>%
# AE  == Assimilation Efficiency: AR/OIR
dplyr::mutate(AE = AR / OIR) %>%
# add column for uatm pCO2 treatment based on pH groups
dplyr::mutate(pCO2 = case_when(treatment == 8.0 ~ "500 μatm", treatment == 7.5 ~ "800 μatm"))
df                <- data.frame(data_loop) # name dataframe for this single row
Biodep_Master     <- rbind(Biodep_Master,df) #bind to a cumulative list dataframe
print(Biodep_Master) # print to monitor progress
}
# WRITE CSV OF THE MASTER FILE
write.csv(Biodep_Master, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Biodeposition/Biodeposition_master.csv")
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# ANALYSIS AND PLOTTING  :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Biodep_Master <- read.csv("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Biodeposition/Biodeposition_master.csv", header = T)
Biodep_Master <- na.omit(Biodep_Master) # omit #6 pH7.5 on 20221027
# View(Biodep_Master)
# (1) First, run anova within date for all records (for looped!)
ANOVA_Dates       <- as.data.frame(unique(Biodep_Master$Date)) # call a list to loop in
AOVdf_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 12)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Metric', 'model', 'DF.num' , 'DF.denom', 'F_val','P_val', 'SigDif', 'ShapiroWilk', 'ResidNorm', 'Levenes', 'HomogVar') # names for comuns in the for loop
cols_m_loop       <- as.data.frame(c('SE','OIR','FR_correct', 'CR_correct', 'RR_Percent','OIR','AR','AE')) %>% `colnames<-`('biodep_meas')
for (i in 1:nrow(ANOVA_Dates)) {
date_loop     <- as.character(ANOVA_Dates[i,])
data_loop     <- Biodep_Master %>%
dplyr::filter(Date %in% date_loop) %>%
dplyr::select(Date, treatment, cols_m_loop$biodep_meas)
for (m in 3:ncol(data_loop)) { # run anova and normality tests for each of these wihtin data i
# high cholorphyll model
AOVmod              <- aov(lm(data_loop[,m] ~ as.factor(data_loop$treatment)))
DF_loop$Date        <- date_loop
DF_loop$Metric      <- colnames(data_loop[m])
DF_loop$model       <- 'one-way AOV; x ~ treatment'
DF_loop$DF.num      <- summary(AOVmod)[[1]][["Df"]][1]
DF_loop$DF.denom    <- summary(AOVmod)[[1]][["Df"]][2]
DF_loop$F_val       <- summary(AOVmod)[[1]][["F value"]][1]
DF_loop$P_val       <- summary(AOVmod)[[1]][["Pr(>F)"]][1]
DF_loop$SigDif      <- if( (summary(AOVmod)[[1]][["Pr(>F)"]][1]) > 0.05) {
'NO'} else {'YES'}
DF_loop$ShapiroWilk <- shapiro.test(resid(AOVmod))[[2]]
DF_loop$ResidNorm   <- if( shapiro.test(resid(AOVmod))[[2]] > 0.05) {
'YES'} else {'NO'}
DF_loop$Levenes     <- leveneTest(AOVmod)[[3]][[1]]
DF_loop$HomogVar    <- if( leveneTest(AOVmod)[[3]][[1]] > 0.05) {
'YES'} else {'NO'}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
AOVdf_total <- rbind(AOVdf_total,DF_loop) #bind to a cumulative list dataframe
print(AOVdf_total) # print to monitor progress
}
}
View(AOVdf_total) # view all the anova tests within data
AE_boxplot <- Biodep_Master %>%
dplyr::mutate(Temperature = case_when(Date == '20220302' ~ '16C',
Date == '20220923' ~ '20C',
Date == '20221027' ~ '13.3C')) %>%
#filter(!AE < 0) %>%
ggplot(aes(pCO2 , AE , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("forestgreen","orange")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
theme(axis.text=element_text(size=6),
axis.title=element_text(size=6)) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
ggtitle("Assimilation Efficiency, F1 Scallops") +
theme(axis.text.x=element_blank()) +
facet_wrap(~Temperature)
AR_boxplot <- Biodep_Master %>%
dplyr::mutate(Temperature = case_when(Date == '20220302' ~ '16C',
Date == '20220923' ~ '20C',
Date == '20221027' ~ '13.3C')) %>%
# filter(!AE < 0) %>%
ggplot(aes(pCO2 , AR , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("forestgreen","orange")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
theme(axis.text=element_text(size=6),
axis.title=element_text(size=6)) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
ggtitle("Assimilation Rate, F1 Scallops") +
theme(axis.text.x=element_blank()) +
facet_wrap(~Temperature)
OIR_boxplot <- Biodep_Master %>%
dplyr::mutate(Temperature = case_when(Date == '20220302' ~ '16C',
Date == '20220923' ~ '20C',
Date == '20221027' ~ '13.3C')) %>%
#filter(!AE < 0) %>%
ggplot(aes(pCO2 , OIR , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("forestgreen","orange")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
theme(axis.text=element_text(size=6),
axis.title=element_text(size=6)) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
ggtitle("Organic Ingestion Rate, F1 Scallops") +
theme(axis.text.x=element_blank()) +
facet_wrap(~Temperature)
FR_boxplot <- Biodep_Master %>%
dplyr::mutate(Temperature = case_when(Date == '20220302' ~ '16C',
Date == '20220923' ~ '20C',
Date == '20221027' ~ '13.3C')) %>%
#filter(!AE < 0) %>%
ggplot(aes(pCO2 , FR , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("forestgreen","orange")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
theme(axis.text=element_text(size=6),
axis.title=element_text(size=6)) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
ggtitle("Filtration Rate, F1 Scallops") +
theme(axis.text.x=element_blank()) +
facet_wrap(~Temperature)
RR_boxplot <- Biodep_Master %>%
dplyr::mutate(Temperature = case_when(Date == '20220302' ~ '16C',
Date == '20220923' ~ '20C',
Date == '20221027' ~ '13.3C')) %>%
#filter(!AE < 0) %>%
ggplot(aes(pCO2 , RR_Percent , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("forestgreen","orange")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
theme(axis.text=element_text(size=6),
axis.title=element_text(size=6)) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
ggtitle("Percent Rejection Rate, F1 Scallops") +
theme(axis.text.x=element_blank()) +
facet_wrap(~Temperature)
SE_boxplot <- Biodep_Master %>%
dplyr::mutate(Temperature = case_when(Date == '20220302' ~ '16C',
Date == '20220923' ~ '20C',
Date == '20221027' ~ '13.3C')) %>%
#filter(!AE < 0) %>%
ggplot(aes(pCO2 , SE , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("forestgreen","orange")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
theme(axis.text=element_text(size=6),
axis.title=element_text(size=6)) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
ggtitle("Selection Efficiency, F1 Scallops") +
theme(axis.text.x=element_blank()) +
facet_wrap(~Temperature)
# output the plot
library(ggpubr)
ggarrange(SE_boxplot,RR_boxplot, OIR_boxplot, FR_boxplot, AE_boxplot, AR_boxplot)
