Excretion_rate <- Excretion_master %>%
dplyr::filter(!ExcretionRate_umol_mL_hr_TDWbfactor > 30) %>% # two outliers?
ggplot(aes(x = factor(Date),
y = ExcretionRate_umol_mL_hr_TDWbfactor,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange")) +
theme_classic() +
theme(legend.position="none",
axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) # no facet
ggarrange(Excretion_rate_facetted, Excretion_rate, ncol = 1, nrow = 2)
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/ExcretionRates/Master_ER_Boxplots.pdf"), width = 7, height= 6)
ggarrange(Excretion_rate_facetted, Excretion_rate, ncol = 1, nrow = 2)
dev.off()
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/ExcretionRates/RR_Boxplots_TDWbfactor.pdf"), width = 7, height= 6)
ggarrange(Excretion_rate_facetted, Excretion_rate, ncol = 1, nrow = 2)
dev.off()
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/ExcretionRates/ER_Boxplots_TDWbfactor.pdf"), width = 7, height= 6)
ggarrange(Excretion_rate_facetted, Excretion_rate, ncol = 1, nrow = 2)
dev.off()
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Resp_Master          <- read.csv(file="/Output/Respiration/RR_start_end_raw", header=T)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Resp_Master          <- read.csv(file="/Output/Respiration/RR_start_end_raw", header=T)
Excretion_Master     <- read.csv(file="/Output/ExcretionRates/ExcretionRates_master.csv", header=T)
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Resp_Master          <- read.csv(file="Output/Respiration/RR_start_end_raw", header=T)
Excretion_Master     <- read.csv(file="Output/ExcretionRates/ExcretionRates_master.csv", header=T)
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Resp_Master          <- read.csv(file="Output/RespirationRates/RR_start_end_raw", header=T)
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Resp_Master          <- read.csv(file="Output/Respiration/RR_start_end_raw.csv", header=T)
Resp_Master
nrow(Resp_Master)
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_start.end  <- read.csv(file="Output/Respiration/RR_start_end_raw.csv", header=T)
ER            <- read.csv(file="Output/ExcretionRates/ExcretionRates_master.csv", header=T)
# edit RR start end data
# note: start end Oxygen consumption needs to be filtered for dates/measurments used for excretion
unique(ER$)
# edit RR start end data
# note: start end Oxygen consumption needs to be filtered for dates/measurments used for excretion
unique(ER$Date)
ER
# edit RR start end data
# note: start end Oxygen consumption needs to be filtered for dates/measurments used for excretion
unique(ER$Date) # 0211026 20220202 20220301 20220922 20221026 - also ONLY Liligo measurements (large indivs) have excretion data (and biodep!)
RR_start.end
RR_start.end
RR_start.end_2 <- RR_start.end %>%
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data')
RR_start.end_2
RR_start.end
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data')
RR_start.end_2
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::select(-LoLigo_data) # do not need it anymore!
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::select(-'LoLigo_data') # do not need it anymore!
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::select(-(filetype)) # do not need it anymore!
RR_start.end_2
nrow(RR_start.end_2)
nrow(Excretion_Master)
#merge
RespExcretion_Master <- merge(Resp_Master,Excretion_Master) # only 18 values as of 2/2/2022 that have both resp and excretion
#merge :::::::::::::::::::::::::::::::::
O_N_Master <- merge(Resp_Master,Excretion_Master) # only 18 values as of 2/2/2022 that have both resp and excretion
O_N_Master
Resp_Master
#merge :::::::::::::::::::::::::::::::::
O_N_Master <- merge(RR_start.end_2,Excretion_Master) # only 18 values as of 2/2/2022 that have both resp and excretion
O_N_Master
Excretion_Master
RR_start.end_2
Excretion_Master
RR_start.end_2
RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub("\\._*","",Chamber_tank))
RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub("\\_.*","",Chamber_tank))
RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub("*._\\","",Chamber_tank))
gsub("_.*","",RR_start.end$Chamber_tank))
gsub("_.*","",RR_start.end$Chamber_tank)
gsub(".*_","",RR_start.end$Chamber_tank)
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank))
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank)) +
dplyr::select(-(filetype)) # do not need it anymore!
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank)) %>%
dplyr::select(-(filetype)) # do not need it anymore!
nrow(RR_start.end_2) # 82
nrow(Excretion_Master) # 86
#merge :::::::::::::::::::::::::::::::::
O_N_Master <- merge(RR_start.end_2,Excretion_Master) # only 18 values as of 2/2/2022 that have both resp and excretion
O_N_Master
View(Excretion_Master)
View(RR_start.end_2)
O_N_Master
# LOAD PACKAGES ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
library(dplyr)
library(stringr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# CHANGE THE FOLLOWING ..THEN CONTROL A + ENTER ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
path.p    <- "Data/Physiology/Respiration" #the location of all your respirometry files
# call the subfolder names for the outside loop 'i' (i.e. 20210914)
folder.names           <- basename(list.files(path = path.p, pattern = "202", recursive = FALSE)) #list all csv file names in the folder and subfolders
folder.names.table     <- data.frame(folder.names) %>% filter(!folder.names %in% c('20220420', '20220422','20220824','20220829')) #from test data or failed spawns
# Call the cumulative dataframe that we will write to in the for loop below
df_total               <- data.frame() # start dataframe
resp.table             <- data.frame(matrix(nrow = 1, ncol = 8)) # create dataframe to save cumunalitively during for loop
colnames(resp.table)   <- c('Date', 'Channel', 'start_min', 'end_min' , 'O2_start_mgL', 'O2_end_mgL','Rate_mgO2_hour', 'Filename') # names for comuns in the for loop
# outside 'i' loop - call each subfolder one at a time for analysis
for(i in 1:nrow(folder.names.table)) { # for every subfolder 'i' ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# NOTE: when calling the raw files we need to accommodate the different formats
# 20210914 used the 8-channel loligo system with raw output as .txt files with 'raw' in the title - call these using dplyr in the if/else below
# 20210930 used the 24-channel SDR sensor dish with raw output as .csv files - call these in the if/else statement below
# call all txt files labeled 'raw' in each subfolder (i.e. 20210914) and create a table
if (folder.names.table[i,] %in% c('20210930', '20220830')) { #'20220824',  call 24-channel SDR dish data - '
file.names.table     <- data.frame(txt.files = (basename(list.files(path = paste(path.p,'/',folder.names.table[i,1],sep=''), pattern = "csv$", recursive = TRUE))))
} else if (folder.names.table[i,] %in% c('20211026', '20220922')) { # for days when both the loligo system (txt files) or SDR dish (csv files) were used
file.names.table1    <- data.frame(txt.files = (basename(list.files(path = paste(path.p,'/',folder.names.table[i,1],sep=''), pattern = "txt$", recursive = TRUE)))) %>%  dplyr::filter(grepl('raw', txt.files))#list all csv file names in the folder and subfolders
file.names.table2    <- data.frame(txt.files = (basename(list.files(path = paste(path.p,'/',folder.names.table[i,1],sep=''), pattern = "csv$", recursive = TRUE)))) #%>%  dplyr::filter(grepl('raw', txt.files))#list all csv file names in the folder and subfolders
file.names.table     <- rbind(file.names.table1, file.names.table2)
}  else { # all other data that used just the  8-channel loligo system outputting .txt raw files (now 9/14/21 and 2/2/22)
file.names.table    <- data.frame(txt.files = (basename(list.files(path = paste(path.p,'/',folder.names.table[i,1],sep=''), pattern = "txt$", recursive = TRUE)))) %>%  dplyr::filter(grepl('raw', txt.files))#list all csv file names in the folder and subfolders
}
# inside 'm' loop - call each  raw .txt or raw .csv file file witin the subfolder 'i'
for(m in 1:nrow(file.names.table)) { # for every raw .txt or csv file 'm' in the subfolder 'i' :::::::::::::::::::::::::::::::::::::
if (gsub(".*_raw.","", file.names.table[m,]) == "txt") {
Resp.Data           <- read.delim2(file = paste(path.p,'/',folder.names.table[i,1], '/', file.names.table[m,1], sep=''), header = TRUE,skip = 37, fileEncoding= "windows-1252") #reads in the data files
# for data in 2021 and data in 2022
if (str_split((Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.[1]), "/", simplify = TRUE)[[3]] == "2021") {
Resp.Data$date      <- paste((sub("2021.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
} else {
Resp.Data$date      <- paste((sub("2022.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2022', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2022/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
}
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])    # secs - calc the sec time series
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60 # mins - calc the minute time series
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1])
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1])
Resp.Data           <- Resp.Data %>% # use 'dplyr'
#dplyr::filter(!Phase %in% 'Flush') %>% # remove the initial rows labeled flush
dplyr::select(c(date, seconds, minutes, contains(".O2...air.sat"))) # %>%  # call unique column names for the 8 Channels
# dplyr::filter(minutes < 40)
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,3) # clean these column names to make things easier - first 3 characters
} else {
Resp.Data           <- read.csv(file = paste(path.p,'/',folder.names.table[i,1], '/', file.names.table[m,1], sep=''), header = TRUE,skip = 51, fileEncoding= "windows-1252") #reads in the data files
# for data in 2021 and data in 2022
if (str_split((Resp.Data$Date..DD.MM.YYYY.[1]), "/", simplify = TRUE)[[3]] == "2021") {
Resp.Data$date      <- paste((sub("2021.*", "", Resp.Data$Date..DD.MM.YYYY.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", Resp.Data$Time..HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
} else {
Resp.Data$date      <- paste((sub("2022.*", "", Resp.Data$Date..DD.MM.YYYY.)), '2022', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2022/", "", Resp.Data$Time..HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
}
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])    # secs - calc the sec time series
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60 # mins - calc the minute time series
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1])
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1])
Resp.Data           <- Resp.Data %>% # use 'dplyr'
dplyr::select(c(date, seconds, minutes, contains("..Oxygen."))) # call unique column names for the 8 Channels
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,2)
} # clean these column names to make things easier - first 3 characters
# inside 'j' loop - for each 'raw' txt file 'm', call each O2 sensor/resp chamber 'j' for analysis
for(j in 4:(ncol(Resp.Data))){ # for each sensor column 'j' (..starting at column 4) :::::::::::::::::::::::::::::::
Resp_loop  <- na.omit(Resp.Data[,c(3,j)]) %>% dplyr::filter(!.[[2]] %in% 'NaN')# noticed some random rows have 'NaN' - so I will loop the min and Channels to ommit Nas before proceeding
# Loligo system needs to cnvert %air sat to mg / L whereas SDR dish does not
if ( (substr(colnames(Resp.Data)[j],1,2) == 'CH') ) { # loligo measurements need to be converted to mg/L from %air sat - these columns are written as "CH#"
Resp_loop <- Resp_loop[!is.na(as.numeric(as.character(Resp_loop[[2]]))),]
Resp_loop$mgL <- DO.unit.convert(as.numeric(Resp_loop[,2]),  # % air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)
} else {Resp_loop$mgL <- na.omit(Resp.Data[j])
Resp_loop$mgL       <- as.numeric(unlist(Resp_loop$mgL)) # need to unlist and call as numeric
Resp_loop$minutes   <- as.numeric(unlist(Resp_loop$minutes)) # need to unlist and call as numeric
Resp_loop           <- Resp_loop[!is.na(as.numeric(as.character(Resp_loop$mgL))),] # omit 'Nan' in mgL column
} # for the SDR dish values that are already in mg/L simply call the column in the loop
# now run data!
if (nrow(Resp_loop) < 1) { # if column 'j' is NA write NA in the cumulative sheet...
resp.table$Date                <- Resp.Data[1,1]
resp.table$Channel             <- colnames(Resp_loop)[2]
resp.table[3:ncol(resp.table)] <- 'NA'
df       <- data.frame(resp.table) # name dataframe for this single row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
print(df_total) # print to monitor progress
} else { # else run LoLinR for x=mins and y=mg/l O2
minim_mgL <- min(Resp_loop$mgL)
mean_mgL  <- mean(Resp_loop$mgL)
sd_mgL    <- sd(Resp_loop$mgL)
resp.table$Date                 <- Resp.Data[1,1]
resp.table$Channel              <- colnames(Resp_loop)[2]
resp.table$start_min            <- Resp_loop$minutes[1]
if (minim_mgL < (mean_mgL - (3*sd_mgL))) { # if the minmgL is calling a low outlier..
resp.table$end_min              <- Resp_loop$minutes[nrow(Resp_loop)]    # TRUE, call the last time point
} else {
resp.table$end_min            <- min((Resp_loop %>% dplyr::filter(mgL  == minim_mgL))$minutes) } # FALSE call the minute pertaining to the min mgL
resp.table$O2_start_mgL         <- max(Resp_loop$mgL[1:20])
if (minim_mgL < (mean_mgL - (3*sd_mgL))) { # if the minmgL is calling a low outlier..
resp.table$end_min            <- Resp_loop$minutes[nrow(Resp_loop)]  # TRUE, call the last time point
} else {
resp.table$end_min            <- minim_mgL } # false, call the min mgL
resp.table$O2_end_mgL           <- minim_mgL # Resp_loop$mgL[nrow(Resp_loop)]
resp.table$Rate_mgO2_hour       <- (max(Resp_loop$mgL[1:20]) - minim_mgL)/ (min((Resp_loop %>% dplyr::filter(mgL  == minim_mgL))$minutes) / 60)#( (Resp_loop$mgL[1]) - (Resp_loop$mgL[nrow(Resp_loop)]) ) / (abs(Resp_loop$minutes[nrow(Resp_loop)])/60)
resp.table$Filename             <- file.names.table[m,1]
df       <- data.frame(resp.table) # name dataframe for this single row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
print(df_total) # print to monitor progress
}
} # end of inside for loop 'j' (for each sensor column 'j' [a] isolate mins and CH_ for analysis [b] convert CH_ data to mg/L using 'DO.unit.convert' [c] calc respi rates with LoLin R)
} # end of inside  for loop 'm' (for every 'raw' .txt file 'm' in the subfolder 'i')
} # end of outside for loop 'i' (for every subfolder 'i')
# upload ref metadata for RR (treamtent, plate, run, replication, number, etc.)
RefID <- read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Data/Physiology/Respiration/Reference_resp_ID.csv", header = TRUE, sep = ',') %>%
dplyr::filter(!Date %in% c('4/20/2022', '4/22/2022','8/24/2022','8/29/2022'))
nrow(RefID) # 408
# upload ref sizes
Refsize <- read.csv(file="C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Data/Physiology/Respiration/Reference_resp_size.csv", header = TRUE, sep = ',') %>%
dplyr::filter(!Date %in% c('4/20/2022', '4/22/2022','8/24/2022','8/29/2022')) %>%
dplyr::select(c('Date','Run','Plate','pH', 'Replicate', 'Chamber_tank', 'Number', 'Length_um', 'Dry_Tissue_weight', 'whole_Dry_weight','Instrument'))
nrow(Refsize) # 265 (Does not indlue blanks, size data )
# merge df_total with the ref IDs
merged_df_ref <- as.data.frame(merge(df_total,RefID))
nrow(merged_df_ref) # 408
# merge the dataframe above (previous merge) with the sizes (note! no blanks here)
merged_withSize <- merge(merged_df_ref,Refsize) %>%
dplyr::filter(!Fed_Unfed %in% 'U') %>%
dplyr::mutate(filetype = str_sub(Filename, -3,-1)) %>%
dplyr::mutate(filetype = factor(ifelse(filetype == "csv", "SDR_data", "LoLigo_data"))) %>%
dplyr::select(c('Date','pH','Chamber_tank','Run','Number','Length_um', 'Length_um', 'Dry_Tissue_weight','whole_Dry_weight', 'Rate_mgO2_hour', 'filetype')) %>%
dplyr::rename(Start.End_RR_mgO2hr = Rate_mgO2_hour)  %>%
dplyr::rename(Dry_Tissue_weight_mg = Dry_Tissue_weight) %>%
dplyr::rename(Whole_Dry_weight_mg  = whole_Dry_weight)
merged_withSize
# write csv for the start end RAW (as merged_withSize)
write.csv(merged_withSize, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/RR_start_end_raw.csv")
# LOAD PACKAGES ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
library(dplyr)
library(stringr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# LOAD DATA ::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_start.end  <- read.csv(file="Output/Respiration/RR_start_end_raw.csv", header=T)
# note: this data file has Start.End_RR_mgO2hr - already accounting for the blank start end O2 consumption!
ER            <- read.csv(file="Output/ExcretionRates/ExcretionRates_master.csv", header=T)
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank)) %>%
dplyr::select(-(filetype)) # do not need it anymore!
nrow(RR_start.end_2) # 82
nrow(Excretion_Master) # 86
#merge :::::::::::::::::::::::::::::::::
O_N_Master <- merge(RR_start.end_2,Excretion_Master) # only 18 values as of 2/2/2022 that have both resp and excretion
# CALCULATE O:N :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Master_table <- as.data.frame(O_N_Master %>%
dplyr::select(c('Date',  'pH', 'Replicate', 'volume', 'Dry_Tissue_weight', 'resp_mg_L_hr', 'resp_umol_L_hr', 'start.end_resp_mg_L_hr', 'Nitrogen_ug_mL_hr')) %>%
dplyr::rename(c('RESP_mg.O2_L_hr' = 'resp_mg_L_hr',
'RESP.startend_resp_mg.O2_L_hr' = 'start.end_resp_mg_L_hr',
'NITROGEN_ug.N2_mL_hr' = 'Nitrogen_ug_mL_hr')) %>%
dplyr::mutate('NITROGEN_ug.N2_L_hr'          =  (NITROGEN_ug.N2_mL_hr*(volume/1000))) %>%
dplyr::mutate('RESP_mg.O2_L_g.tissue_hr'              =  (RESP_mg.O2_L_hr) / (Dry_Tissue_weight))                      %>%
dplyr::mutate('RESP.startend_mg.O2_L_g.tissue_hr'     =  (RESP.startend_resp_mg.O2_L_hr) / (Dry_Tissue_weight))        %>%
dplyr::mutate('ON_RESP.LoLinR'                 =  ( (RESP_mg.O2_L_g.tissue_hr/16) / (NITROGEN_ug.N2_L_g.tissue_hr/14)) )    %>%
dplyr::mutate('ON_RESP.start.end'              =  ( (RESP.startend_mg.O2_L_g.tissue_hr/16) / (NITROGEN_ug.N2_L_g.tissue_hr/14)))  )
#merge :::::::::::::::::::::::::::::::::
O_N_Master <- merge(RR_start.end_2,Excretion_Master) # only 18 values as of 2/2/2022 that have both resp and excretion
O_N_Master
#merge :::::::::::::::::::::::::::::::::
O_N_Master <- merge(RR_start.end_2,Excretion_Master by = (c('Date','pH','Run','Number', 'Replicate'))) # only 18 values as of 2/2/2022 that have both resp and excretion
#merge :::::::::::::::::::::::::::::::::
O_N_Master <- merge(RR_start.end_2,Excretion_Master, by = (c('Date','pH','Run','Number', 'Replicate'))) # only 18 values as of 2/2/2022 that have both resp and excretion
O_N_Master
View(O_N_Master)
RR_start.end
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank)) %>%
dplyr::select(-(C(filetype, Length_um, Dry_Tissue_weight_mg, Whole_Dry_weight_mg))) # do not need it anymore!
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank)) %>%
dplyr::select(-(c(filetype, Length_um, Dry_Tissue_weight_mg, Whole_Dry_weight_mg))) # do not need it anymore!
#merge :::::::::::::::::::::::::::::::::
O_N_Master <- merge(RR_start.end_2,Excretion_Master) # only 18 values as of 2/2/2022 that have both resp and excretion
O_N_Master
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank)) %>%
dplyr::select(-(c(filetype, Length_um, Dry_Tissue_weight_mg, Whole_Dry_weight_mg))) # do not need it anymore!
RR_start.end_2
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank)) %>%
dplyr::select(-(c(X,filetype, Length_um, Dry_Tissue_weight_mg, Whole_Dry_weight_mg))) # do not need it anymore!
RR_start.end_2
Excretion_Master
# note: this data file has Start.End_RR_mgO2hr - already accounting for the blank start end O2 consumption!
ER            <- read.csv(file="Output/ExcretionRates/ExcretionRates_master.csv", header=T) %>% dplyr::select(-X)
# LOAD DATA ::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_start.end  <- read.csv(file="Output/Respiration/RR_start_end_raw.csv", header=T)  %>% dplyr::select(-X)
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank)) %>%
dplyr::select(-(c(X,filetype, Length_um, Dry_Tissue_weight_mg, Whole_Dry_weight_mg))) # do not need it anymore!
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank)) %>%
dplyr::select(-(c(filetype, Length_um, Dry_Tissue_weight_mg, Whole_Dry_weight_mg))) # do not need it anymore!
#merge :::::::::::::::::::::::::::::::::
O_N_Master <- merge(RR_start.end_2,Excretion_Master)# by = (c('Date','pH','Run','Number', 'Replicate'))) # only 18 values as of 2/2/2022 that have both resp and excretion
O_N_Master
RR_start.end_2
Excretion_Master
# note: this data file has Start.End_RR_mgO2hr - already accounting for the blank start end O2 consumption!
ER            <- read.csv(file="Output/ExcretionRates/ExcretionRates_master.csv", header=T) %>% dplyr::select(-X)
ER
#merge :::::::::::::::::::::::::::::::::
O_N_Master <- merge(RR_start.end_2,ER)
O_N_Master
nrow(O_N_Master)
nrow(ER) # 86
#merge :::::::::::::::::::::::::::::::::
nrow(RR_start.end_2) # 70
O_N_Master <- merge(RR_start.end_2,ER)
nrow(O_N_Master) # 75
O_N_Master$Dry_Tissue_weight
meanTDW <- mean(as.numeric(Size_data_2$Dry_Tissue_weight)) # 0.4729451
meanTDW <- mean(as.numeric(RR_start.end$Dry_Tissue_weight)) # 0.4729451
as.numeric(RR_start.end$Dry_Tissue_weight)
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank)) %>%
dplyr::select(-(c(filetype, Length_um, Whole_Dry_weight_mg))) # do not need it anymore!
as.numeric(RR_start.end_2$Dry_Tissue_weight)
meanTDW <- mean(as.numeric(RR_start.end_2$Dry_Tissue_weight)) # 0.4729451
meanTDW
RR_start.end_2 <- RR_start.end %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>% # change format of the date to the format in Excretion_data
dplyr::filter(Date %in% c('20211026', '20220202', '20220301', '20220922', '20221026')) %>%
dplyr::filter(filetype %in% 'LoLigo_data') %>%
dplyr::mutate(Replicate = gsub(".*_","",Chamber_tank)) %>%
dplyr::select(-(c(filetype, Length_um, Dry_Tissue_weight_mg, Whole_Dry_weight_mg))) # do not need it anymore!
#merge O:N master file :::::::::::::::::::::::::::::::::
nrow(RR_start.end_2) # 70
nrow(ER) # 86
O_N_Master$Dry_Tissue_weight
O_N_Master <- merge(RR_start.end_2,ER)  %>%
nrow(O_N_Master) # 75
O_N_Master <- merge(RR_start.end_2,ER)
meanTDW <- mean(O_N_Master$Dry_Tissue_weight)
meanTDW
nrow(O_N_Master) # 75
O_N_Master
O_N_Master$Start.End_RR_mgO2hr
Start.End_RR_mgO2hr$Biovolume_g_in_sw
O_N_Master$Biovolume_g_in_sw
(O_N_Master$Biovolume_g_in_sw/1000)
O_N_Master$Start.End_RR_mgO2hr / (O_N_Master$Biovolume_g_in_sw/1000)
(O_N_Master$Biovolume_g_in_sw/1000)
(O_N_Master$Start.End_RR_mgO2hr / (O_N_Master$Biovolume_g_in_sw/1000))/1000
(O_N_Master$Start.End_RR_mgO2hr / (O_N_Master$Biovolume_g_in_sw)
O_N_Master_bfactTDW <- O_N_Master %>%
(O_N_Master$Start.End_RR_mgO2hr / (O_N_Master$Biovolume_g_in_sw))
(O_N_Master$Biovolume_g_in_sw)
(O_N_Master$Start.End_RR_mgO2hr / (O_N_Master$Biovolume_g_in_sw/1000))
(O_N_Master$Start.End_RR_mgO2hr / (O_N_Master$Biovolume_g_in_sw/1000))*1000
((O_N_Master$Start.End_RR_mgO2hr / (O_N_Master$Biovolume_g_in_sw/1000))*1000)/32
O_N_Master$Biovolume_g_in_sw
((   (O_N_Master$Start.End_RR_mgO2hr /
(O_N_Master$Biovolume_g_in_sw/1000))*
1000)/
32)
(O_N_Master$Start.End_RR_mgO2hr /
(O_N_Master$Biovolume_g_in_sw/1000))
O_N_Master$Biovolume_g_in_sw/1000
(O_N_Master$Start.End_RR_mgO2hr *
(O_N_Master$Biovolume_g_in_sw/1000))
O_N_Master$Start.End_RR_mgO2hr
(O_N_Master$Start.End_RR_mgO2hr *
(O_N_Master$Biovolume_g_in_sw/1000))
(O_N_Master$Biovolume_g_in_sw/1000)
O_N_Master$Biovolume_g_in_sw
O_N_Master %>%
dplyr::mutate(ExcretionRate_umol_mL_hr_TDWbfactor =  ExcretionRate_umol_mL_hr*( (meanTDW/(as.numeric(Dry_Tissue_weight)))^0.822) ) %>%
dplyr::mutate(Start.End_RR_umol_mL_hr = (Start.End_RR_mgO2hr*1000)/32)
O_N_Master %>%
dplyr::mutate(ExcretionRate_umol_mL_hr_TDWbfactor =  ExcretionRate_umol_mL_hr*( (meanTDW/(as.numeric(Dry_Tissue_weight)))^0.822) ) %>%
dplyr::mutate(Start.End_RR_umol_L_hr = ((Start.End_RR_mgO2hr*1000)/32)/1000)
O_N_Master_bfactTDW <- O_N_Master %>%
dplyr::mutate(ExcretionRate_umol_L_hr_TDWbfactor =  ExcretionRate_umol_mL_hr*( (meanTDW/(as.numeric(Dry_Tissue_weight)))^0.822) ) %>%
dplyr::mutate(Start.End_RR_umol_L_hr = ((Start.End_RR_mgO2hr*1000)/32)/1000)
O_N_Master_bfactTDW <- O_N_Master %>%
dplyr::mutate(ExcretionRate_umol_L_hr_TDWbfactor =  ExcretionRate_umol_mL_hr*( (meanTDW/(as.numeric(Dry_Tissue_weight)))^0.822) ) %>%
dplyr::mutate(Start.End_RR_umol_L_hr = ((Start.End_RR_mgO2hr*1000)/32)/1000) %>%
dplyr::mutate(RR_umol_L_hr_TDWbfactor =  Start.End_RR_mgO2hr*( (meanTDW/(as.numeric(Dry_Tissue_weight)))^0.822) ) %>%
dplyr::mutate(O_N =RR_umol_L_hr_TDWbfactor/ ExcretionRate_umol_L_hr_TDWbfactor)
O_N_facetted <- O_N_Master_bfactTDW %>%
#dplyr::filter(!ExcretionRate_umol_mL_hr_TDWbfactor > 30) %>% # two outliers?
ggplot(aes(x = factor(Date),
y = O_N,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange")) +
theme_classic() +
ggtitle("O:N, F1 Scallops") +
theme(legend.position="none",
axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single"))  +
facet_wrap(~Date, scales = "free")
O_N_facetted
