ExcretionRate_umol_mL_hr*( (meanTDW/(as.numeric(Dry_Tissue_weight)))^0.78) ) %>% # correct ExcretionRate_umol_mL_hr for gram of Tissue Dry Weight
dplyr::mutate(pCO2 = case_when(pH == 8.0 ~ "500 μatm",
pH == 7.5 ~ "800 μatm",
pH == 7 ~ "1200 μatm"))
ER
ER            <- ER %>% filter(!is.na(ER$ExcretionRate_umol_mL_hr))
ER$log10_VER  <- log10(as.numeric(ER$ExcretionRate_umol_mL_hr)) # assign resp value
ER$log10_TDW  <- log10(as.numeric(ER$Dry_Tissue_weight)) # assign length value
ER
ER_b.factor_PLOT <- ER %>%
ggplot(aes(x=log10_TDW, y=log10_VER)) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_BodyMass; TDW in g") +
scale_y_continuous(name ="log10_ER; ER in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none",axis.title.y=element_text(size=7)) +
ggtitle("Excretion rate scaling: log10_MO2 = log10_a + (b.factor * log10_BodyMass)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "left")
ER_b.factor_PLOT
meanTDW <- mean(as.numeric(Size_data_2$Dry_Tissue_weight)) # 0.4729451
Size_data_2$Dry_Tissue_weight
Size_data_2
meanTDW <- mean(as.numeric(Size_data_2$Dry_Tissue_weight)) # 0.4729451
meanTDW
# get mean and median length for
RR_master_F2  <- RR_master_F2 %>% dplyr::mutate(Length_mm = as.numeric(Length_um/1000))
meanLength   <- mean(RR_master_F2$Length_mm)    # 16.89333
medianLength <- median(RR_master_F2$Length_mm)  # 12.61
meanLength
medianLength <- median(RR_master_F2$Length_mm)  # 12.61
medianLength
RR_master_F2
RR_formatted_F2s <- RR_master_F2 %>%
dplyr::mutate(Length_mm = Length_um/1000) %>%
dplyr::mutate(resp_umol_L_hr_bFactorNormLength.MEAN = (resp_umol_L_hr)*((meanLength/Length_mm)^bLength) ) %>% # RStd = (Lexp/Lstd)1.77 * RRexp
dplyr::mutate(resp_umol_L_hr_bFactorNormLength.MEDIAN = (resp_umol_L_hr)*((medianLength/Length_mm)^bLength) ) %>%  # RStd = (Lexp/Lstd)1.77 * RRexp
dplyr::mutate(Date = as.factor(Date))
# get mean and median length for
meanLength   <- mean(RR_master_F2$Length_mm)    # 14.07185
medianLength <- median(RR_master_F2$Length_mm)  # 14.4
RR_formatted_F2s <- RR_master_F2 %>%
dplyr::mutate(Length_mm = Length_um/1000) %>%
dplyr::mutate(resp_umol_L_hr_bFactorNormLength.MEAN = (resp_umol_L_hr)*((meanLength/Length_mm)^bLength) ) %>% # RStd = (Lexp/Lstd)1.77 * RRexp
dplyr::mutate(resp_umol_L_hr_bFactorNormLength.MEDIAN = (resp_umol_L_hr)*((medianLength/Length_mm)^bLength) ) %>%  # RStd = (Lexp/Lstd)1.77 * RRexp
dplyr::mutate(Date = as.factor(Date))
RR_master_F2
RR_formatted_F2s <- RR_master_F2 %>%
dplyr::mutate(Length_mm = Length_um/1000) %>%
dplyr::mutate(resp_umol_L_hr_bFactorNormLength.MEAN = (resp_umol_hr_biovolcalc)*((meanLength/Length_mm)^bLength) ) %>% # RStd = (Lexp/Lstd)1.77 * RRexp
dplyr::mutate(resp_umol_L_hr_bFactorNormLength.MEDIAN = (resp_umol_hr_biovolcalc)*((medianLength/Length_mm)^bLength) ) %>%  # RStd = (Lexp/Lstd)1.77 * RRexp
dplyr::mutate(Date = as.factor(Date))
# (1) First, run anova within date for all records (for looped!)
ANOVA_Dates       <- as.data.frame(unique(RR_formatted_F2s$Date)) # call a list to loop in
AOVdf_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model', 'DF.num' , 'DF.denom', 'F_val','P_val', 'SigDif', 'ShapiroWilk', 'ResidNorm', 'Levenes', 'HomogVar') # names for comuns in the for loop
for (i in 1:nrow(ANOVA_Dates)) {
date_loop     <- as.character(ANOVA_Dates[i,])
data_loop     <- RR_formatted_F2s %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, resp_umol_L_hr_bFactorNormLength.MEAN) %>%
na.omit()
AOVmod              <- aov(lm(data_loop$resp_umol_L_hr_bFactorNormLength.MEAN ~ data_loop$pCO2))
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'Respiration rate; TDW b factor normalized'
DF_loop$model       <- 'one-way AOV; x ~ treatment'
DF_loop$DF.num      <- summary(AOVmod)[[1]][["Df"]][1]
DF_loop$DF.denom    <- summary(AOVmod)[[1]][["Df"]][2]
DF_loop$F_val       <- summary(AOVmod)[[1]][["F value"]][1]
DF_loop$P_val       <- summary(AOVmod)[[1]][["Pr(>F)"]][1]
DF_loop$SigDif      <- if( (summary(AOVmod)[[1]][["Pr(>F)"]][1]) > 0.05) {
'NO'} else {'YES'}
DF_loop$ShapiroWilk <- shapiro.test(resid(AOVmod))[[2]]
DF_loop$ResidNorm   <- if( shapiro.test(resid(AOVmod))[[2]] > 0.05) {
'YES'} else {'NO'}
DF_loop$Levenes     <- leveneTest(AOVmod)[[3]][[1]]
DF_loop$HomogVar    <- if( leveneTest(AOVmod)[[3]][[1]] > 0.05) {
'YES'} else {'NO'}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
AOVdf_total <- rbind(AOVdf_total,DF_loop) #bind to a cumulative list dataframe
print(AOVdf_total) # print to monitor progress
}
AOVdf_total <- AOVdf_total %>% dplyr::arrange(Age)
AOVdf_total
AOVdf_total <- AOVdf_total %>% dplyr::arrange(Age)
# WRITE CSV OF THE MASTER FILE
write.csv(AOVdf_total, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/F2_Respiration_ANOVA_table_Length_mean.csv")
print(ggarrange(MO2_b.factorLENGTH_PLOT, MO2_b.factorLENGTH_PLOT_facetted, nrow = 2, ncol = 1)) # print the model diagnostics
total_mod  <- aov(lm(resp_umol_L_hr_bFactorNormLength.MEAN  ~ pCO2 * Date, data = RR_formatted_F2s))
leveneTest(total_mod) # 0.006044 **
shapiro.test(resid(total_mod)) # 0.1374
hist(resid(total_mod)) # positive skew
F2s.BOXPLOT_Length_bfactor.MEAN <- RR_formatted_F2smaster %>%
ggplot(aes(x = factor(Date),
y = resp_umol_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Resp * [ ( meanLength / Length_meas)^2.13 ]") +
theme(legend.position="none",
axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Date, scales = "free") #, scales = "free)
F2s.BOXPLOT_Length_bfactor.MEAN.nofacet <- RR_formatted_F2smaster %>%
ggplot(aes(x = factor(Date),
y = resp_umol_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Resp * [ (meanLength/Length_meas)^2.13 ]") +
theme(legend.position="none",
axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) # no facet
F2s.BOXPLOT_Length_bfactor.MEAN.nofacet
F2s.BOXPLOT_Length_bfactor.MEAN.nofacet <- RR_formatted_F2smaster %>%
ggplot(aes(x = factor(Date),
y = resp_umol_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Resp * [ (meanLength/Length_meas)^2.13 ]") +
# theme(legend.position="none",
#       axis.title.y=element_text(size=7),
#       axis.title.x=element_text(size=7),
#       axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) # no facet
F2s.BOXPLOT_Length_bfactor.MEAN.nofacet
F2s.BOXPLOT_Length_bfactor.MEAN <- RR_formatted_F2s %>%
ggplot(aes(x = factor(Date),
y = resp_umol_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Resp * [ ( meanLength / Length_meas)^2.13 ]") +
theme(legend.position="none",
axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Date, scales = "free") #, scales = "free)
F2s.BOXPLOT_Length_bfactor.MEAN.nofacet <- RR_formatted_F2s %>%
ggplot(aes(x = factor(Date),
y = resp_umol_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Resp * [ (meanLength/Length_meas)^2.13 ]") +
# theme(legend.position="none",
#       axis.title.y=element_text(size=7),
#       axis.title.x=element_text(size=7),
#       axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) # no facet
F2s.BOXPLOT_Length_bfactor.MEAN.nofacet
RR_formatted_F2smaster
# (1) First, run anova within date for all records (for looped!)
ANOVA_Dates       <- as.data.frame(unique(RR_formatted_F2s$Date)) # call a list to loop in
AOVdf_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model', 'DF.num' , 'DF.denom', 'F_val','P_val', 'SigDif', 'ShapiroWilk', 'ResidNorm', 'Levenes', 'HomogVar') # names for comuns in the for loop
for (i in 1:nrow(ANOVA_Dates)) {
date_loop     <- as.character(ANOVA_Dates[i,])
data_loop     <- RR_formatted_F2smaster %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, resp_umol_L_hr_bFactorNormLength.MEAN) %>%
na.omit()
AOVmod              <- aov(lm(data_loop$resp_umol_L_hr_bFactorNormLength.MEAN ~ data_loop$pCO2))
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'Respiration rate; TDW b factor normalized'
DF_loop$model       <- 'one-way AOV; x ~ treatment'
DF_loop$DF.num      <- summary(AOVmod)[[1]][["Df"]][1]
DF_loop$DF.denom    <- summary(AOVmod)[[1]][["Df"]][2]
DF_loop$F_val       <- summary(AOVmod)[[1]][["F value"]][1]
DF_loop$P_val       <- summary(AOVmod)[[1]][["Pr(>F)"]][1]
DF_loop$SigDif      <- if( (summary(AOVmod)[[1]][["Pr(>F)"]][1]) > 0.05) {
'NO'} else {'YES'}
DF_loop$ShapiroWilk <- shapiro.test(resid(AOVmod))[[2]]
DF_loop$ResidNorm   <- if( shapiro.test(resid(AOVmod))[[2]] > 0.05) {
'YES'} else {'NO'}
DF_loop$Levenes     <- leveneTest(AOVmod)[[3]][[1]]
DF_loop$HomogVar    <- if( leveneTest(AOVmod)[[3]][[1]] > 0.05) {
'YES'} else {'NO'}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
AOVdf_total <- rbind(AOVdf_total,DF_loop) #bind to a cumulative list dataframe
print(AOVdf_total) # print to monitor progress
}
RR_formatted_F2smaster
for (i in 1:nrow(ANOVA_Dates)) {
date_loop     <- as.character(ANOVA_Dates[i,])
data_loop     <- RR_formatted_F2smaster %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, resp_mg_hr_bFactorNormLength.MEAN) %>%
na.omit()
AOVmod              <- aov(lm(data_loop$resp_mg_hr_bFactorNormLength.MEAN ~ data_loop$pCO2))
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'Respiration rate; TDW b factor normalized'
DF_loop$model       <- 'one-way AOV; x ~ treatment'
DF_loop$DF.num      <- summary(AOVmod)[[1]][["Df"]][1]
DF_loop$DF.denom    <- summary(AOVmod)[[1]][["Df"]][2]
DF_loop$F_val       <- summary(AOVmod)[[1]][["F value"]][1]
DF_loop$P_val       <- summary(AOVmod)[[1]][["Pr(>F)"]][1]
DF_loop$SigDif      <- if( (summary(AOVmod)[[1]][["Pr(>F)"]][1]) > 0.05) {
'NO'} else {'YES'}
DF_loop$ShapiroWilk <- shapiro.test(resid(AOVmod))[[2]]
DF_loop$ResidNorm   <- if( shapiro.test(resid(AOVmod))[[2]] > 0.05) {
'YES'} else {'NO'}
DF_loop$Levenes     <- leveneTest(AOVmod)[[3]][[1]]
DF_loop$HomogVar    <- if( leveneTest(AOVmod)[[3]][[1]] > 0.05) {
'YES'} else {'NO'}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
AOVdf_total <- rbind(AOVdf_total,DF_loop) #bind to a cumulative list dataframe
print(AOVdf_total) # print to monitor progress
}
AOVdf_total <- AOVdf_total %>% dplyr::arrange(Age)
AOVdf_total
# WRITE CSV OF THE MASTER FILE
write.csv(AOVdf_total, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/F2_Respiration_ANOVA_table_Length_mean.csv")
F2s.BOXPLOT_Length_bfactor.MEAN <- RR_formatted_F2smaster %>%
ggplot(aes(x = factor(Date),
y = resp_umol_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Resp * [ ( meanLength / Length_meas)^1.17 ]") +
theme(legend.position="none",
axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Date, scales = "free") #, scales = "free)
F2s.BOXPLOT_Length_bfactor.MEAN
RR_formatted_F2smaster$pCO2 <- factor(RR_formatted_F2smaster$pCO2,
levels = c("500 uatm", "800 uatm", "1200 uatm"))
F2s.BOXPLOT_Length_bfactor.MEAN <- RR_formatted_F2smaster %>%
ggplot(aes(x = factor(Date),
y = resp_umol_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Resp * [ ( meanLength / Length_meas)^1.17 ]") +
theme(legend.position="none",
axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Date, scales = "free") #, scales = "free)
F2s.BOXPLOT_Length_bfactor.MEAN
F2s.BOXPLOT_Length_bfactor.MEAN.nofacet <- RR_formatted_F2smaster %>%
ggplot(aes(x = factor(Date),
y = resp_umol_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Resp * [ (meanLength/Length_meas)^2.13 ]") +
# theme(legend.position="none",
#       axis.title.y=element_text(size=7),
#       axis.title.x=element_text(size=7),
#       axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) # no facet
F2s.BOXPLOT_Length_bfactor.MEAN.nofacet
F2s.BOXPLOT_Length_bfactor.MEAN <- RR_formatted_F2smaster %>%
ggplot(aes(x = factor(Date),
y = resp_umol_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Resp * [ ( meanLength / Length_meas)^1.17 ]") +
theme(legend.position="none",
axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Date, scales = "free") #, scales = "free)
F2s.BOXPLOT_Length_bfactor.MEAN
F2s.BOXPLOT_Length_bfactor.MEAN <- RR_formatted_F2smaster %>%
ggplot(aes(x = factor(Date),
y = resp_umol_hr_bFactorNormLength.MEAN,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("forestgreen","orange", "purple")) +
theme_classic() +
ggtitle("Resp * [ ( meanLength / Length_meas)^1.17 ]") +
theme(axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
#ylim(0, 0.2) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Date, scales = "free") #, scales = "free)
F2s.BOXPLOT_Length_bfactor.MEAN
1 + 1
1 + 1
install_miniconda(path = miniconda_path(), update = TRUE, force = FALSE)
1 + 1
reticulate::repl_python()
Y
quit
#| echo: false
2 * 2
reticulate::repl_python()
1+1
quit
reticulate::repl_python()
1 + 1
quit
reticulate::repl_python()
1 + 1
quit
#| echo: false
2 * 2
reticulate::repl_python()
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"
import numpy as np
import matplotlib.pyplot as plt
r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
subplot_kw = {'projection': 'polar'}
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"
import numpy as np
import matplotlib.pyplot as plt
r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
subplot_kw = {'projection': 'polar'}
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
quit
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess"
)
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false
library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) +
geom_point() +
geom_smooth(method = "loess"
)
reticulate::repl_python()
1 + 1
h = 125
h
quit
reticulate::repl_python()
1 + 1
h
quit
python
