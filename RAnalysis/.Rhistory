print(F2_ON_Plot)
dev.off()
print(F1_ON_Plot)
F1_ON_MasterMEANSMEANS
F1_Boxplot
F1_ON_MasterMEANS <- F1_ON_Master %>% # mean by tank replicate
dplyr::select(c(Date, Age, pCO2,  Replicate, O_N)) %>% # one extreme outlier value!
Rmisc::summarySE(measurevar="O_N",
groupvars=c("Date", "Age", "pCO2",  "Replicate"))
F1_ON_MasterMEANS
F1_ON_MasterMEANS <- F1_ON_Master %>% # mean by tank replicate
dplyr::filter(!_N > 400) %>%
F1_ON_MasterMEANS
F1_ON_MasterMEANS <- F1_ON_Master %>% # mean by tank replicate
dplyr::filter(!O_N > 400) %>%
dplyr::select(c(Date, Age, pCO2,  Replicate, O_N)) %>% # one extreme outlier value!
Rmisc::summarySE(measurevar="O_N",
groupvars=c("Date", "Age", "pCO2",  "Replicate"))
F1_ON_MasterMEANS
write.csv(F1_ON_MasterMEANS,
"C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/OxygenNitrogen_ratio/F1/F1_ON_master_means.csv")
F1_Boxplot <- F1_ON_MasterMEANS %>%
#dplyr::filter(!(Date %in% '20220301')) %>% # two outliers?
ggplot(aes(x=as.factor(Age),
y=O_N,
color=as.factor(pCO2))) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_color_manual(values=c("forestgreen","orange")) +
theme_classic() +
ggtitle("O:N, F1 Scallops (rep av'd)") +
theme(legend.position="none",
axis.title.y=element_text(size=7),
axis.title.x=element_text(size=7),
axis.text.x=element_text(size=7)) +
scale_y_continuous(name ="O:N (raw umol)",expand = c(0, 0), limits = c(0, NA)) +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single"))
F1_Boxplot
F1_ON_MasterMEANSMEANS <- F1_ON_MasterMEANS %>% # mean by tank replicate
dplyr::select(c(Age, pCO2, O_N)) %>% # one extreme outlier value!
Rmisc::summarySE(measurevar="O_N",
groupvars=c("Age", "pCO2"))
F1_ON_Plot <- F1_ON_MasterMEANSMEANS %>%
ggplot(aes(x=as.factor(Age),
y=O_N,
color=as.factor(pCO2))) +
geom_point(position=position_dodge(.5))+
scale_color_manual(values=c("forestgreen",
"darkorange2"))+
geom_errorbar(aes(ymin=O_N-se,
ymax=O_N+se), width=.2,
position=position_dodge(.5))+
theme_classic() +
xlab("Age (dpf)") +
ggtitle("O:N, F1 Scallops (mean +- SE; rep av'd)") +
theme_classic() +
theme(legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
geom_line(stat = "identity", size=1.0)+
scale_y_continuous(name ="O:N (umol)",expand = c(0, 0), limits = c(0, NA)) +
theme(text = element_text(size=10))
ggarrange(F1_Boxplot, F1_ON_Plot, ncol = 1)
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/OxygenNitrogen_ratio/F1/F1_ON_Mean_SE.pdf"), width = 4, height = 4)
print(F1_ON_Plot)
dev.off()
F1_ON_MasterMEANS
# (2) t.test
Ttest_Dates       <- as.data.frame(unique(F1_ON_MasterMEANS$Date)) # call a list to loop in
Ttest_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model',
'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom', 'Tstat','P_val', 'SigDif') # names for comuns in the for loop
for (i in 1:nrow(Ttest_Dates)) {
date_loop     <- as.character(Ttest_Dates[i,])
data_loop     <- F1_ON_MasterMEANS %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, O_N) %>%
na.omit()
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'RR; LENGTH b factor normalized'
# run assumptions
# normality of data
normality <- shapiro.test(data_loop$O_N)[[2]]
# equal variance
variance <- var.test(data_loop$O_N~
as.numeric(as.factor(data_loop$pCO2)))[[3]]
# run all modles
Ttestmod.eqvar      <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(data_loop$O_N ~
as.numeric(as.factor(data_loop$pCO2)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- normality
DF_loop$ResidNorm   <- if( normality > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
Wilcoxmod
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
Ttest_total <- rbind(Ttest_total,DF_loop) #bind to a cumulative list dataframe
print(Ttest_total) # print to monitor progress
}
# (2) t.test
Ttest_Dates       <- as.data.frame(unique(F1_ON_MasterMEANS$Date)) # call a list to loop in
Ttest_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model',
'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom', 'Tstat','P_val', 'SigDif') # names for comuns in the for loop
for (i in 1:nrow(Ttest_Dates)) {
date_loop     <- as.character(Ttest_Dates[i,])
data_loop     <- F1_ON_MasterMEANS %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, O_N) %>%
na.omit()
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'RR; LENGTH b factor normalized'
# run assumptions
# normality of data
normality <- shapiro.test(data_loop$O_N)[[2]]
# equal variance
variance <- var.test(data_loop$O_N~
as.numeric(as.factor(data_loop$pCO2)))[[3]]
# run all modles
Ttestmod.eqvar      <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(data_loop$O_N ~
as.numeric(as.factor(data_loop$pCO2)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- normality
DF_loop$ResidNorm   <- if( normality > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
Wilcoxmod
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
Ttest_total <- rbind(Ttest_total,DF_loop) #bind to a cumulative list dataframe
print(Ttest_total) # print to monitor progress
}
# (2) t.test
Ttest_Dates       <- as.data.frame(unique(F1_ON_MasterMEANS$Date)) # call a list to loop in
Ttest_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model',
'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom', 'Tstat','P_val', 'SigDif') # names for comuns in the for loop
for (i in 1:nrow(Ttest_Dates)) {
date_loop     <- as.character(Ttest_Dates[i,])
data_loop     <- F1_ON_MasterMEANS %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, O_N) %>%
na.omit()
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'RR; LENGTH b factor normalized'
# run assumptions
# normality of data
normality <- shapiro.test(data_loop$O_N)[[2]]
# equal variance
variance <- var.test(data_loop$O_N~
as.numeric(as.factor(data_loop$pCO2)))[[3]]
# run all modles
Ttestmod.eqvar      <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(data_loop$O_N ~
as.numeric(as.factor(data_loop$pCO2)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- normality
DF_loop$ResidNorm   <- if( normality > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
Wilcoxmod
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
Ttest_total <- rbind(Ttest_total,DF_loop) #bind to a cumulative list dataframe
# print(Ttest_total) # print to monitor progress
}
Ttest_total
write.csv(Ttest_total, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/OxygenNitrogen_ratio/F1/F1_OtoN_Ttest.csv")
# means by tank replicate - necessary for the ACTUAL data for plotting and statistics!
F1_ER_MEANS <- F1_ER_master %>%
# dplyr::filter(!ExcretionRate_umol_hr_Lengthbfactor >40) %>% # one extreme outlier value!
summarySE(measurevar="ExcretionRate_umol_hr_bFactorNormLength.MEAN",
groupvars=c("Date", "Age", "pCO2", "Replicate"))
# (run t tests in lop
Ttest_Dates       <- as.data.frame(unique(F1_ER_MEANS$Date)) # call a list to loop in
Ttest_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model',
'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom', 'Tstat','P_val', 'SigDif') # names for comuns in the for loop
library(purrr)
library(rstatix)
for (i in 1:nrow(Ttest_Dates)) {
date_loop     <- as.character(Ttest_Dates[i,])
data_loop     <- F1_ER_MEANS %>%
dplyr::filter(!pCO2 %in% '1200 μatm') %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, ExcretionRate_umol_hr_bFactorNormLength.MEAN) %>%
na.omit()
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'ER; LENGTH b factor normalized'
# run assumptions
# normality of data
normality <- shapiro.test(data_loop$ExcretionRate_umol_hr_bFactorNormLength.MEAN)[[2]]
# equal variance
variance <- var.test(data_loop$ExcretionRate_umol_hr_bFactorNormLength.MEAN~
as.numeric(as.factor(data_loop$pCO2)))[[3]]
# run all modles
Ttestmod.eqvar      <- t.test( data_loop$ExcretionRate_umol_hr_bFactorNormLength.MEAN ~
(as.factor(data_loop$pCO2)),
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test( data_loop$ExcretionRate_umol_hr_bFactorNormLength.MEAN ~
(as.factor(data_loop$pCO2)),
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(data_loop$ExcretionRate_umol_hr_bFactorNormLength.MEAN ~
as.numeric(as.factor(data_loop$pCO2)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- normality
DF_loop$ResidNorm   <- if( normality > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
Ttest_total <- rbind(Ttest_total,DF_loop) #bind to a cumulative list dataframe
# print(Ttest_total) # print to monitor progress
}
Ttest_total
write.csv(AOVdf_total, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/ExcretionRates/F1/F1_ER_LengthbFactor_Ttest.csv")
write.csv(Ttest_total, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/ExcretionRates/F1/F1_ER_LengthbFactor_Ttest.csv")
# (2) t.test
Ttest_Dates       <- as.data.frame(unique(F2_ER_MEANS$Date)) # call a list to loop in
Ttest_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model',
'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom', 'Tstat','P_val', 'SigDif') # names for comuns in the for loop
library(purrr)
library(rstatix)
for (i in 1:nrow(Ttest_Dates)) {
date_loop     <- as.character(Ttest_Dates[i,])
data_loop     <- F2_ER_MEANS %>%
dplyr::filter(!pCO2 %in% '1200 μatm') %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, ExcretionRate_umol_hr_bFactorNormLength.MEAN) %>%
na.omit()
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'ER; LENGTH b factor normalized'
# run assumptions
# normality of data
normality <- shapiro.test(data_loop$ExcretionRate_umol_hr_bFactorNormLength.MEAN)[[2]]
# equal variance
variance <- var.test(data_loop$ExcretionRate_umol_hr_bFactorNormLength.MEAN~
as.numeric(as.factor(data_loop$pCO2)))[[3]]
# run all modles
Ttestmod.eqvar      <- t.test( data_loop$ExcretionRate_umol_hr_bFactorNormLength.MEAN ~
(as.factor(data_loop$pCO2)),
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test( data_loop$ExcretionRate_umol_hr_bFactorNormLength.MEAN ~
(as.factor(data_loop$pCO2)),
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(data_loop$ExcretionRate_umol_hr_bFactorNormLength.MEAN ~
as.numeric(as.factor(data_loop$pCO2)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- normality
DF_loop$ResidNorm   <- if( normality > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
Ttest_total <- rbind(Ttest_total,DF_loop) #bind to a cumulative list dataframe
# print(Ttest_total) # print to monitor progress
}
Ttest_total
write.csv(Ttest_total, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/ExcretionRates/F2/F2_ER_LengthbFactor_Ttest.csv")
Ttest_Dates       <- as.data.frame(unique(F2_ON_MasterMEANS$Date)) # call a list to loop in
Ttest_Dates
Ttest_total       <- data.frame() # start dataframe, this will be the master output
DF_loop           <- data.frame(matrix(nrow = 1, ncol = 13)) # create dataframe to save during for loop
colnames(DF_loop) <- c('Date', 'Age', 'Metric', 'model',
'ShapiroWilk', 'ResidNorm', 'Variance',
'HomogVar', 'DF.num' , 'DF.denom', 'Tstat','P_val', 'SigDif') # names for comuns in the for loop
for (i in 1:nrow(Ttest_Dates)) {
date_loop     <- as.character(Ttest_Dates[i,])
data_loop     <- F2_ON_MasterMEANS %>%
dplyr::filter(Date == date_loop) %>%
dplyr::select(Date, Age, pCO2, O_N) %>%
na.omit()
DF_loop$Date        <- date_loop
DF_loop$Age         <- data_loop$Age[1]
DF_loop$Metric      <- 'RR; LENGTH b factor normalized'
# run assumptions
# normality of data
normality <- shapiro.test(data_loop$O_N)[[2]]
# equal variance
variance <- var.test(data_loop$O_N~
as.numeric(as.factor(data_loop$pCO2)))[[3]]
# run all modles
Ttestmod.eqvar      <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = TRUE)
Ttestmod.noneqvar   <- t.test( data_loop$O_N ~
(as.factor(data_loop$pCO2)),
var.equal = FALSE)
Wilcoxmod           <- wilcox.test(data_loop$O_N ~
as.numeric(as.factor(data_loop$pCO2)))
# normality tests for the anova model - asign
DF_loop$ShapiroWilk <- normality
DF_loop$ResidNorm   <- if( normality > 0.05) {
'YES'} else {'NO'}
DF_loop$Variance     <- variance
DF_loop$HomogVar    <- if( variance > 0.05) {
'YES'} else {'NO'}
if(normality > 0.05 & variance > 0.05) {
DF_loop$model       <- 'Welchs T test, equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.eqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.eqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.eqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else if (normality > 0.05 & variance < 0.05) {
DF_loop$model       <- 'Welchs T test, non-equal variance'
DF_loop$DF.num      <- map_df(list(Ttestmod.noneqvar), tidy)$parameter[[1]]
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Ttestmod.noneqvar), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Ttestmod.noneqvar), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
} else {
DF_loop$model       <- 'Wilcoxon rank sum exact test'
Wilcoxmod
DF_loop$DF.num      <- 'NA'
DF_loop$DF.denom    <- 'NA'
DF_loop$Tstat       <- map_df(list(Wilcoxmod), tidy)$statistic[[1]]
DF_loop$P_val       <- map_df(list(Wilcoxmod), tidy)$p.value[[1]]
DF_loop$SigDif      <- if( (map_df(list(Wilcoxmod), tidy)$p.value[[1]]) > 0.05) {
'NO'} else {'YES'}
}
# asign loop and cumulative output table
df          <- data.frame(DF_loop) # name dataframe for this single row
Ttest_total <- rbind(Ttest_total,DF_loop) #bind to a cumulative list dataframe
# print(Ttest_total) # print to monitor progress
}
Ttest_total
print(F2_ON_Plot)
Ttest_total
write.csv(Ttest_total, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/OxygenNitrogen_ratio/F2/F2_OtoN_Ttest.csv")
