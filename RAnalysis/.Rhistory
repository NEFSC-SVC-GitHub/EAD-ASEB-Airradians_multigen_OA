dplyr::mutate(mg.L.min =   (DO.unit.convert(as.numeric(air.sat),  # use teh presens package DO.unit.convert to convert air saturation to mg/L, inputs several of the constants we called earlier!
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))) %>%
ggplot(aes(x = minutes , y = mg.L.min)) + # plot simple regression
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) + # call a loess curve
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) + # name y axis
xlab("minutes") + # name the x axis
geom_point() +
ggtitle(plot_title) + # insert the title we called earlier based on the loop file name and date directroy
facet_wrap(~channel) # wrap by channel ID column - creates separte plots for each channel
print(PLOT) # view!
# D. output the plot in RAnalysis\Output\Respiration\workflow_example\plots_raw
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/plots_raw/",folder.names.table,"_", sub("_raw.*","",file.name),"_regression.pdf"), width=10, height=12)
print(PLOT)
dev.off()
}
for(m in 1:nrow(file.names.table)) { # the following is ONLY structured for LiLigo data in txt format!
file.name <- file.names.table[m,1] # CHANGE HERE TO file.names.table[1,1] IF YOU WNAT TO RUN LINE BY LINE!!!
# read the file name one by one - runs the WHOLE loop with the first then the second and so on
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252") #reads in the data files one  by one first by 'm' as row 1 in file.names.table[m,1], second by 'm' as second row and so on!
# Data data
# reformat the raw date and call the seconds and minutes timestamp!
# raw format is "2/23/2023/11:52:07 AM" containing a lot of info but we need to parse and concvert for it to be meaningful
Resp.Data$date      <- paste((sub("2023.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2023', sep='') #  date - use 'sub' to call everything before 2023, add back 2023 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2023/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
# assign the remaining parameters
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])    # seconds as a time series where the first tow is now 0 and each substracted from that initial value
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60 # convert to minutes
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1]) # call the temperature data - the dsaem for each channel - this here from CH1
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10 # call the barometric pressure data - this was input manually before we started - we need this data to convert from air saturation to mg/L O2
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1]) # call the salinity - again this was input manually at the start of the experiment
Resp.Data           <- Resp.Data %>% # use 'dplyr'
#dplyr::filter(!Phase %in% 'Flush') %>% # remove the initial rows labeled flush
dplyr::select(c(date, seconds, minutes, contains(".O2...air.sat")))  # all target oxygen conuptiondata is labelled .O2...air.sat - call all these data (8 channels in the loligo system!)
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,3) # clean these column names to make things easier - firs all columns 4 and therafter.. sorted their column name as the first 3 characters (i.e. CH1, CH2, etc.)
# We have data every second - this is comutationally intensize and redundant
# truncate the data to every 15 sceonds
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15), ]
# lets plot!
date.plot  <- folder.names.table # the directroy timestamp as 20230223
run.plot   <- gsub("_raw.*","", file.name) # the looped run!
plot_title <- paste(date.plot, run.plot, sep = '_') # the title merging these two parameters as date_runn.umber
PLOT <- Resp.Data_15sec %>% # plote pipeline
# before we plot we need to convert the data from air saturation to mg/L O2!
dplyr::select(-c('date', 'seconds')) %>%  # select out the data we do not need- the date and seconds columns (we ONLY want columns contianing data and the minutes timestamp)
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "air.sat") %>% # melt the data from wide foramnt (channels as columns each with data) to long (one column with data, addition column to designate channel IDs)
dplyr::filter(!air.sat  %in% 'NaN') %>% # omit NAs in this data
dplyr::mutate(mg.L.min =   (DO.unit.convert(as.numeric(air.sat),  # use teh presens package DO.unit.convert to convert air saturation to mg/L, inputs several of the constants we called earlier!
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))) %>%
ggplot(aes(x = minutes , y = mg.L.min)) + # plot simple regression
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) + # call a loess curve
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) + # name y axis
xlab("minutes") + # name the x axis
geom_point() +
ggtitle(plot_title) + # insert the title we called earlier based on the loop file name and date directroy
facet_wrap(~channel) # wrap by channel ID column - creates separte plots for each channel
print(PLOT) # view!
# D. output the plot in RAnalysis\Output\Respiration\workflow_example\plots_raw
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/plots_raw/",folder.names.table,"_", sub("_raw.*","",file.name),"_regression.pdf"), width=10, height=12)
print(PLOT)
dev.off()
}
PLOT <- Resp.Data_15sec %>% # plote pipeline
# before we plot we need to convert the data from air saturation to mg/L O2!
dplyr::select(-c('date', 'seconds')) %>%  # select out the data we do not need- the date and seconds columns (we ONLY want columns contianing data and the minutes timestamp)
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "air.sat") %>% # melt the data from wide foramnt (channels as columns each with data) to long (one column with data, addition column to designate channel IDs)
dplyr::filter(!air.sat  %in% 'NaN') %>% # omit NAs in this data
dplyr::mutate(mg.L.min =   (DO.unit.convert(as.numeric(air.sat),  # use teh presens package DO.unit.convert to convert air saturation to mg/L, inputs several of the constants we called earlier!
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))) %>%
ggplot(aes(x = minutes , y = mg.L.min)) + # plot simple regression
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) + # call a loess curve
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) + # name y axis
xlab("minutes") + # name the x axis
geom_point() +
ggtitle(plot_title) + # insert the title we called earlier based on the loop file name and date directroy
facet_wrap(~channel) # wrap by channel ID column - creates separte plots for each channel
file.name <- file.names.table[m,1] # CHANGE HERE TO file.names.table[1,1] IF YOU WNAT TO RUN LINE BY LINE!!!
# read the file name one by one - runs the WHOLE loop with the first then the second and so on
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252") #reads in the data files one  by one first by 'm' as row 1 in file.names.table[m,1], second by 'm' as second row and so on!
paste(path.p,'/',folder.names.table, '/', file.name, sep='')
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
library(ggplot2)
library(stringr)
# SET WORKING DIRECTORY AND OUTPUT PATH :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = 'C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis')
path.p    <- "Data/Physiology/Respiration" #the location of all your respirometry files
# read the file name one by one - runs the WHOLE loop with the first then the second and so on
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252") #reads in the data files one  by one first by 'm' as row 1 in file.names.table[m,1], second by 'm' as second row and so on!
for(m in 1:nrow(file.names.table)) { # the following is ONLY structured for LiLigo data in txt format!
file.name <- file.names.table[m,1] # CHANGE HERE TO file.names.table[1,1] IF YOU WNAT TO RUN LINE BY LINE!!!
# read the file name one by one - runs the WHOLE loop with the first then the second and so on
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252") #reads in the data files one  by one first by 'm' as row 1 in file.names.table[m,1], second by 'm' as second row and so on!
# Data data
# reformat the raw date and call the seconds and minutes timestamp!
# raw format is "2/23/2023/11:52:07 AM" containing a lot of info but we need to parse and concvert for it to be meaningful
Resp.Data$date      <- paste((sub("2023.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2023', sep='') #  date - use 'sub' to call everything before 2023, add back 2023 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2023/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
# assign the remaining parameters
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])    # seconds as a time series where the first tow is now 0 and each substracted from that initial value
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60 # convert to minutes
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1]) # call the temperature data - the dsaem for each channel - this here from CH1
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10 # call the barometric pressure data - this was input manually before we started - we need this data to convert from air saturation to mg/L O2
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1]) # call the salinity - again this was input manually at the start of the experiment
Resp.Data           <- Resp.Data %>% # use 'dplyr'
#dplyr::filter(!Phase %in% 'Flush') %>% # remove the initial rows labeled flush
dplyr::select(c(date, seconds, minutes, contains(".O2...air.sat")))  # all target oxygen conuptiondata is labelled .O2...air.sat - call all these data (8 channels in the loligo system!)
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,3) # clean these column names to make things easier - firs all columns 4 and therafter.. sorted their column name as the first 3 characters (i.e. CH1, CH2, etc.)
# We have data every second - this is comutationally intensize and redundant
# truncate the data to every 15 sceonds
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15), ]
# lets plot!
date.plot  <- folder.names.table # the directroy timestamp as 20230223
run.plot   <- gsub("_raw.*","", file.name) # the looped run!
plot_title <- paste(date.plot, run.plot, sep = '_') # the title merging these two parameters as date_runn.umber
PLOT <- Resp.Data_15sec %>% # plote pipeline
# before we plot we need to convert the data from air saturation to mg/L O2!
dplyr::select(-c('date', 'seconds')) %>%  # select out the data we do not need- the date and seconds columns (we ONLY want columns contianing data and the minutes timestamp)
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "air.sat") %>% # melt the data from wide foramnt (channels as columns each with data) to long (one column with data, addition column to designate channel IDs)
dplyr::filter(!air.sat  %in% 'NaN') %>% # omit NAs in this data
dplyr::mutate(mg.L.min =   (DO.unit.convert(as.numeric(air.sat),  # use teh presens package DO.unit.convert to convert air saturation to mg/L, inputs several of the constants we called earlier!
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))) %>%
ggplot(aes(x = minutes , y = mg.L.min)) + # plot simple regression
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) + # call a loess curve
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) + # name y axis
xlab("minutes") + # name the x axis
geom_point() +
ggtitle(plot_title) + # insert the title we called earlier based on the loop file name and date directroy
facet_wrap(~channel) # wrap by channel ID column - creates separte plots for each channel
print(PLOT) # view!
# D. output the plot in RAnalysis\Output\Respiration\workflow_example\plots_raw
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/plots_raw/",folder.names.table,"_", sub("_raw.*","",file.name),"_regression.pdf"), width=10, height=12)
print(PLOT)
dev.off()
}
Resp_loop <- (Resp.Data_15sec[,c(3,1)]) %>%
dplyr::filter(!str_detect(((Resp.Data_15sec[,c(3,j)])[,2]),"NaN")) %>%  # omit the NAs
dplyr::mutate(minutes = as.numeric(minutes)) #  %>% # convert minutes to numeric
Resp_loop
Resp_loop <- (Resp.Data_15sec[,c(3,1)]) %>%
dplyr::filter(!str_detect(((Resp.Data_15sec[,c(3,1)])[,2]),"NaN")) %>%  # omit the NAs
dplyr::mutate(minutes = as.numeric(minutes)) #  %>% # convert minutes to numeric
Resp_loop
Resp_loop <- (Resp.Data_15sec[,c(3,4)]) %>%
dplyr::filter(!str_detect(((Resp.Data_15sec[,c(3,4)])[,2]),"NaN")) %>%  # omit the NAs
dplyr::mutate(minutes = as.numeric(minutes)) #  %>% # convert minutes to numeric
Resp_loop
Resp_loop <- Resp_loop %>%  dplyr::filter(!colnames(Resp_loop)[2] %in% 'NaN') #
Resp_loop
Resp_loop$mgL     <- DO.unit.convert(as.numeric(Resp_loop[,2]),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)
Resp_loop
# Loligo parametrs
a <- 0.04
folder.names.table[m,1]
folder.names.table
file.names.table[m,1]
sub("_raw.*","",file.names.table[m,1]),"_",colnames(Resp_loop)[2],"_regression.pdf")
file.names.table[m,1]
colnames(Resp_loop)[2]
sub("_raw.*","",file.names.table[m,1])
# Call the cumulative dataframe that we will write to in the for loop below
df_total             <- data.frame() # start dataframe
resp.table           <- data.frame(matrix(nrow = 1, ncol = 7)) # create dataframe to add cumulatively during for loop
colnames(resp.table) <- c('Date', 'Channel', 'Lpc', 'Leq' , 'Lz', 'alpha','Filename') # names for columns in the for loop
# Loligo parametrs
a <- 0.4 # alpha 0.4 by the authors default suggestions - review Olito et al. and their github page for details
# Run the loop!
for(m in 1:nrow(file.names.table)) { # the following is ONLY structured for LiLigo data in txt format!
# (1) start will the same steps in the previous loop we ran for plotting  (of coutse this time without the plotting)
# call the file 'm' and read it
file.name <- file.names.table[m,1]
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252")
# format the date and call variables needed to convert units of air saturation to mg O2
Resp.Data$date      <- paste((sub("2023.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2023', sep='')
Resp.Data$time_Sec  <- period_to_seconds(hms(
substr((strptime(sub(".*2023/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19)))
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1])
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1])
# select the columns we need for our table
Resp.Data           <- Resp.Data %>%
dplyr::select(c(date, seconds, minutes, contains(".O2...air.sat")))
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,3)
# Call data every 15 seconds (else computationally intensive with LoLinr in next loop)
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15), ] %>%
dplyr::filter(minutes < 40) # IMPORTANT! we want  < 40 minutes in this record
# NEW!!!! the inside for loop for each column 'j' in filename 'm'
# remember, we called  columns date, seconds, minutes first, thus O2 rate data starts at column 4
for(j in 4:(ncol(Resp.Data_15sec))){ # for each sensor column 'j' (..starting at column 4)
Resp_loop <- (Resp.Data_15sec[,c(3,j)]) %>%
dplyr::filter(!str_detect(((Resp.Data_15sec[,c(3,j)])[,2]),"NaN")) %>%  # omit the NAs
dplyr::mutate(minutes = as.numeric(minutes)) #  %>% # convert minutes to numeric
# convert units using liligo package
Resp_loop$mgL     <- DO.unit.convert(as.numeric(Resp_loop[,2]),  #n R package from loligo rMR t convert
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)
# now run data!
if (nrow(Resp_loop) < 1) { # if column 'j' is NA write NA in the cumulative sheet...
resp.table$Date                <- Resp.Data_15sec[1,1]
resp.table$Channel             <- colnames(Resp_loop)[2]
resp.table[3:ncol(resp.table)] <- 'NA'
df       <- data.frame(resp.table) # name dataframe for this single row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
print(df_total) # print to monitor progress
} else { # else run LoLinR for x=mins and y=mg/l O2
model <- rankLocReg(
xall    = as.numeric(Resp_loop[, 1]),
yall    = as.numeric(Resp_loop[, 3]), # call x as the minute timeseries and y as the mg L-1 O2
alpha   = a,
method  = "pc",
verbose = TRUE)
sum.table <- summary(model)
resp.table$Date       <- Resp.Data_15sec[1,1]
resp.table$Channel    <- colnames(Resp_loop)[2]
resp.table$Lpc        <- sum.table$Lcompare[3,6] # Lpc slope - call the column 'b1'
resp.table$Leq        <- sum.table$Lcompare[2,6] # Leq slope - call the column 'b1'
resp.table$Lz         <- sum.table$Lcompare[1,6] # Lz slope  - call the column 'b1'
resp.table$alpha      <- a
resp.table$Filename   <- file.names.table[m,1]
df       <- data.frame(resp.table) # name dataframe for this single row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
print(df_total) # print to monitor progress
}  # end of  else statement to run LoLinR
# save plots every inside loop and name by date_run_vialposition
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/plots_alpha0.4_increm15sec/20230223_", sub("_raw.*","",file.names.table[m,1]),"_",colnames(Resp_loop)[2],"_regression.pdf")) # call the pdf to output with loop
plot(model) # print the diagnostic plot
dev.off() # save it
} # inside for loop for 'j' O2 columns in each 'm' file
} # outside for loop for 'm' filenames
df_total
write.table(df_total,"C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/resp_raw_LoLin_output", row.names=FALSE)  # write out
write.table(df_total,"C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/resp_raw_LoLin_output.csv", row.names=FALSE)  # write out
write.table(df_total,"C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/RR_LoLin_raw.csv", sep=",",row.names=FALSE)  # write out
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/samjg/Documents/\Github_repositories/Airradians_multigen_OA/")
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/")
library(ggplot2)
library(dplyr)
df<-read.csv("RAnalysis/Data/Physiology/F2_phys.csv", header = T, na = "omit")
df<-read.csv("/RAnalysis/Data/Physiology/F2_phys.csv", header = T, na = "omit")
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/")
df<-read.csv("/RAnalysis/Data/Physiology/F2_phys.csv", header = T, na = "omit")
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/")
df<-read.csv("RAnalysis/Data/Physiology/F2_phys.csv", header = T, na = "omit")
df
# convert date info in format 'mm/dd/yyyy'
strDates <- c("9/21/2022", "10/5/2022", "10/26/2022")
dates <- as.Date(strDates, "%m/%d/%Y")
df$Treatment=as.factor(df$Treatment)
df$Treatment <- factor(df$Treatment,levels = c("low", "moderate", "high"))
ggplot(data=df, aes(x=Treatment, y=CR, fill=Treatment)) +
geom_boxplot()+  scale_fill_manual(values=c("forestgreen","orange", "purple"))+
theme_bw() +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Clearance Rate ", x ="Month", y = "CR") +
facet_wrap(~ Date)
CR <- ggplot(data=df, aes(x=Treatment, y=CR, fill=Treatment)) +
geom_boxplot()+  scale_fill_manual(values=c("forestgreen","orange", "purple"))+
theme_bw() +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Clearance Rate ", x ="Month", y = "CR") +
facet_wrap(~ Date)
AR <- ggplot(data=df, aes(x=Treatment, y=AR, fill=Treatment)) +
geom_boxplot()+  scale_fill_manual(values=c("forestgreen","orange", "purple"))+
theme_bw() +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Absorption Rate ", x ="Month", y = "AR (mg/h)") +
facet_wrap(~ Date)
ggarrange(CR, AR)
library(ggpubr)
ggarrange(CR, AR)
ggarrange(CR, AR, ncol = 1)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(Rmisc)
library(devtools)
library(ggpubr)
library(SciViews)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # omit low food trial data
# filter out the F2 measurements
filter(Date %in% c('8/30/2022', '9/22/2022', '11/16/2022', '1/31/2023', '2/23/2023')) %>% # an F2 measurement
filter(!(Date == '9/22/2022' & filetype =='LoLigo_data')) %>%
# unique(RR_master$Date) # "10/26/2021" "2/2/2022"   "3/1/2022"   "8/30/2022"  "9/14/2021"  "9/22/2022"  "9/30/2021"
dplyr::mutate(Age = case_when(Date == '8/30/2022'   ~ 13,
Date == '9/22/2022'   ~ 36,
Date == '11/16/2022'  ~ 91,
Date == '1/31/2023'   ~ 167,
Date == '2/23/2023'   ~ 190)) %>%
dplyr::mutate(Age = as.factor(Age)) %>%
dplyr::arrange(Age)
unique(RR_master$Date)
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
library(ggplot2)
library(stringr)
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# CHANGE THE FOLLOWING ..THEN CONTROL A + ENTER ::::::::::::::::::::::
path.p    <- "Data/Physiology/Respiration" #the location of all your respirometry files
# call the subfolder names for the outside loop 'i' (i.e. 20210914)
folder.names           <- basename(list.files(path = path.p, pattern = "202", recursive = FALSE)) #list all csv file names in the folder and subfolders
folder.names.table     <- data.frame(folder.names)
folder.names.table
# Call the cumulative dataframe that we will write to in the for loop below
df_total             <- data.frame() # start dataframe
resp.table           <- data.frame(matrix(nrow = 1, ncol = 7)) # create dataframe to save cumunalitively during for loop
colnames(resp.table) <- c('Date', 'Channel', 'Lpc', 'Leq' , 'Lz', 'alpha','Filename') # names for comuns in the for loop
# outside 'i' loop - call each subfolder one at a time for analysis
for(i in 16:nrow(folder.names.table)) { # for every subfolder 'i' ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# NOTE: when calling the raw files we need to accommodate the different formats
# 20210914 used the 8-channel loligo system with raw output as .txt files with 'raw' in the title - call these using dplyr in the if/else below
# 20210930 used the 24-channel SDR sensor dish with raw output as .csv files - call these in the if/else statement below
# call all txt files labeled 'raw' in each subfolder (i.e. 20210914) and create a table
if (folder.names.table[i,] %in% c('20210930','20220420', '20220422','20220824', '20220829', '20220830')) { # call data when ONLY the 24-channel SDR dish data was used (csv file output)
file.names.table    <- data.frame(txt.files = (basename(list.files(path = paste(path.p,'/',folder.names.table[i,1],sep=''), pattern = "csv$", recursive = TRUE))))
} else if (folder.names.table[i,] %in% c('20211026', '20220922')) { # for day(s)s when BOTH the loligo system (txt files) AND SDR dish (csv files) were used
file.names.table1    <- data.frame(txt.files = (basename(list.files(path = paste(path.p,'/',folder.names.table[i,1],sep=''), pattern = "txt$", recursive = TRUE)))) %>%  dplyr::filter(grepl('raw', txt.files))#list all csv file names in the folder and subfolders
file.names.table2    <- data.frame(txt.files = (basename(list.files(path = paste(path.p,'/',folder.names.table[i,1],sep=''), pattern = "csv$", recursive = TRUE)))) #%>%  dplyr::filter(grepl('raw', txt.files))#list all csv file names in the folder and subfolders
file.names.table     <- rbind(file.names.table1, file.names.table2)
}  else { # all other data that used ONLY the  8-channel loligo system outputting .txt raw files (now 9/14/21,  2/2/22, 11/16/2022, 1/31/2023, 2/23/2023)
file.names.table    <- data.frame(txt.files = (basename(list.files(path = paste(path.p,'/',folder.names.table[i,1],sep=''), pattern = "txt$", recursive = TRUE))))  %>%  dplyr::filter(grepl('raw', txt.files))
}
# inside 'm' loop - call each  raw .txt or raw .csv file file witin the subfolder 'i'
for(m in 1:nrow(file.names.table)) { # for every raw .txt or csv file 'm' in the subfolder 'i' :::::::::::::::::::::::::::::::::::::
if (gsub(".*_raw.","", file.names.table[m,]) == "txt") {
Resp.Data           <- read.delim2(file = paste(path.p,'/',folder.names.table[i,1], '/', file.names.table[m,1], sep=''), header = TRUE,skip = 37, fileEncoding= "windows-1252") #reads in the data files
# for data spanning 2021 to 2022
if (str_split((Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.[1]), "/", simplify = TRUE)[[3]] == "2021") { # split by / delimiter and call the thirs string - this is the year - if it is 2021 proceed
Resp.Data$date      <- paste((sub("2021.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
} else if (str_split((Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.[1]), "/", simplify = TRUE)[[3]] == "2022")  { # split by / delimiter and call the thirs string - this is the year - if it is 2022 proceed
Resp.Data$date      <- paste((sub("2022.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2022', sep='') #  date - use 'sub' to call everything before 2022, add back 2022 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2022/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
} else { # for all instances NOT 2021 or 2023 in the string split raw date - thus all 2023 data in this experiment
Resp.Data$date      <- paste((sub("2023.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2023', sep='') #  date - use 'sub' to call everything before 2023, add back 2023 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2023/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
}
# assign the remaining parameters
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])    # secs - calc the sec time series
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60 # mins - calc the minute time series
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1])
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1])
Resp.Data           <- Resp.Data %>% # use 'dplyr'
#dplyr::filter(!Phase %in% 'Flush') %>% # remove the initial rows labeled flush
dplyr::select(c(date, seconds, minutes, contains(".O2...air.sat"))) # %>%  # call unique column names for the 8 Channels
# dplyr::filter(minutes < 40)
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,3) # clean these column names to make things easier - first 3 characters
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15), ]
} else {
Resp.Data           <- read.table(file = paste(path.p,'/',folder.names.table[i,1], '/', file.names.table[m,1], sep=''), sep = ',', header = TRUE,skip = 51) #reads in the data files
# add the for loop here if/when the 24 channel Loligo (csv raw data outputs) is used in 2022!!!
# for data in 2021 and data in 2022
if (str_split((Resp.Data$Date..DD.MM.YYYY.[1]), "/", simplify = TRUE)[[3]] == "2021") {
Resp.Data$date      <- paste((sub("2021.*", "", Resp.Data$Date..DD.MM.YYYY.)), '2021', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2021/", "", Resp.Data$Time..HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
} else if (str_split((Resp.Data$Date..DD.MM.YYYY.[1]), "/", simplify = TRUE)[[3]] == "2022") {
Resp.Data$date      <- paste((sub("2022.*", "", Resp.Data$Date..DD.MM.YYYY.)), '2022', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2022/", "", Resp.Data$Time..HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
} else { # for 2023 data
Resp.Data$date      <- paste((sub("2023.*", "", Resp.Data$Date..DD.MM.YYYY.)), '2023', sep='') #  date - use 'sub' to call everything before 2021, add back 2021 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2023/", "", Resp.Data$Time..HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
}
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])    # secs - calc the sec time series
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60 # mins - calc the minute time series
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1])
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1])
Resp.Data           <- Resp.Data %>% # use 'dplyr'
dplyr::select(c(date, seconds, minutes, contains("..Oxygen."))) # call unique column names for the 8 Channels
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,2)   # clean these column names to make things easier - first 3 characters
Resp.Data_15sec <- Resp.Data # .csvs are from the SDR (Presens) data - these data are already taken every 15 seconds - rename for clarity in the next statements
}
if (gsub(".*_raw.","", file.names.table[m,1]) == "txt") {
date.plot  <- folder.names.table[i,1]
run.plot   <- gsub("_raw.*","", file.names.table[m,1])
plot_title <- paste(date.plot, run.plot, sep = '_')
PLOT <- Resp.Data_15sec %>%
dplyr::select(-c('date', 'seconds')) %>%
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "air.sat") %>%
dplyr::filter(!air.sat  %in% 'NaN') %>%
dplyr::mutate(mg.L.min =   (DO.unit.convert(as.numeric(air.sat),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))) %>%
ggplot(aes(x = minutes , y = mg.L.min)) +
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) +
xlab("minutes") +
geom_point() +
ggtitle(plot_title) +
facet_wrap(~channel)
#pdf(paste0("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/plots_raw/",folder.names.table[i,1],"_", sub("_raw.*","",file.names.table[m,1]),"_regression.pdf"), width=10, height=12)
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/plots_raw/",folder.names.table[i,1],"_", sub("_raw.*","",file.names.table[m,1]),"_regression.pdf"), width=10, height=12)
print(PLOT)
dev.off()
} else if (folder.names.table[i,] == '20210930') {
date.plot  <- folder.names.table[i,1]
run.plot   <- substr( (sub(".*M_","",file.names.table[m,1])), 1,13)
plot_title <- paste(date.plot, run.plot, sep = '_')
PLOT <- Resp.Data_15sec %>%
dplyr::select(-c('date', 'seconds')) %>%
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "mg.L.min") %>%
ggplot(aes(x = minutes , y = mg.L.min)) +
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) +
xlab("minutes") +
geom_point() +
ggtitle(plot_title) +
facet_wrap(~channel)
#pdf(paste0("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/plots_raw/",folder.names.table[i,1],"_", substr( (sub(".*M_","",file.names.table[m,1])), 1,13),"_regression.pdf"), width=10, height=12)
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/plots_raw/",folder.names.table[i,1],"_", substr( (sub(".*M_","",file.names.table[m,1])), 1,13),"_regression.pdf"), width=10, height=12)
print(PLOT)
dev.off()
} else { # just for the SDR run on 20211025 .csv file
date.plot  <- folder.names.table[i,1]
run.plot   <- substr((sub(".*resp_","",file.names.table[m,1])), 1, 6)
plot_title <- paste(date.plot, run.plot, sep = '_')
PLOT <- Resp.Data_15sec %>%
dplyr::select(-c('date', 'seconds')) %>%
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "mg.L.min") %>%
ggplot(aes(x = minutes , y = mg.L.min)) +
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) +
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) +
xlab("minutes") +
geom_point() +
ggtitle(plot_title) +
facet_wrap(~channel)
#pdf(paste0("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/plots_raw/",folder.names.table[i,1],"_", substr((sub(".*resp_","",file.names.table[m,1])), 1, 5),"_regression.pdf"), width=10, height=12) # 20211026_resp_unfed.csv ONLY
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/plots_raw/",folder.names.table[i,1],"_", substr((sub(".*resp_","",file.names.table[m,1])), 1, 6),"_regression.pdf"), width=10, height=12) # 20211026_resp_unfed.csv ONLY
print(PLOT)
dev.off()  }
}
}
print(PLOT)
reticulate::repl_python()
1+1
