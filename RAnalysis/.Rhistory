# We have data every second - this is comutationally intensize and redundant
# truncate the data to every 15 sceonds
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15), ]
# lets plot!
date.plot  <- folder.names.table # the directroy timestamp as 20230223
run.plot   <- gsub("_raw.*","", file.names.table[m,1]) # the looped run!
plot_title <- paste(date.plot, run.plot, sep = '_') # the title merging these two parameters as date_runn.umber
PLOT <- Resp.Data_15sec %>% # plote pipeline
# before we plot we need to convert the data from air saturation to mg/L O2!
dplyr::select(-c('date', 'seconds')) %>%  # select out the data we do not need- the date and seconds columns (we ONLY want columns contianing data and the minutes timestamp)
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "air.sat") %>% # melt the data from wide foramnt (channels as columns each with data) to long (one column with data, addition column to designate channel IDs)
dplyr::filter(!air.sat  %in% 'NaN') %>% # omit NAs in this data
dplyr::mutate(mg.L.min =   (DO.unit.convert(as.numeric(air.sat),  # use teh presens package DO.unit.convert to convert air saturation to mg/L, inputs several of the constants we called earlier!
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))) %>%
ggplot(aes(x = minutes , y = mg.L.min)) + # plot simple regression
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) + # call a loess curve
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) + # name y axis
xlab("minutes") + # name the x axis
geom_point() +
ggtitle(plot_title) + # insert the title we called earlier based on the loop file name and date directroy
facet_wrap(~channel) # wrap by channel ID column - creates separte plots for each channel
#pdf(paste0("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/plots_raw/",folder.names.table[i,1],"_", sub("_raw.*","",file.names.table[m,1]),"_regression.pdf"), width=10, height=12)
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/plots_raw/",folder.names.table,"_", sub("_raw.*","",file.names.table[m,1]),"_regression.pdf"), width=10, height=12)
print(PLOT)
dev.off()
}
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
library(ggplot2)
library(stringr)
# SET WORKING DIRECTORY AND OUTPUT PATH :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
path.p    <- "Data/Physiology/Respiration" #the location of all your respirometry files
file.name <- file.names.table[1,1] # CHANGE HERE TO file.names.table[1,1] IF YOU WNAT TO RUN LINE BY LINE!!!
# read the file name one by one - runs the WHOLE loop with the first then the second and so on
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252") #reads in the data files one  by one first by 'm' as row 1 in file.names.table[m,1], second by 'm' as second row and so on!
Resp.Data$date      <- paste((sub("2023.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2023', sep='') #  date - use 'sub' to call everything before 2023, add back 2023 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2023/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
# assign the remaining parameters
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])    # seconds as a time series where the first tow is now 0 and each substracted from that initial value
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60 # convert to minutes
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1]) # call the temperature data - the dsaem for each channel - this here from CH1
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10 # call the barometric pressure data - this was input manually before we started - we need this data to convert from air saturation to mg/L O2
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1]) # call the salinity - again this was input manually at the start of the experiment
Resp.Data           <- Resp.Data %>% # use 'dplyr'
#dplyr::filter(!Phase %in% 'Flush') %>% # remove the initial rows labeled flush
dplyr::select(c(date, seconds, minutes, contains(".O2...air.sat")))  # all target oxygen conuptiondata is labelled .O2...air.sat - call all these data (8 channels in the loligo system!)
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,3) # clean these column names to make things easier - firs all columns 4 and therafter.. sorted their column name as the first 3 characters (i.e. CH1, CH2, etc.)
# We have data every second - this is comutationally intensize and redundant
# truncate the data to every 15 sceonds
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15), ]
date.plot  <- folder.names.table # the directroy timestamp as 20230223
run.plot   <- gsub("_raw.*","", file.name) # the looped run!
plot_title <- paste(date.plot, run.plot, sep = '_') # the title merging these two parameters as date_runn.umber
PLOT <- Resp.Data_15sec %>% # plote pipeline
# before we plot we need to convert the data from air saturation to mg/L O2!
dplyr::select(-c('date', 'seconds')) %>%  # select out the data we do not need- the date and seconds columns (we ONLY want columns contianing data and the minutes timestamp)
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "air.sat") %>% # melt the data from wide foramnt (channels as columns each with data) to long (one column with data, addition column to designate channel IDs)
dplyr::filter(!air.sat  %in% 'NaN') %>% # omit NAs in this data
dplyr::mutate(mg.L.min =   (DO.unit.convert(as.numeric(air.sat),  # use teh presens package DO.unit.convert to convert air saturation to mg/L, inputs several of the constants we called earlier!
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))) %>%
ggplot(aes(x = minutes , y = mg.L.min)) + # plot simple regression
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) + # call a loess curve
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) + # name y axis
xlab("minutes") + # name the x axis
geom_point() +
ggtitle(plot_title) + # insert the title we called earlier based on the loop file name and date directroy
facet_wrap(~channel) # wrap by channel ID column - creates separte plots for each channel
PLOT
folder.names           <- basename(list.files(path = path.p, pattern = "202", recursive = FALSE)) #list all csv file names in the folder and subfolders - all data in directories by YYYMMDD - data recorded in year 2021-2023
folder.names.table     <- data.frame(folder.names) # you see we have many data directories! each with resp data as .csv or .txt depending on resens or loligo data
folder.names.table    <- folder.names.table[15,] # 20230223 - we will call this directroy for this workflow example
folder.names.table
folder.names
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
library(ggplot2)
library(stringr)
# SET WORKING DIRECTORY AND OUTPUT PATH :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
path.p    <- "Data/Physiology/Respiration" #the location of all your respirometry files
folder.names           <- basename(list.files(path = path.p, pattern = "202", recursive = FALSE)) #list all csv file names in the folder and subfolders - all data in directories by YYYMMDD - data recorded in year 2021-2023
folder.names
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
library(ggplot2)
library(stringr)
# SET WORKING DIRECTORY AND OUTPUT PATH :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
path.p    <- "Data/Physiology/Respiration" #the location of all your respirometry files
folder.names           <- basename(list.files(path = path.p, pattern = "202", recursive = FALSE)) #list all csv file names in the folder and subfolders - all data in directories by YYYMMDD - data recorded in year 2021-2023
folder.names.table     <- data.frame(folder.names) # you see we have many data directories! each with resp data as .csv or .txt depending on resens or loligo data
folder.names
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
folder.names           <- basename(list.files(path = path.p, pattern = "202", recursive = FALSE)) #list all csv file names in the folder and subfolders - all data in directories by YYYMMDD - data recorded in year 2021-2023
folder.names.table     <- data.frame(folder.names) # you see we have many data directories! each with resp data as .csv or .txt depending on resens or loligo data
folder.names
folder.names.table
path.p
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
library(ggplot2)
library(stringr)
# SET WORKING DIRECTORY AND OUTPUT PATH :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = 'C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis')
path.p    <- "Data/Physiology/Respiration" #the location of all your respirometry files
folder.names           <- basename(list.files(path = path.p, pattern = "202", recursive = FALSE)) #list all csv file names in the folder and subfolders - all data in directories by YYYMMDD - data recorded in year 2021-2023
folder.names.table     <- data.frame(folder.names) # you see we have many data directories! each with resp data as .csv or .txt depending on resens or loligo data
folder.names
print(PLOT) # view!
Resp.Data_15sec
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # omit low food trial data
# filter out the F2 measurements
filter(Date %in% c('8/30/2022', '9/22/2022', '11/16/2022', '1/31/2023', '2/23/2023')) %>% # an F2 measurement
filter((Date == '9/22/2022' & filetype =='SDR_data')) %>%
# unique(RR_master$Date) # "10/26/2021" "2/2/2022"   "3/1/2022"   "8/30/2022"  "9/14/2021"  "9/22/2022"  "9/30/2021"
dplyr::mutate(Age = case_when(Date == '8/30/2022'  ~ 13,
Date == '9/22/2022'  ~ 36,
Date == '11/16/2022'  ~ 91,
Date == '1/31/2023' ~ 167,
Date == '2/23/2023'  ~ 190)) %>%
dplyr::mutate(Age = as.factor(Age)) %>%
dplyr::arrange(Age)
unique(RR_master$Date)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lme4)
library(lmerTest)
library(lmerTest)
library(performance)
library(kableExtra)
library(kableExtra)
library(pander)
library(data.table)
library(data.table)
library(Rmisc)
library(devtools)
library(ggpubr)
library(ggpubr)
library(SciViews)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # omit low food trial data
# filter out the F2 measurements
filter(Date %in% c('8/30/2022', '9/22/2022', '11/16/2022', '1/31/2023', '2/23/2023')) %>% # an F2 measurement
filter((Date == '9/22/2022' & filetype =='SDR_data')) %>%
# unique(RR_master$Date) # "10/26/2021" "2/2/2022"   "3/1/2022"   "8/30/2022"  "9/14/2021"  "9/22/2022"  "9/30/2021"
dplyr::mutate(Age = case_when(Date == '8/30/2022'  ~ 13,
Date == '9/22/2022'  ~ 36,
Date == '11/16/2022'  ~ 91,
Date == '1/31/2023' ~ 167,
Date == '2/23/2023'  ~ 190)) %>%
dplyr::mutate(Age = as.factor(Age)) %>%
dplyr::arrange(Age)
RR_master
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(see)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(stringr)
library(latex2exp)
library(Rmisc)
library(devtools)
library(ggpubr)
library(hrbrthemes)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp.data           <- read.csv(file="Output/Respiration/RR_LoLin_raw.csv", header=T) %>%
dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt') %>%  # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
dplyr::filter(!(Date %in% "10/26/2022" & Filename %in% 'run_1_raw.txt' & Channel %in% 'CH2')) # omit bad data point
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp.data           <- read.csv(file="Output/Respiration/RR_LoLin_raw.csv", header=T) %>%
dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt') %>%  # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
dplyr::filter(!(Date %in% "10/26/2022" & Filename %in% 'run_1_raw.txt' & Channel %in% 'CH2')) # omit bad data point
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp.data           <- read.csv(file="Output/Respiration/RR_LoLin_raw.csv", header=T) %>%
dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt') %>%  # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
dplyr::filter(!(Date %in% "10/26/2022" & Filename %in% 'run_1_raw.txt' & Channel %in% 'CH2')) # omit bad data point
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(see)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(stringr)
library(latex2exp)
library(Rmisc)
library(devtools)
library(ggpubr)
library(hrbrthemes)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp.data           <- read.csv(file="Output/Respiration/RR_LoLin_raw.csv", header=T) %>%
dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt') %>%  # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
dplyr::filter(!(Date %in% "10/26/2022" & Filename %in% 'run_1_raw.txt' & Channel %in% 'CH2')) # omit bad data point
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp.data           <- read.csv(file="Output/Respiration/RR_LoLin_raw.csv", header=T) %>%
dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt') %>%  # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
dplyr::filter(!(Date %in% "10/26/2022" & Filename %in% 'run_1_raw.txt' & Channel %in% 'CH2')) # omit bad data point
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(see)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(stringr)
library(latex2exp)
library(Rmisc)
library(devtools)
library(ggpubr)
library(hrbrthemes)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
resp.data           <- read.csv(file="Output/Respiration/RR_LoLin_raw.csv", header=T) %>%
dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt') %>%  # read the calculate raw rates from 'resp_LoLin' script - contains the calculated rate (not normalized for blanks) for each sensor-channel
dplyr::filter(!(Date %in% "10/26/2022" & Filename %in% 'run_1_raw.txt' & Channel %in% 'CH2')) # omit bad data point
start.end_resp.data <- read.csv(file="Output/Respiration/RR_start_end_raw.csv", header=T, sep = "") #%>%
#dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt') # read the start and end simplified resp data
resp.ref            <- read.csv(file="Data/Physiology/Respiration/Reference_resp_ID.csv", header=T) %>%
dplyr::filter(!Date %in% "9/14/2021" | !Filename %in% 'Run_1_raw.txt')
# data to correct for length, dry weight, etc.
lengths_juv_adults  <- read.csv(file="Data/Physiology/Respiration/Reference_resp_size.csv", header=T)
lengths_spat        <- read.csv(file="Data/Physiology/Respiration/Reference_resp_size_LARVAE.csv", header=T) %>%
dplyr::mutate(Length_um = Length * 1000) %>% # current length in mm
dplyr::select(!Length)
# View(resp.data)
resp.data
# lengths_spat contains early development resp runs
# as multiple individuals per well (in some cases!)
# whereas 'lengths' is for juvenile-adult stage scallops each as one length for each resp value
# thus, we need to summarise as a mean for the 'lengths_spat' file before merging with the other file
head(lengths_juv_adults) # here are the juveniles and adults - a single length individual for each resp channel
head(lengths_spat) # take a look at it here, you see muliple entries for a single well for the larvae/spat resp runs
lengths_spat_MEAN <- as.data.frame(lengths_spat %>%
dplyr::group_by(Date,Run,Plate,Channel, Chamber_tank,Number,pH) %>%
dplyr::summarise(Length_um = mean(Length_um))) %>% # group and summarise as a mean
dplyr::select(!Channel)
lenghts_master <- rbind.fill(lengths_juv_adults, lengths_spat_MEAN) # use rbind.fill to merge including NAs for missing columns
# check the data - ensure all data was run
if(nrow(resp.data) == nrow(start.end_resp.data)){ # MUST be TRUE
resp_all_raw <- merge(resp.data, start.end_resp.data)
} else{resp_all_raw <- resp.data}
# merge the exp_metadata with the resp.data
resp.ref_length_merged                 <- merge(resp.ref,
lenghts_master) # all TRUE allows us to keep the blanks
resp.data_merged                       <- merge(resp.data, resp.ref_length_merged) %>%
dplyr::mutate(filetype = str_sub(Filename, -3,-1)) %>%
dplyr::mutate(filetype = factor(ifelse(filetype == "csv",
"SDR_data",
"LoLigo_data"))) %>%
dplyr::mutate(Date_formatted =  gsub("-", "", substr( (strptime(Date, "%m/%d/%Y")), 1,10)) ) %>%
dplyr::arrange(Date_formatted,Run, Channel, .by_group = TRUE)
kable(head(resp.data_merged))
unique(resp.data_merged$Date)
resp.data_merged[47,c(1:6)]  # 	C1 RR_9.30.21_AM_Plate_2_Run_1.csv # -0.02890813	-0.0608251	-0.0608251 - Lz and Leq call better regression than Lp5resp.data_merged[124,c(1:6)]
resp.data_merged[90,c(1:6)]  #  C5 RR_9.30.21_PM_Plate_2_Run_2.csv	0.029052351	-0.076034441	-0.076034441
resp.data_merged[84,c(1:6)]  # 	C1 RR_9.30.21_PM_Plate_1_Run_2.csv	0.011656487	0.011656487	0.011656487  - ommit this
resp.data_merged[135,c(1:6)] # 	2/2/2022	CH1	run_1_raw.txt  -0.03291728	-0.02714124	-0.0271412; data change Lpc to -0.0209
resp.data_merged[148,c(1:6)] # 	2/2/2022	CH2	run_3_raw.txt	-0.004996976	-0.007234043	-0.007234043; data change Lpc to -0.0124
resp.data_merged[257,c(1:6)] #  10/26/2022	CH3	run_2_raw.txt	0.04303898	-0.0047484	-0.0047484; data change Lpc to -0.1063
resp.data_merged[258,c(1:6)] #  10/26/2022	CH4	run_2_raw.txt	-0.003937913	-0.003744103	-0.003744103; data change Lpc to -0.0900
resp.data_merged[261,c(1:6)] #  10/26/2022	CH7	run_2_raw.txt	-0.002582753	-0.004017686	-0.004017686; data change Lpc to -0.1012
# change according to diagnostics of plots and in Lolin script
resp.data_merged[47,4] <- resp.data_merged[47,5] # 20210930_Plate_2_Run_2_C5_regression - Lz and Leq call better regression than Lpc
resp.data_merged[90,4] <- resp.data_merged[90,5] # 20210930_Plate_2_Run_1_C1_regression - Lz and Leq call better regression than Lpc
resp.data_merged[84,4] <- -0.0296 # 20210930_Plate_1_Run_2_C1_regression - plot shows noise after the 20 minutes mark, we reran this at the end of the LoLin script, insert here!
resp.data_merged[135,4] <- -0.0209
resp.data_merged[148,4] <- -0.0124
resp.data_merged[257,4] <- -0.1063
resp.data_merged[258,4] <- -0.0900
resp.data_merged[261,4] <- -0.1012
blanks_total <- data.frame() # start dataframe
blanks.table <- data.frame(matrix(nrow = 1,ncol = 5)) # make a table template
colnames(blanks.table)<-c('Date', 'Channel', 'mean_Lpc', 'mean_Leq' , 'mean_Lz') # names for comuns in the for loop
blanks_all_raw <- data.frame(merge(resp.data, resp.ref)) %>% # data.frame((merge(resp_all_raw, resp.ref)) %>%
dplyr::mutate(filetype = str_sub(Filename, -3,-1)) %>%
dplyr::mutate(filetype = factor(ifelse(filetype == "csv", "SDR_data", "LoLigo_data"))) %>%
dplyr::filter(Chamber_tank  == 'blank') %>%
#dplyr::filter(Lpc <0) %>%
dplyr::filter(!Date == '9/30/2021' | !Lpc < -0.035) %>% #omits C6 RR_9.30.21_AM_Plate_1_Run_1.csv	8.0	blank - View the Lolin plot, looks noisy and a fast outlier from the others
dplyr::filter(!Date ==  '9/30/2021'   | !pH == "7.5" | !Channel == "B2" | !Run == "1" | !Plate == "1" ) %>% # abnormal high rate for a blank - omission approximates the mean blank for the other treatment (bad data)
dplyr::filter(!Date == '8/30/2022' | !Lpc < -0.02) %>% # omit the few outlier blanks shiting rates higher than those with spat or larvae
dplyr::filter(!Date == '10/26/2021'  | !Channel == "CH8" | !Run == "2" ) %>% # omit a bad blank that contained a bad seal, noted on the respiration sampling day during the trial
dplyr::select(c('Date', 'Run', 'Channel','Filename','pH','Lpc', 'Leq', 'Lz','filetype')) %>% # add 'Rate_mgO2_hour'hen the start and end is completed
dplyr::arrange(Date,pH, .by_group = TRUE)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(Rmisc)
library(devtools)
library(ggpubr)
library(SciViews)
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # omit low food trial data
# filter out the F2 measurements
filter(Date %in% c('8/30/2022', '9/22/2022', '11/16/2022', '1/31/2023', '2/23/2023'))
RR_master
read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # omit low food trial data
# filter out the F2 measurements
filter(Date %in% c('8/30/2022', '9/22/2022', '11/16/2022', '1/31/2023', '2/23/2023')) %>% # an F2 measurement
filter((Date == '9/22/2022' & filetype =='SDR_data'))
read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # omit low food trial data
# filter out the F2 measurements
filter(Date %in% c('8/30/2022', '9/22/2022', '11/16/2022', '1/31/2023', '2/23/2023'))
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # omit low food trial data
# filter out the F2 measurements
filter(Date %in% c('8/30/2022', '9/22/2022', '11/16/2022', '1/31/2023', '2/23/2023'))
RR_master
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # omit low food trial data
# filter out the F2 measurements
filter(Date %in% c('8/30/2022', '9/22/2022', '11/16/2022', '1/31/2023', '2/23/2023')) %>% # an F2 measurement
filter(!(Date == '9/22/2022' & filetype =='LoLigo_data')) %>%
# unique(RR_master$Date) # "10/26/2021" "2/2/2022"   "3/1/2022"   "8/30/2022"  "9/14/2021"  "9/22/2022"  "9/30/2021"
dplyr::mutate(Age = case_when(Date == '8/30/2022'  ~ 13,
Date == '9/22/2022'  ~ 36,
Date == '11/16/2022'  ~ 91,
Date == '1/31/2023' ~ 167,
Date == '2/23/2023'  ~ 190)) %>%
dplyr::mutate(Age = as.factor(Age)) %>%
dplyr::arrange(Age)
unique(RR_master$Date)
RR_master
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(Rmisc)
library(devtools)
library(ggpubr)
library(SciViews)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # omit low food trial data
# filter out the F2 measurements
filter(Date %in% c('8/30/2022', '9/22/2022', '11/16/2022', '1/31/2023', '2/23/2023')) %>% # an F2 measurement
filter(!(Date == '9/22/2022' & filetype =='LoLigo_data')) %>%
# unique(RR_master$Date) # "10/26/2021" "2/2/2022"   "3/1/2022"   "8/30/2022"  "9/14/2021"  "9/22/2022"  "9/30/2021"
dplyr::mutate(Age = case_when(Date == '8/30/2022'   ~ 13,
Date == '9/22/2022'   ~ 36,
Date == '11/16/2022'  ~ 91,
Date == '1/31/2023'   ~ 167,
Date == '2/23/2023'   ~ 190)) %>%
dplyr::mutate(Age = as.factor(Age)) %>%
dplyr::arrange(Age)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(Rmisc)
library(devtools)
library(ggpubr)
library(SciViews)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # omit low food trial data
# filter out the F2 measurements
filter(Date %in% c('8/30/2022', '9/22/2022', '11/16/2022', '1/31/2023', '2/23/2023')) %>% # an F2 measurement
filter(!(Date == '9/22/2022' & filetype =='LoLigo_data')) %>%
# unique(RR_master$Date) # "10/26/2021" "2/2/2022"   "3/1/2022"   "8/30/2022"  "9/14/2021"  "9/22/2022"  "9/30/2021"
dplyr::mutate(Age = case_when(Date == '8/30/2022'   ~ 13,
Date == '9/22/2022'   ~ 36,
Date == '11/16/2022'  ~ 91,
Date == '1/31/2023'   ~ 167,
Date == '2/23/2023'   ~ 190)) %>%
dplyr::mutate(Age = as.factor(Age)) %>%
dplyr::arrange(Age)
unique(RR_master$Date)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(Rmisc)
library(devtools)
library(ggpubr)
library(SciViews)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/RR_calc_raw.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # omit low food trial data
# filter out the F2 measurements
filter(Date %in% c('8/30/2022', '9/22/2022', '11/16/2022', '1/31/2023', '2/23/2023')) %>% # an F2 measurement
filter(!(Date == '9/22/2022' & filetype =='LoLigo_data')) %>%
# unique(RR_master$Date) # "10/26/2021" "2/2/2022"   "3/1/2022"   "8/30/2022"  "9/14/2021"  "9/22/2022"  "9/30/2021"
dplyr::mutate(Age = case_when(Date == '8/30/2022'   ~ 13,
Date == '9/22/2022'   ~ 36,
Date == '11/16/2022'  ~ 91,
Date == '1/31/2023'   ~ 167,
Date == '2/23/2023'   ~ 190)) %>%
dplyr::mutate(Age = as.factor(Age)) %>%
dplyr::arrange(Age)
unique(RR_master$Date)
RR_master
