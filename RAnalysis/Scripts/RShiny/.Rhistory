shapiro.test(residuals(Age1Length_lm_mod)) # 0.002907 no pass
pander(anova(Age1Length_lm_mod), style='rmarkdown') # anova table of lmer
Age1Length_lme_mod <- lme(length_um~OA*Temp*Salinity,random=~1|random_fact,data=Age1_raw_length)
pander(anova(Age1Length_lme_mod), style='rmarkdown') # anova table of lmer
# post hoc tests --------------------------------------------------------------------------------------------------- #
posthoc<-emmeans(Age1Length_lme_mod, pairwise~OA:Salinity, adjust="tukey")
# post hoc tests --------------------------------------------------------------------------------------------------- #
posthoc<-emmeans(Age1Length_lme_mod, pairwise~OA:Salinity, adjust="tukey")
multcomp::cld(posthoc$emmeans,alpha = 0.5, Letters = letters)
Age4Length_lme_mod <- lme(length_um~OA*Salinity*Temp,random=~1|random_fact,data=Age4_raw_length)
pander(anova(Age4Length_lme_mod), style='rmarkdown') # anova table of lmer
# |        &nbsp;        | numDF | denDF | F-value |  p-value  |
# |:--------------------:|:-----:|:-----:|:-------:|:---------:|
# |   **(Intercept)**    |   1   |  378  |  10702  |     0     |
# |        **OA**        |   1   |  16   |  30.04  | 5.033e-05 |
# |     **Salinity**     |   1   |  16   |  13.73  | 0.001921  |
# |       **Temp**       |   1   |  16   |  1.675  |   0.214   |
# |   **OA:Salinity**    |   1   |  16   | 0.6367  |  0.4366   |
# |     **OA:Temp**      |   1   |  16   |  10.42  | 0.005262  | *
# |  **Salinity:Temp**   |   1   |  16   | 0.3258  |   0.576   |
# | **OA:Salinity:Temp** |   1   |  16   |  2.811  |  0.1131   |
leveneTest(residuals(Age4Length_lme_mod) ~ Age4_raw_length$Temp*Age4_raw_length$OA*Age4_raw_length$Salinity) # 0.2059 pass
qqnorm(resid(Age4Length_lme_mod)) # check for normality of residuals - looks okay
posthoc<-emmeans(Age4Length_lme_mod, pairwise~OA:Temp, adjust="tukey")
multcomp::cld(posthoc$emmeans,alpha = 0.5, Letters = letters)
Age8Length_lme_mod <- lme(log(length_um)~OA*Salinity*Temp,random=~1|random_fact,data=Age8_raw_length)
pander(anova(Age8Length_lme_mod), style='rmarkdown') # anova table of lmer
# |        &nbsp;        | numDF | denDF | F-value |  p-value  |
# |:--------------------:|:-----:|:-----:|:-------:|:---------:|
# |   **(Intercept)**    |   1   | 1659  |  52761  |     0     |
# |        **OA**        |   1   |  16   |  17.24  | 0.0007493 |
# |     **Salinity**     |   1   |  16   |  17.66  | 0.000676  |
# |       **Temp**       |   1   |  16   |  3.026  |  0.1011   |
# |   **OA:Salinity**    |   1   |  16   | 0.08178 |  0.7786   |
# |     **OA:Temp**      |   1   |  16   |  4.522  |  0.04937  | **
# |  **Salinity:Temp**   |   1   |  16   |  3.228  |  0.09127  |
# | **OA:Salinity:Temp** |   1   |  16   |  1.939  |  0.1829   |
leveneTest(residuals(Age8Length_lme_mod) ~ Age8_raw_length$Temp*Age8_raw_length$OA*Age8_raw_length$Salinity) # < 2.2e-16 *** - did not pass
pander(anova(Age8Length_lme_mod), style='rmarkdown') # anova table of lmer
# post hoc tests --------------------------------------------------------------------------------------------------- #
posthoc<-emmeans(Age8Length_lme_mod, pairwise~OA:Temp, adjust="tukey")
multcomp::cld(posthoc$emmeans,alpha = 0.5, Letters = letters)
#data
Age8_raw_length_hightemp <- Age8_raw_length %>% dplyr::filter(!Temp %in% 'Low')
pander(anova(Age8Length_lme_mod_hightemp), style='rmarkdown') # anova table of lmer
#data
Age8_raw_length_hightemp <- Age8_raw_length %>% dplyr::filter(!Temp %in% 'Low')
# run model ( LME model)
Age8Length_lme_mod_hightemp <- lme(length_um~OA*Salinity,random=~1|random_fact,data=Age8_raw_length_hightemp) # notice temp is removed...
pander(anova(Age8Length_lme_mod_hightemp), style='rmarkdown') # anova table of lmer
Age11Length_lme_mod <- lme(length_um~OA*Salinity*Temp,random=~1|random_fact,data=Age11_raw_length)
pander(anova(Age11Length_lme_mod), style='rmarkdown') # anova table of lmer
# post hoc tests --------------------------------------------------------------------------------------------------- #
posthoc<-emmeans(Age11Length_lme_mod, pairwise~Salinity:Temp, adjust="tukey")
multcomp::cld(posthoc$emmeans,alpha = 0.5, Letters = letters)
# post hoc tests --------------------------------------------------------------------------------------------------- #
posthoc<-emmeans(Age11Length_lme_mod, pairwise~Salinity:Temp, adjust="tukey")
multcomp::cld(posthoc$emmeans,alpha = 0.5, Letters = letters)
Age15Length_lme_mod <- lmer(length_um~OA*Salinity*Temp+(1|random_fact),na.action = na.exclude,data=Age15_raw_length)
anova(Age15Length_lme_mod)
library(lme4)
library(lmerTest)
Age15Length_lme_mod <- lmer(length_um~OA*Salinity*Temp+(1|random_fact),na.action = na.exclude,data=Age15_raw_length)
anova(Age15Length_lme_mod)
# post hoc tests --------------------------------------------------------------------------------------------------- #
posthoc<-emmeans(Age15Length_lme_mod, pairwise~Salinity:Temp, adjust="tukey")
multcomp::cld(posthoc$emmeans,alpha = 0.5, Letters = letters)
# extract the experiment data with coresponding sampke Ids from the averaged data master file...
Exp_data <-  Av_length.survival_dat %>%
filter(Day %in% 1) %>%
dplyr::select(c('Temp','OA','Salinity','Replicate','Id.', 'pH', 'AR')) %>%
dplyr::rename(Sample.ID = Id., Aragonite_saturation = AR)
Exp_data
Av_length.survival_dat
# Age 1
raw_length_Age1MELT <-  reshape2::melt((as.data.frame(Masterlengthdata) %>% dplyr::filter(Age == 1))) %>%
na.omit %>%
dplyr::rename(length_um = value , Sample.ID =variable) %>%
dplyr::mutate(Sample.ID = gsub('.*Sample.','', Sample.ID))
Age1_raw_length      <- merge(raw_length_Age1MELT, Exp_data, by = 'Sample.ID')  %>%
dplyr::mutate(random_fact = paste( substr(Temp,1,1), substr(OA,1,1), substr(Salinity,1,1), '_', Replicate, sep = '')) %>%
dplyr::mutate(Age = 1)
# Age 4
raw_length_Age4MELT <-  reshape2::melt((as.data.frame(Masterlengthdata) %>% dplyr::filter(Age == 4))) %>%
na.omit %>%
dplyr::rename(length_um = value , Sample.ID =variable) %>%
dplyr::mutate(Sample.ID = gsub('.*Sample.','', Sample.ID))
Age4_raw_length      <- merge(raw_length_Age4MELT, Exp_data, by = 'Sample.ID')  %>%
dplyr::mutate(random_fact = paste( substr(Temp,1,1), substr(OA,1,1), substr(Salinity,1,1), '_', Replicate, sep = '')) %>%
dplyr::mutate(Age = 4)
# Age 8
raw_length_Age8MELT <-  reshape2::melt((as.data.frame(Masterlengthdata) %>% dplyr::filter(Age == 8))) %>%
na.omit %>%
dplyr::rename(length_um = value , Sample.ID =variable) %>%
dplyr::mutate(Sample.ID = gsub('.*Sample.','', Sample.ID))
Age8_raw_length      <- merge(raw_length_Age8MELT, Exp_data, by = 'Sample.ID')  %>%
dplyr::mutate(random_fact = paste( substr(Temp,1,1), substr(OA,1,1), substr(Salinity,1,1), '_', Replicate, sep = '')) %>%
dplyr::mutate(Age = 8)
# Age 11
raw_length_Age11MELT <-  reshape2::melt((as.data.frame(Masterlengthdata) %>% dplyr::filter(Age == 11))) %>%
na.omit %>%
dplyr::rename(length_um = value , Sample.ID =variable) %>%
dplyr::mutate(Sample.ID = gsub('.*Sample.','', Sample.ID))
Age11_raw_length      <- merge(raw_length_Age11MELT, Exp_data, by = 'Sample.ID')  %>%
dplyr::mutate(random_fact = paste( substr(Temp,1,1), substr(OA,1,1), substr(Salinity,1,1), '_', Replicate, sep = '')) %>%
dplyr::mutate(Age = 11)
# Age 15
raw_length_Age15MELT <-  reshape2::melt((as.data.frame(Masterlengthdata) %>% dplyr::filter(Age == 15))) %>%
na.omit %>%
dplyr::rename(length_um = value , Sample.ID =variable) %>%
dplyr::mutate(Sample.ID = gsub('.*Sample.','', Sample.ID))
Age15_raw_length      <- merge(raw_length_Age15MELT, Exp_data, by = 'Sample.ID')  %>%
dplyr::mutate(random_fact = paste( substr(Temp,1,1), substr(OA,1,1), substr(Salinity,1,1), '_', Replicate, sep = '')) %>%
dplyr::mutate(Age = 15)
raw_length_Age15MELT
raw_length_Age15MELT
Master_Lengths <- rbind(Age1_raw_length,
Age4_raw_length,
Age8_raw_length,
Age11_raw_length,
Age15_raw_length)
p<-ggplot(data=data, aes(x=interval, y=OR, colour=Drug)) + geom_point() + geom_line()
p<-p+geom_ribbon(aes(ymin=data$lower, ymax=data$upper), linetype=2, alpha=0.1)
Survival_means_day1         <- Av_length.survival_dat %>%
dplyr::filter(Day == 1) %>%
na.omit() %>%
dplyr::group_by(Day, OA, Salinity, Temp) %>%
dplyr::summarise(mean_survival = mean(Survival),
n           = n(),
sd_survival   = sd(Survival),
se_survival   = sd_survival/(sqrt(n)))
Survival_all_MeanSE_plot_Day1 <- Survival_means_day1 %>%
dplyr::mutate(AllTreat = as.factor(paste(OA, Salinity, Temp, sep = '_'))) %>%
ggplot(aes(x = as.numeric(Day),
y = mean_survival,
group = AllTreat,
colour=fct_relevel(Salinity, c("Low", "High")),
linetype = Temp)) +
geom_point(aes(colour = fct_relevel(Salinity, c("Low", "High")),
shape = fct_relevel(OA, c("Low", "High"))),
width = 0.5,
position = "dodge2") +
geom_line(aes(x = as.numeric(Day),
y=mean_survival,
colour=fct_relevel(Salinity, c("Low", "High")),
linetype = Temp)) +
geom_errorbar(aes(ymin = mean_survival - se_survival,
ymax = mean_survival + se_survival),
width = 0.5, position= "dodge2") +
theme_classic() +
facet_wrap(~(fct_relevel(OA, c("Low", "High"))))
Survival_means <- Av_length.survival_dat %>%
dplyr::filter(Day >1) %>%
na.omit() %>%
dplyr::group_by(Day, OA, Salinity, Temp) %>%
dplyr::summarise(mean_survival = mean(Survival),
n           = n(),
sd_survival   = sd(Survival),
se_survival   = sd_survival/(sqrt(n)))
Survival_means
Survival_all_MeanSE_plot <- Survival_means %>%
dplyr::mutate(AllTreat = as.factor(paste(OA, Salinity, Temp, sep = '_'))) %>%
ggplot(aes(x = as.numeric(Day),
y = mean_survival,
group = AllTreat,
colour=fct_relevel(Salinity, c("Low", "High")),
linetype = Temp)) +
geom_point(aes(colour = fct_relevel(Salinity, c("Low", "High")),
shape = fct_relevel(OA, c("Low", "High"))),
width = 0.5,
position = "dodge2") +
geom_line(aes(x = as.numeric(Day),
y=mean_survival,
colour=fct_relevel(Salinity, c("Low", "High")),
linetype = Temp)) +
geom_errorbar(aes(ymin = mean_survival - se_survival,
ymax = mean_survival + se_survival),
width = 0.5, position= "dodge2") +
theme_classic() +
stat_summary(geom="ribbon", fun.data=mean_cl_normal, width=0.1, conf.int=0.95, fill="lightblue")+
facet_wrap(~(fct_relevel(OA, c("Low", "High"))))
print(Survival_all_MeanSE_plot)
Survival_means
# Purpose: Bay Scallop Project - Feeding Rates
# analysis of respiration rate data
# Written by: Sam J Gurr (last edit 10/12/2021)
# Review Riisgard 2001 defining the clearance rate of bivalves
# NOTE: clearance rate is defined as the volume of water cleared of suspended particles per unit time, and only equals filtration rate when
# 100% of suspended particles are efficiently retained
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(see)
library(performance)
library(car)
library(reshape2)
library(lubridate)
library(SciViews)
library(reshape2)
library(SciViews)
library(kableExtra)
library(latex2exp)
library(pander)
library(performance)
library(ggpubr)
library(Rmisc)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # Work computer
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # personal computer
# Purpose: Bay Scallop Project - Feeding Rates
# analysis of respiration rate data
# Written by: Sam J Gurr (last edit 10/12/2021)
# Review Riisgard 2001 defining the clearance rate of bivalves
# NOTE: clearance rate is defined as the volume of water cleared of suspended particles per unit time, and only equals filtration rate when
# 100% of suspended particles are efficiently retained
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(see)
library(performance)
library(car)
library(reshape2)
library(lubridate)
library(SciViews)
library(reshape2)
library(SciViews)
library(kableExtra)
library(latex2exp)
library(pander)
library(performance)
library(ggpubr)
library(Rmisc)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # Work computer
# setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # personal computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Master_data       <- read.csv(file="Data/Clearance_rates/ClearanceRates_MasterData.csv", header=T) # master data file
clearance.rate_914    <- Master_data  %>% dplyr::filter(Date %in% 20210914)  %>%
dplyr::mutate(Chamber_tank = paste(pH, Replicate, sep='_'))
clearance.rate_930    <- Master_data  %>% dplyr::filter(Date %in% 20210930)  %>%
dplyr::mutate(Chamber_tank = paste(pH, Replicate, sep='_'))
clearance.rate_1026    <- Master_data  %>% dplyr::filter(Date %in% 20211026)  %>%
dplyr::mutate(Chamber_tank = paste(pH, Replicate, sep='_'))
length.resp.feed <- read.csv(file="Data/Respiration/Lengths_Condition_resp_clearance.csv", header=T) %>%
dplyr::mutate(Date = paste("20",(format(as.Date(Date, "%m/%d/%Y"), "%y%m%d")), sep ='')) %>%
dplyr::rename(Fed_Unfed = Food)
length.resp.feed <- length.resp.feed[!is.na(length.resp.feed$Length_um),] %>%  dplyr::select(c('Date', 'Run', 'Plate',
'pH', 'Fed_Unfed', 'Replicate',
'Chamber_tank', 'Number', 'Length_um','whole_Dry_weight'))
length.resp.feed
library(shiny)
# push lines 4 - 7 to send edits of ui and server scripts to URL
# rsconnect::setAccountInfo(name='sam-geoduck',
#                             token='340A1FE56E654C48A346EDD10D0CC45F',
#                             secret='hmitiSg16pfLx0ckLCu/1+/GByjPw/sdhcjzw4N/')
# rsconnect::deployApp('C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Scripts/RShiny/Larvae_feed_ui_and_server')
ui <- shinyUI(fluidPage(
# Application title
div(h2('Bivalve larvae feeder', style="margin: 0;color:teal"), h3('(designed for static larval-rearing systems)', style="color:teal"), h5('quick. efficient. effective.', style="color:teal")),
#h5("Subtitle 1", style="color:orange"),
# Input data
mainPanel(
h5({ paste("RShiny application built by Samuel J. Gurr (last update 07/08/2019)")}),
h5({ paste("Contact: samjgurr@gmail.com; samuel.gurr@noaa.gov")}),
dateInput('date', "Choose today's date:", value = NULL, min = NULL, max = NULL,
format = "yyyy-mm-dd", startview = "month", weekstart = 0,
language = "en", width = NULL),
numericInput("how_many_tanks", "How many tanks? (all same volume)", 18, min = 1, max = 50),
numericInput("tank_volume", "Tank volume? (L)", 10 ,min = 0, max = 5000),
numericInput("target_cell_density", "What is the target cell density? (cells mL-1)", 25000,min = 0, max = 1000000), # ,
h4("once you've completed above..."),
column(3,
# numericInput("feed_conical", "target mL per hour continuous feed", 1000 ,min = 0, max = 1000),
selectInput("algae_species_1", "Choose species for Algae #1:",
list("T-iso", "Pavlova", "Chaetoceros","Nano","Tetraselmis, NA")),
numericInput("algae_1", "Algae #1 cells mL-1 (Pav, T-iso, Tet, Nano, Chaet, etc.)", 2000000,min = 0, max = 200000000),
numericInput("perc_algae1", "Target % composition of algae #1", 75,min = 0, max = 100) #,
),
column(3,offset =1,
selectInput("algae_species_2", "Choose species for Algae #2:",
list("T-iso", "Pavlova", "Chaetoceros","Nano","Tetraselmis, NA")),
numericInput("algae_2", "Algae #2 cells mL-1  (Pav, T-iso, Tet, Nano, Chaet, etc.)", 2000000,min = 0, max = 200000000),
numericInput("perc_algae2", "Target % composition of algae #2", 25,min = 0, max = 100)
),
column(3,offset =1,
selectInput("algae_species_3", "Choose species for Algae #3:",
list("T-iso", "Pavlova", "Chaetoceros","Nano","Tetraselmis, NA")),
numericInput("algae_3", "Algae #3 cells mL-1  (Pav, T-iso, Tet, Nano, Chaet, etc.)", 2000000,min = 0, max = 200000000),
numericInput("perc_algae3", "Target % composition of algae #3", 0,min = 0, max = 100) #,
),
# submit button - cumulative outputs
actionButton("submit", "Feed 'em!", icon("Submit") , width = NULL, style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
DT::DTOutput("feed_table"),
) # main panel
) # fluid page
) # shinyUI
library(shiny)
# push lines 4 - 7 to send edits of ui and server scripts to URL
# rsconnect::setAccountInfo(name='sam-geoduck',
#                             token='340A1FE56E654C48A346EDD10D0CC45F',
#                             secret='hmitiSg16pfLx0ckLCu/1+/GByjPw/sdhcjzw4N/')
# rsconnect::deployApp('C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Scripts/RShiny/Larvae_feed_ui_and_server')
ui <- shinyUI(fluidPage(
# Application title
div(h2('Bivalve larvae feeder', style="margin: 0;color:teal"), h3('(designed for static larval-rearing systems)', style="color:teal"), h5('quick. efficient. effective.', style="color:teal")),
#h5("Subtitle 1", style="color:orange"),
# Input data
mainPanel(
h5({ paste("RShiny application built by Samuel J. Gurr (last update 07/08/2019)")}),
h5({ paste("Contact: samjgurr@gmail.com; samuel.gurr@noaa.gov")}),
dateInput('date', "Choose today's date:", value = NULL, min = NULL, max = NULL,
format = "yyyy-mm-dd", startview = "month", weekstart = 0,
language = "en", width = NULL),
numericInput("how_many_tanks", "How many tanks? (all same volume)", 18, min = 1, max = 50),
numericInput("tank_volume", "Tank volume? (L)", 10 ,min = 0, max = 5000),
numericInput("target_cell_density", "What is the target cell density? (cells mL-1)", 25000,min = 0, max = 1000000), # ,
h4("once you've completed above..."),
column(3,
# numericInput("feed_conical", "target mL per hour continuous feed", 1000 ,min = 0, max = 1000),
selectInput("algae_species_1", "Choose species for Algae #1:",
list("T-iso", "Pavlova", "Chaetoceros","Nano","Tetraselmis, NA")),
numericInput("algae_1", "Algae #1 cells mL-1 (Pav, T-iso, Tet, Nano, Chaet, etc.)", 2000000,min = 0, max = 200000000),
numericInput("perc_algae1", "Target % composition of algae #1", 75,min = 0, max = 100) #,
),
column(3,offset =1,
selectInput("algae_species_2", "Choose species for Algae #2:",
list("T-iso", "Pavlova", "Chaetoceros","Nano","Tetraselmis, NA")),
numericInput("algae_2", "Algae #2 cells mL-1  (Pav, T-iso, Tet, Nano, Chaet, etc.)", 2000000,min = 0, max = 200000000),
numericInput("perc_algae2", "Target % composition of algae #2", 25,min = 0, max = 100)
),
column(3,offset =1,
selectInput("algae_species_3", "Choose species for Algae #3:",
list("T-iso", "Pavlova", "Chaetoceros","Nano","Tetraselmis, NA")),
numericInput("algae_3", "Algae #3 cells mL-1  (Pav, T-iso, Tet, Nano, Chaet, etc.)", 2000000,min = 0, max = 200000000),
numericInput("perc_algae3", "Target % composition of algae #3", 0,min = 0, max = 100) #,
),
# submit button - cumulative outputs
actionButton("submit", "Feed 'em!", icon("Submit") , width = NULL, style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
DT::DTOutput("feed_table"),
) # main panel
) # fluid page
) # shinyUI
install.packages("fontawesome")
library(shiny)
# push lines 4 - 7 to send edits of ui and server scripts to URL
# rsconnect::setAccountInfo(name='sam-geoduck',
#                             token='340A1FE56E654C48A346EDD10D0CC45F',
#                             secret='hmitiSg16pfLx0ckLCu/1+/GByjPw/sdhcjzw4N/')
# rsconnect::deployApp('C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Scripts/RShiny/Larvae_feed_ui_and_server')
ui <- shinyUI(fluidPage(
# Application title
div(h2('Bivalve larvae feeder', style="margin: 0;color:teal"), h3('(designed for static larval-rearing systems)', style="color:teal"), h5('quick. efficient. effective.', style="color:teal")),
#h5("Subtitle 1", style="color:orange"),
# Input data
mainPanel(
h5({ paste("RShiny application built by Samuel J. Gurr (last update 07/08/2019)")}),
h5({ paste("Contact: samjgurr@gmail.com; samuel.gurr@noaa.gov")}),
dateInput('date', "Choose today's date:", value = NULL, min = NULL, max = NULL,
format = "yyyy-mm-dd", startview = "month", weekstart = 0,
language = "en", width = NULL),
numericInput("how_many_tanks", "How many tanks? (all same volume)", 18, min = 1, max = 50),
numericInput("tank_volume", "Tank volume? (L)", 10 ,min = 0, max = 5000),
numericInput("target_cell_density", "What is the target cell density? (cells mL-1)", 25000,min = 0, max = 1000000), # ,
h4("once you've completed above..."),
column(3,
# numericInput("feed_conical", "target mL per hour continuous feed", 1000 ,min = 0, max = 1000),
selectInput("algae_species_1", "Choose species for Algae #1:",
list("T-iso", "Pavlova", "Chaetoceros","Nano","Tetraselmis, NA")),
numericInput("algae_1", "Algae #1 cells mL-1 (Pav, T-iso, Tet, Nano, Chaet, etc.)", 2000000,min = 0, max = 200000000),
numericInput("perc_algae1", "Target % composition of algae #1", 75,min = 0, max = 100) #,
),
column(3,offset =1,
selectInput("algae_species_2", "Choose species for Algae #2:",
list("T-iso", "Pavlova", "Chaetoceros","Nano","Tetraselmis, NA")),
numericInput("algae_2", "Algae #2 cells mL-1  (Pav, T-iso, Tet, Nano, Chaet, etc.)", 2000000,min = 0, max = 200000000),
numericInput("perc_algae2", "Target % composition of algae #2", 25,min = 0, max = 100)
),
column(3,offset =1,
selectInput("algae_species_3", "Choose species for Algae #3:",
list("T-iso", "Pavlova", "Chaetoceros","Nano","Tetraselmis, NA")),
numericInput("algae_3", "Algae #3 cells mL-1  (Pav, T-iso, Tet, Nano, Chaet, etc.)", 2000000,min = 0, max = 200000000),
numericInput("perc_algae3", "Target % composition of algae #3", 0,min = 0, max = 100) #,
),
# submit button - cumulative outputs
actionButton("submit", "Feed 'em!", icon("Submit") , width = NULL, style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
DT::DTOutput("feed_table"),
) # main panel
) # fluid page
) # shinyUI
# assign table values
table_data <- data.frame(Date = as.Date(as.character()),
`Number of tanks` = as.numeric(),
`Tank volume` = as.numeric(),
`Target cells density (cells ml-1)` = as.numeric(),
`Volume algae #1 (total L)` = as.numeric(),
`Volume algae #2 (total L)` = as.numeric(),
`Volume algae #3 (total L)` = as.numeric(),
`Master mix (L)` = as.numeric(),
`FEED PER TANK (L)` = as.numeric(),
check.names = FALSE)
server <- shinyServer(function(input, output,session){
# vals <- reactiveValues()
# observe({
#   vals$x                   <- input$tank_volume*1000 # convert to cells per milliliter
#   vals$t                   <- input$target_cell_density # in cells per milliliter
#   vals$q                   <- input$how_many_tanks
#   vals$f                   <- input$flow_rate*1000 # convert to milliliters
#   vals$total_cells         <- vals$x*vals$t
#   vals$vol                 <- input$feed_conical
#   vals$algae_mix_conc      <- (input$algae_1*(input$perc_algae1/100)) +
#     (input$algae_2*(input$perc_algae2/100)) +
#     (input$algae_3*(input$perc_algae3/100)) # total cell concentration of mixed diet
#   vals$assumed_hourly_loss <- (vals$f*60)*vals$t  # in cells per milliliter
#   vals$percent_loss_hourly <- (vals$assumed_hourly_loss/vals$total_cells)*100
#   vals$Liters_algae_initial <- ((((vals$total_cells*(input$perc_algae1/100))/input$algae_1)/1000)+
#                                   (((vals$total_cells*(input$perc_algae2/100))/input$algae_2)/1000)+
#                                   (((vals$total_cells*(input$perc_algae3/100))/input$algae_3)/1000))
#   vals$LPH_feed <- ((vals$percent_loss_hourly/100)*vals$Liters_algae_initial)
#
# })
tableValues <- reactiveValues(df = data.frame(Date = as.Date(as.character()),
`Number of tanks` = as.numeric(),
`Tank volume` = as.numeric(),
`Target cells density (cells ml-1)` = as.numeric(),
`Volume algae #1 (total L)` = as.numeric(),
`Volume algae #2 (total L)` = as.numeric(),
`Volume algae #3 (total L)` = as.numeric(),
`Master mix (L)` = as.numeric(),
`FEED PER TANK (L)` = as.numeric(),
check.names = FALSE))
observeEvent(input$submit, {
temp <- tableValues$m
newRow <- data.frame(Date = input$date,
`Number of tanks` = input$how_many_tanks,
`Tank volume (L)` =  input$tank_volume,
`Target cells density (cells ml-1)` = input$target_cell_density,
`Volume algae #1 (total L)` = ( ( ( ((input$tank_volume*1000)*(input$target_cell_density)) *(input$perc_algae1/100))  /input$algae_1) /1000 ) * input$how_many_tanks,
`Volume algae #2 (total L)` = ( ( ( ((input$tank_volume*1000)*(input$target_cell_density)) *(input$perc_algae2/100))  /input$algae_2) /1000 ) * input$how_many_tanks,
`Volume algae #3 (total L)` = ( ( ( ((input$tank_volume*1000)*(input$target_cell_density)) *(input$perc_algae3/100))  /input$algae_3) /1000 ) * input$how_many_tanks,
`Master mix (L)` = sum( (  ( ( ( ((input$tank_volume*1000)*(input$target_cell_density)) *(input$perc_algae1/100))  /input$algae_1) /1000 ) * input$how_many_tanks   ),
(  ( ( ( ((input$tank_volume*1000)*(input$target_cell_density)) *(input$perc_algae2/100))  /input$algae_2) /1000 ) * input$how_many_tanks   ),
( ( ( ( ((input$tank_volume*1000)*(input$target_cell_density)) *(input$perc_algae3/100))  /input$algae_3) /1000 ) * input$how_many_tanks    )),
`FEED PER TANK (L)` = sum( (  ( ( ( ((input$tank_volume*1000)*(input$target_cell_density)) *(input$perc_algae1/100))  /input$algae_1) /1000 ) ),
(  ( ( ( ((input$tank_volume*1000)*(input$target_cell_density)) *(input$perc_algae2/100))  /input$algae_2) /1000 ) ),
( ( ( ( ((input$tank_volume*1000)*(input$target_cell_density)) *(input$perc_algae3/100))  /input$algae_3) /1000 ) )),
check.names = FALSE)
if(!is.null(temp)) {
if(isolate(input$date) < temp[nrow(temp), 1]) {
temp <- rbind(temp, newRow)
temp <- dplyr::arrange(temp, Date)
} else {
temp <- rbind(temp, newRow)
}
} else {
temp <- rbind(temp, newRow)
}
tableValues$m <- temp
})
output$feed_table <- DT::renderDataTable({
if(!is.null(tableValues$m)){
table_data <- tableValues$m
# FeedLarvae <- data.frame(Date = table_data[nrow(table_data),1],
#                          `Number of tanks` = as.numeric(),
#                          `Tank volume` = as.numeric(),
#                          `Target cells density (cells ml-1)` = as.numeric(),
#                          `Volume algae #1 (total L)` = as.numeric(),
#                          `Volume algae #2 (total L)` = as.numeric(),
#                          `Volume algae #3 (total L)` = as.numeric(),
#                          `Master mix (L)` = as.numeric(),
#                          `FEED PER TANK (L)` = as.numeric(),
#                          check.names = FALSE)
#
# table_data <- rbind(table_data, FeedLarvae)
if(nrow(table_data > 2)){
table_data <- dplyr::arrange(table_data, Date)
}
}
rownames(table_data)[nrow(table_data)] <- "Boom, algae!"
table_data
})
observe({print(colnames(tableValues$m))})
observe({print(!is.null(tableValues$m))})
#
#
# output$batch_algae1 <- renderText({
#   paste("Algae #1 (L per tank) =",
#         ((vals$total_cells*(input$perc_algae1/100))/input$algae_1)/1000)
# })
#
# output$batch_algae2 <- renderText({
#   paste("Algae #2 (L per tank) =",
#         ((vals$total_cells*(input$perc_algae2/100))/input$algae_2)/1000)
# })
#
# output$batch_algae3 <- renderText({
#   paste( "Algae #3 (L per tank) =",
#          ((vals$total_cells*(input$perc_algae3/100))/input$algae_3)/1000)
# })
#
# output$batchtotal <- renderText({
#   paste("Master mix total (L) =",
#         vals$Liters_algae_initial * vals$q)
# })
#
})
shinyApp(ui = ui, server = server)
