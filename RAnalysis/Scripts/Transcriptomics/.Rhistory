pcaData_rlogExp_F2    <- plotPCA(rlogExp_F2, intgroup = "pCO2", returnData = TRUE)
percentVar_rlogExp_F2  <- round(100 * attr(pcaData_rlogExp_F2, "percentVar"))
png("../../Output/Transcriptomics/DESeq2/F2_juveniles/F2_rlogExp_PCA.png", 1000, 1000, pointsize=20)
ggplot(pcaData_rlogExp_F2, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("F2 PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar_rlogExp_F2[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_rlogExp_F2[2], "% variance")) +
coord_fixed()
dev.off()
ggplot(pcaData_rlogExp_F2, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("F2 PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar_rlogExp_F2[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_rlogExp_F2[2], "% variance")) +
coord_fixed()
ggplot(pcaData_vstExp_F2, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("F2 PCA: vst expression data") +
xlab(paste0("PC1: ", percentVar_vstExp_F2[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_vstExp_F2[2], "% variance")) +
coord_fixed()
# DAY 0 PLOT THE (1) READS PER SAMPLE (2) READS PER GENE - FOR EACH DDS
nsamples        <- ncol(counts(dds)) # Number of samples - for the plot label
rps             <- qplot(colSums(counts(dds))) +# reads of reads per sample
labs(x = "Mapped reads per sample", y = "Number of samples",
title = "Day 0: Mapped reads per sample") +
geom_label(aes(x = 1.5e6, y = 3, label = paste(nsamples, "samples")))
ngenes          <- nrow(counts(dds)) # Number of genes
ngenes_min      <- min(rowSums(counts(dds))) #  minimum reads
ngenes_median   <- median(rowMeans2(counts(dds))) # minimum row mean
ngenes_max      <- max(rowSums(counts(dds))) #  maximum reads
rpg             <- qplot(log10(rowSums(counts(dds))), bins = 16) + # number of reads per gene
labs(x = "log10(Mapped reads per gene)",
y = "Number of genes",
title = "Mapped reads per gene") +
geom_label(aes(x = 4, y = 2000, label = paste(ngenes, "total genes"))) +
geom_label(aes(x = 4, y = 1700, label = paste("max count =", ngenes_max))) +
geom_label(aes(x = 4, y = 1400, label = paste("min count =", ngenes_min))) +
geom_label(aes(x = 4, y = 1100, label = paste("median reads =", ngenes_mean.min)))
countfig <- plot_grid(rps, rpg)
countfig
rps
rpg
Airr_Cvirg_annotation <- read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep = ',',
header = T) %>%
dplyr::select(c('Airradians_TranscriptID',
"blastxEval_CvirgTranscriptID",
"blastxEval_CvirgProteinID",
"blastxEval_CvirgGeneID",
"blastxEval_CvirgGOterms"))
# Edit the annotation file (Cvirg blasted to annotate draft genome contigs of Airradians)
Airr_Cvirg_annotation <- read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep = ',',
header = T) %>%
dplyr::select(c('Airradians_TranscriptID',
"blastxEval_CvirgTranscriptID",
"blastxEval_CvirgProteinID",
"blastxEval_CvirgGeneID",
"blastxEval_CvirgGOterms"))
# ==========================================================
#  F1s
# ==========================================================
# Grab DEGs from  the 'dds.run' model
DEGresults_F1         <- results(dds.run_F1, contrast=c("pCO2", "High", "Low"), alpha = 0.05) # FDR is the alpha 0.05
numDEGs_pval_F1       <- data.frame(table(DEGresults_F1$pvalue<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
numDEGs_padj_F1       <- data.frame(table(DEGresults_F1$padj<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
DEGresults.ordered_F1 <- resprimary[order(DEGresults_F1$padj), ] # Order by adjusted p-value
num.UpReg_F1          <- sum((DEGresults.ordered_F1$log2FoldChange[1:numDEGs_padj_F1] > 0) == TRUE) #  LFC >= 1
# ==========================================================
#  F1s
# ==========================================================
# Grab DEGs from  the 'dds.run' model
DEGresults_F1         <- results(dds.run_F1, contrast=c("pCO2", "High", "Low"), alpha = 0.05) # FDR is the alpha 0.05
numDEGs_pval_F1       <- data.frame(table(DEGresults_F1$pvalue<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
numDEGs_padj_F1       <- data.frame(table(DEGresults_F1$padj<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
DEGresults.ordered_F1 <- DEGresults_F1[order(DEGresults_F1$padj), ] # Order by adjusted p-value
DEGresults.ordered_F1
num.UpReg_F1          <- sum((DEGresults.ordered_F1$log2FoldChange[1:numDEGs_padj_F1] > 0) == TRUE) #  LFC >= 1
num.DownReg_F1        <- sum((DEGresults.ordered_F1$log2FoldChange[1:numDEGs_padj_F1] < 0) == TRUE) # LFC >= 1
total_F1              <- sum(num.DownReg_F1,num.UpReg_F1) # sum of DEGs with the criteria pdj < 0.05 + LFC>1 (< -1)
num.UpReg_F1
num.DownReg_F1
total_F1              <- sum(num.DownReg_F1,num.UpReg_F1) # sum of DEGs with the criteria pdj < 0.05 + LFC>1 (< -1)
total_F1
# Write results - covert to as.data.frame for the ordered results
resdata.F1           <- merge(as.data.frame(DEGresults.ordered_F1),
as.data.frame(counts(dds.run_F1, normalized=TRUE)),
by="row.names",
sort=FALSE) ## Merge with normalized count data
names(resdata.F1)[1] <- "Airradians_TranscriptID"
resdata.F1.annot     <- merge(Airr_Cvirg_annotation,resdata.F1, by = 'Airradians_TranscriptID')
resdata.F1.annot     <- resdata.F1.annot[order(resdata.primary.annot$padj), ]  # Order by adjusted p-value
resdata.F1.annot     <- resdata.F1.annot[order(resdata.F1.annot$padj), ]  # Order by adjusted p-value
resdata.F1.annot
write.csv(resdata.F1.annot, "../../Output/Transcriptomics/DESeq2/F1_juveniles/F1_DESeq2results_F1s.csv") # write
# What are the Protein names of these DEGs?
# first gather gene IDs for the DEGs (note: this is also used for the pheatmap in the transformed Exp heatmap)
numDEGs_padj # 54 - number of DEGs (from above) - use as integer in call below
# What are the Protein names of these DEGs?
# first gather gene IDs for the DEGs (note: this is also used for the pheatmap in the transformed Exp heatmap)
numDEGs_padj_F1 # 54 - number of DEGs (from above) - use as integer in call below
# What are the Protein names of these DEGs?
# first gather gene IDs for the DEGs (note: this is also used for the pheatmap in the transformed Exp heatmap)
numDEGs_padj_F1 # 169 - number of DEGs (from above) - use as integer in call below
topgenes.IDs_F1 <- head(rownames(DEGresults.ordered_F1),numDEGs_padj_F1) # call gene IDs for DEGs: pdj < 0.05 FDR < 0.05
length(topgenes.IDs_F1) == numDEGs_padj_F1 # must be TRUE
# DEGs Protein IDs - lets take a look shall we!
DEGs_annotated_F1s <- Airr_Cvirg_annotation %>% filter(Airradians_TranscriptID %in% topgenes.IDs_F1)
nrow(DEGs_annotated_F1s) # 196 - all are present!
View(DEGs_annotated_F1s) # lets see it!
resdata.F1.annot
# ==========================================================
#  F2s
# ==========================================================
# Grab DEGs from  the 'dds.run' model
DEGresults_F2         <- results(dds.run_F2, contrast=c("pCO2", "High", "Low"), alpha = 0.05) # FDR is the alpha 0.05
numDEGs_pval_F2       <- data.frame(table(DEGresults_F2$pvalue<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
numDEGs_padj_F2       <- data.frame(table(DEGresults_F2$padj<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
DEGresults.ordered_F2 <- DEGresults_F2[order(DEGresults_F2$padj), ] # Order by adjusted p-value
num.UpReg_F2          <- sum((DEGresults.ordered_F2$log2FoldChange[1:numDEGs_padj_F2] > 0) == TRUE) #  LFC >= 1
num.DownReg_F2        <- sum((DEGresults.ordered_F2$log2FoldChange[1:numDEGs_padj_F2] < 0) == TRUE) # LFC >= 1
total_F2              <- sum(num.DownReg_F2,num.UpReg_F2) # sum of DEGs with the criteria pdj < 0.05 + LFC>1 (< -1)
# Write results - covert to as.data.frame for the ordered results
resdata.F2           <- merge(as.data.frame(DEGresults.ordered_F2),
as.data.frame(counts(dds.run_F2, normalized=TRUE)),
by="row.names",
sort=FALSE) ## Merge with normalized count data
names(resdata.F2)[1] <- "Airradians_TranscriptID"
resdata.F2.annot     <- merge(Airr_Cvirg_annotation,resdata.F2, by = 'Airradians_TranscriptID')
resdata.F2.annot     <- resdata.F2.annot[order(resdata.F2.annot$padj), ]  # Order by adjusted p-value
# What are the Protein names of these DEGs?
# first gather gene IDs for the DEGs (note: this is also used for the pheatmap in the transformed Exp heatmap)
numDEGs_padj_F2 # 169 - number of DEGs (from above) - use as integer in call below
topgenes.IDs_F2 <- head(rownames(DEGresults.ordered_F2),numDEGs_padj_F2) # call gene IDs for DEGs: pdj < 0.05 FDR < 0.05
length(topgenes.IDs_F2) == numDEGs_padj_F2 # must be TRUE
# DEGs Protein IDs - lets take a look shall we!
DEGs_annotated_F2s <- Airr_Cvirg_annotation %>% filter(Airradians_TranscriptID %in% topgenes.IDs_F2)
# write out annotated DESeq2 DEGs
write.csv(resdata.F2.annot, "../../Output/Transcriptomics/DESeq2/F2_juveniles/F2_DESeq2results_F2s.csv") # write
resdata.F2.annot
resdata.F1.annot
resdata.F2.annot
rlogExp_F1_df        <- as.data.frame(assay(rlogExp_F1))
rlogExp_F1_df        <- as.data.frame(assay(rlogExp_F1))  %>%
tibble::rownames_to_column(rlogExp_F1_df, "Gene.ID")
rlogExp_F1_df        <- as.data.frame(assay(rlogExp_F1))
rlogExp_F1_df        <- tibble::rownames_to_column(rlogExp_F1_df, "Gene.ID")
rlogExp_F1_df        <- as.data.frame(assay(rlogExp_F1)) %>%
tibble::rownames_to_column("Gene.ID")
rlogExp_F1_df
rlogExp_DEGs         <- rlogExp_F1_df %>%
dplyr::filter(Gene.ID %in% topgenes.IDs)
rlogExp_DEGs         <- rlogExp_F1_df %>%
dplyr::filter(Gene.ID %in% topgenes.IDs_F1)
rlogExp_F1_DEGs      <- rlogExp_F1_df %>%
dplyr::filter(Gene.ID %in% topgenes.IDs_F1)
rlogExp_F1_DEGs_melt <- reshape2::melt(rlogExp_F1_DEGs, id.vars='Gene.ID') %>%
dplyr::rename(Sample.Name = variable, # to merge with 'Exp.metadata'
rlogExp = value) # the data to get mean SE values
rlogExp_F1_DEGs_melt
DEGs_annotated_F1    <- Airr_Cvirg_annotation %>%
dplyr::filter(Airradians_TranscriptID %in% topgenes.IDs_F1) %>%
dplyr::select(Airradians_TranscriptID,blastxEval_CvirgProteinID) %>%
dplyr::rename(Gene.ID = Airradians_TranscriptID,
Protein.ID = blastxEval_CvirgProteinID)
DEGs_annotated_F1
rlogExp_F1_DEGs_annotated <- merge(DEGs_annotated_F1, rlogExp_F1_DEGs_melt, by = "Gene.ID")
Exp.metadata
rlogExp_DEGs_MASTER       <- merge(rlogExp_F1_DEGs_annotated,Exp.metadata, by = "Sample.Name")
rlogExp_DEGs_MASTER
rlogExp_F1_DEGs_MASTER       <- merge(rlogExp_F1_DEGs_annotated,Exp.metadata, by = "Sample.Name")
rlogExp_F1_DEGs_MEAN.SE   <- rlogExp_F1_DEGs_MASTER %>%
dplyr:::group_by(Gene.ID, Protein.ID,pCO2) %>%
dplyr::summarise(mean.rlogExp    = mean(rlogExp),
sd.rlogExp     = sd(rlogExp),
n = n(),
sderror.rlogExp = sd.rlogExp/(sqrt(n))) %>%
dplyr::select(-n) %>%
dplyr::mutate(Protein_contig = paste(substr(Protein.ID,1,30),
str_split(Gene.ID, "\\.", simplify=T)[,3],
sep="_"))
?str_split
library(stringr)
rlogExp_F1_DEGs_MEAN.SE   <- rlogExp_F1_DEGs_MASTER %>%
dplyr:::group_by(Gene.ID, Protein.ID,pCO2) %>%
dplyr::summarise(mean.rlogExp    = mean(rlogExp),
sd.rlogExp     = sd(rlogExp),
n = n(),
sderror.rlogExp = sd.rlogExp/(sqrt(n))) %>%
dplyr::select(-n) %>%
dplyr::mutate(Protein_contig = paste(substr(Protein.ID,1,30),
str_split(Gene.ID, "\\.", simplify=T)[,3],
sep="_"))
pd <- position_dodge(0.3)
mean.rlogExp
for(i in 1:length(topgenes.IDs_F1)) {
geneID_loop  <- topgenes.IDs_F1[i]
df_loop      <- rlogExp_F1_DEGs_MEAN.SE %>%
dplyr::filter(Gene.ID %in% geneID_loop) %>%
dplyr::mutate(Protein_contig = str_remove_all(Protein_contig,"/"))
plot_loop    <- df_loop %>%
ggplot(aes(x=pCO2,
y=mean.rlogExp,
fill=pCO2)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.rlogExp-sderror.rlogExp,
ymax=mean.rlogExp+sderror.rlogExp),
colour="black",
width=.1,
position=pd) +
geom_point(size = 4,
shape=21,
position=pd) +
xlab("pCO2 treatment") +
ylab("") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("white",
"grey50")) +
ggtitle(df_loop[1,7]) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.ticks.length=unit(.25, "cm")) +
theme(legend.position = "none")
if(df_loop[1,4]>df_loop[2,4]) { # Upregulated, high pCO2 == high expression
pdf(paste("../../Output/Transcriptomics/DESeq2/F1_juveniles/Plots_MeanSE/Upregulated_DEGs/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
} else {
pdf(paste("../../Output/Transcriptomics/DESeq2/F1_juveniles/Plots_MeanSE/Downregulated_DEGs/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
}
}
for(i in 1:length(topgenes.IDs_F1)) {
geneID_loop  <- topgenes.IDs_F1[i]
df_loop      <- rlogExp_F1_DEGs_MEAN.SE %>%
dplyr::filter(Gene.ID %in% geneID_loop) %>%
dplyr::mutate(Protein_contig = str_remove_all(Protein_contig,"/"))
plot_loop    <- df_loop %>%
ggplot(aes(x=pCO2,
y=mean.rlogExp,
fill=pCO2)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.rlogExp-sderror.rlogExp,
ymax=mean.rlogExp+sderror.rlogExp),
colour="black",
width=.1,
position=pd) +
geom_point(size = 4,
shape=21,
position=pd) +
xlab("pCO2 treatment") +
ylab("") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("white",
"grey50")) +
ggtitle(df_loop[1,7]) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.ticks.length=unit(.25, "cm")) +
theme(legend.position = "none")
if(df_loop[1,4]>df_loop[2,4]) { # Upregulated, high pCO2 == high expression
pdf(paste("../../Output/Transcriptomics/DESeq2/F1_juveniles/Plots_MeanSE/Upregulated_DEGs/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
} else {
pdf(paste("../../Output/Transcriptomics/DESeq2/F1_juveniles/Plots_MeanSE/Downregulated_DEGs/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
}
}
# ==========================================================
#  F2s
# ==========================================================
rlogExp_F2_df        <- as.data.frame(assay(rlogExp_F2)) %>%
tibble::rownames_to_column("Gene.ID")
rlogExp_F2_DEGs      <- rlogExp_F2_df %>%
dplyr::filter(Gene.ID %in% topgenes.IDs_F2)
rlogExp_F2_DEGs_melt <- reshape2::melt(rlogExp_F2_DEGs, id.vars='Gene.ID') %>%
dplyr::rename(Sample.Name = variable, # to merge with 'Exp.metadata'
rlogExp = value) # the data to get mean SE values
DEGs_annotated_F2    <- Airr_Cvirg_annotation %>%
dplyr::filter(Airradians_TranscriptID %in% topgenes.IDs_F2) %>%
dplyr::select(Airradians_TranscriptID,blastxEval_CvirgProteinID) %>%
dplyr::rename(Gene.ID = Airradians_TranscriptID,
Protein.ID = blastxEval_CvirgProteinID)
rlogExp_F2_DEGs_annotated <- merge(DEGs_annotated_F2, rlogExp_F2_DEGs_melt, by = "Gene.ID")
rlogExp_F2_DEGs_MASTER    <- merge(rlogExp_F2_DEGs_annotated,Exp.metadata, by = "Sample.Name")
# library(stringr)
rlogExp_F2_DEGs_MEAN.SE   <- rlogExp_F2_DEGs_MASTER %>%
dplyr:::group_by(Gene.ID, Protein.ID,pCO2) %>%
dplyr::summarise(mean.rlogExp    = mean(rlogExp),
sd.rlogExp     = sd(rlogExp),
n = n(),
sderror.rlogExp = sd.rlogExp/(sqrt(n))) %>%
dplyr::select(-n) %>%
dplyr::mutate(Protein_contig = paste(substr(Protein.ID,1,30),
str_split(Gene.ID, "\\.", simplify=T)[,3],
sep="_"))
pd <- position_dodge(0.3)
for(i in 1:length(topgenes.IDs_F2)) {
geneID_loop  <- topgenes.IDs_F2[i]
df_loop      <- rlogExp_F2_DEGs_MEAN.SE %>%
dplyr::filter(Gene.ID %in% geneID_loop) %>%
dplyr::mutate(Protein_contig = str_remove_all(Protein_contig,"/"))
plot_loop    <- df_loop %>%
ggplot(aes(x=pCO2,
y=mean.rlogExp,
fill=pCO2)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.rlogExp-sderror.rlogExp,
ymax=mean.rlogExp+sderror.rlogExp),
colour="black",
width=.1,
position=pd) +
geom_point(size = 4,
shape=21,
position=pd) +
xlab("pCO2 treatment") +
ylab("") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("white",
"grey50")) +
ggtitle(df_loop[1,7]) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.ticks.length=unit(.25, "cm")) +
theme(legend.position = "none")
if(df_loop[1,4]>df_loop[2,4]) { # Upregulated, high pCO2 == high expression
pdf(paste("../../Output/Transcriptomics/DESeq2/F2_juveniles/Plots_MeanSE/Upregulated_DEGs/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
} else {
pdf(paste("../../Output/Transcriptomics/DESeq2/F2_juveniles/Plots_MeanSE/Downregulated_DEGs/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
}
}
ggplot(pcaData_vstExp_F2, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("F2 PCA: vst expression data") +
xlab(paste0("PC1: ", percentVar_vstExp_F2[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_vstExp_F2[2], "% variance")) +
coord_fixed()
ggplot(pcaData_rlogExp_F2, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("F2 PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar_rlogExp_F2[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_rlogExp_F2[2], "% variance")) +
coord_fixed()
p1pCO2 <- ggbiplot(pcaData_rlogExp_F2,
obs.scale = 1,
var.scale = 1,
groups = as.factor(pCO2),
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.67) +
scale_color_discrete(name = '') +  theme_classic() +   ggtitle("day1, pCO2") +
theme(legend.direction = 'horizontal',
legend.position = 'top')
?ggbiplot
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
p1pCO2 <- ggbiplot(pcaData_rlogExp_F2,
obs.scale = 1,
var.scale = 1,
groups = as.factor(pCO2),
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.67) +
scale_color_discrete(name = '') +  theme_classic() +   ggtitle("day1, pCO2") +
theme(legend.direction = 'horizontal',
legend.position = 'top')
pcaData_rlogExp_F2
phys_pca1   <- prcomp(pcaData_rlogExp_F2[,c(1:2)], # all numeric (phys + all modules) - PCA 1 = 0.4298  , PCA 2 0.1810   (cumulative 0.6108 )
center = TRUE,
scale. = TRUE)
phys_pca1
# PCA plot rlog
pcaData_rlogExp_F2    <- plotPCA(rlogExp_F2, intgroup = "pCO2", returnData = TRUE)
pcaData_rlogExp_F2
ggplot(pcaData_rlogExp_F2, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
stat_ellipse()
ggplot(pcaData_rlogExp_F2, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
stat_ellipse() +
theme(text = element_text(size=15)) +
ggtitle("F2 PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar_rlogExp_F2[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_rlogExp_F2[2], "% variance")) +
coord_fixed()
ggplot(pcaData_rlogExp_F2, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_point(size =3) +
theme_classic() +
stat_ellipse() +
# geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
# theme(text = element_text(size=15)) +
ggtitle("F2 PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar_rlogExp_F2[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_rlogExp_F2[2], "% variance")) +
coord_fixed()
ggplot(pcaData_rlogExp_F2, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
geom_point(size =3) +
theme_classic() +
stat_ellipse() +
# geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
# theme(text = element_text(size=15)) +
ggtitle("F2 PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar_rlogExp_F2[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_rlogExp_F2[2], "% variance")) +
coord_fixed()
ggplot(pcaData_rlogExp_F1, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
#scale_shape_manual(values = c(4, 19, 17)) +
#geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =3) +
theme_classic() +
stat_ellipse() +
#theme(text = element_text(size=15)) +
theme_classic() +
ggtitle("F1 PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar_rlogExp_F1[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_rlogExp_F1[2], "% variance")) +
coord_fixed()
EnhancedVolcano(DEGresults_F1,
lab = rownames(DEGresults_F1),
x = 'log2FoldChange',
y = 'padj',
title = 'F1s: pCO2 Treatment (Low v High)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 1,
pCutoff = 0.05,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
EnhancedVolcano(DEGresults_F2,
lab = rownames(DEGresults_F2),
x = 'log2FoldChange',
y = 'padj',
title = 'F2s: pCO2 Treatment (Low v High)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 1,
pCutoff = 0.05,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
EnhancedVolcano(DEGresults_F1,
lab = rownames(DEGresults_F1),
x = 'log2FoldChange',
y = 'padj',
title = 'F1s: pCO2 Treatment (Low v High)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 1,
pCutoff = 0.05,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
EnhancedVolcano(DEGresults_F2,
lab = rownames(DEGresults_F2),
x = 'log2FoldChange',
y = 'padj',
title = 'F2s: pCO2 Treatment (Low v High)',
subtitle = "DESeq2 - Differential expression",
FCcutoff = 1,
pCutoff = 0.05,
pointSize = 4.0,
labSize = 6.0,
colAlpha = 1,
legendPosition = 'right',
legendLabSize = 12,
legendIconSize = 4.0,
widthConnectors = 0.75)
