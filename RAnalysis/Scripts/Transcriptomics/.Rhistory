pdf(paste("../../Output/Transcriptomics/DESeq2/Plots_MeanSE/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
}
for(i in 1:length(topgenes.IDs)) {
geneID_loop  <- topgenes.IDs[i]
df_loop      <- rlogExp_DEGs_MEAN.SE %>%
dplyr::filter(Gene.ID %in% geneID_loop) %>%
dplyr::mutate(Protein_contig = str_remove_all(Protein_contig,"/"))
plot_loop    <- df_loop %>%
ggplot(aes(x=pCO2,
y=mean.rlogExp,
fill=pCO2)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.rlogExp-sderror.rlogExp,
ymax=mean.rlogExp+sderror.rlogExp),
colour="black",
width=.1,
position=pd) +
geom_point(size = 4,
shape=21,
position=pd) +
xlab("pCO2 treatment") +
ylab("") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("white",
"grey50")) +
ggtitle(df_loop[1,7]) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.ticks.length=unit(.25, "cm")) +
theme(legend.position = "none")
pdf(paste("../../Output/Transcriptomics/DESeq2/Plots_MeanSE/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
}
rlogExp_DEGs_MEAN.SE   <- rlogExp_DEGs_MASTER %>%
dplyr:::group_by(Gene.ID, Protein.ID,pCO2) %>%
dplyr::summarise(mean.rlogExp    = mean(rlogExp),
sd.rlogExp     = sd(rlogExp),
n = n(),
sderror.rlogExp = sd.rlogExp/(sqrt(n))) %>%
dplyr::select(-n) %>%
dplyr::mutate(Protein_contig = paste(substr(Protein.ID,1,30),
str_split(Gene.ID, "\\.", simplify=T)[,3],
sep="_"))
pd <- position_dodge(0.3)
for(i in 1:length(topgenes.IDs)) {
geneID_loop  <- topgenes.IDs[i]
df_loop      <- rlogExp_DEGs_MEAN.SE %>%
dplyr::filter(Gene.ID %in% geneID_loop) %>%
dplyr::mutate(Protein_contig = str_remove_all(Protein_contig,"/"))
plot_loop    <- df_loop %>%
ggplot(aes(x=pCO2,
y=mean.rlogExp,
fill=pCO2)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.rlogExp-sderror.rlogExp,
ymax=mean.rlogExp+sderror.rlogExp),
colour="black",
width=.1,
position=pd) +
geom_point(size = 4,
shape=21,
position=pd) +
xlab("pCO2 treatment") +
ylab("") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("white",
"grey50")) +
ggtitle(df_loop[1,7]) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.ticks.length=unit(.25, "cm")) +
theme(legend.position = "none")
pdf(paste("../../Output/Transcriptomics/DESeq2/Plots_MeanSE/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
}
for(i in 1:length(topgenes.IDs)) {
geneID_loop  <- topgenes.IDs[i]
df_loop      <- rlogExp_DEGs_MEAN.SE %>%
dplyr::filter(Gene.ID %in% geneID_loop) %>%
dplyr::mutate(Protein_contig = str_remove_all(Protein_contig,"/"))
plot_loop    <- df_loop %>%
ggplot(aes(x=pCO2,
y=mean.rlogExp,
fill=pCO2)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.rlogExp-sderror.rlogExp,
ymax=mean.rlogExp+sderror.rlogExp),
colour="black",
width=.1,
position=pd) +
geom_point(size = 4,
shape=21,
position=pd) +
xlab("pCO2 treatment") +
ylab("") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("white",
"grey50")) +
ggtitle(df_loop[1,7]) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.ticks.length=unit(.25, "cm")) +
theme(legend.position = "none")
pdf(paste("../../Output/Transcriptomics/DESeq2/Plots_MeanSE/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
}
df_loop
df_loop[1,4]
for(i in 1:length(topgenes.IDs)) {
geneID_loop  <- topgenes.IDs[i]
df_loop      <- rlogExp_DEGs_MEAN.SE %>%
dplyr::filter(Gene.ID %in% geneID_loop) %>%
dplyr::mutate(Protein_contig = str_remove_all(Protein_contig,"/"))
plot_loop    <- df_loop %>%
ggplot(aes(x=pCO2,
y=mean.rlogExp,
fill=pCO2)) +  # , colour=supp, group=supp))
theme_classic() +
geom_errorbar(aes(ymin=mean.rlogExp-sderror.rlogExp,
ymax=mean.rlogExp+sderror.rlogExp),
colour="black",
width=.1,
position=pd) +
geom_point(size = 4,
shape=21,
position=pd) +
xlab("pCO2 treatment") +
ylab("") +                 # note the mean was first by sample ID THEN by treatment
scale_fill_manual(values=c("white",
"grey50")) +
ggtitle(df_loop[1,7]) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
axis.ticks.length=unit(.25, "cm")) +
theme(legend.position = "none")
if(df_loop[1,4]>df_loop[2,4]) { # Upregulated, high pCO2 == high expression
pdf(paste("../../Output/Transcriptomics/DESeq2/Plots_MeanSE/Upregulated_DEGs/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
} else {
pdf(paste("../../Output/Transcriptomics/DESeq2/Plots_MeanSE/Downregulated_DEGs/",df_loop[1,7],".pdf", sep = ''), width=5, height=5)
print(plot_loop)
dev.off()
}
}
knitr::opts_chunk$set(echo = TRUE,
warning = FALSE,
message = FALSE,
cache = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis")
# load libraries - notes show the install command needed to install (pre installed)
library(DESeq2) # note: this was previously installed with the command `BiocManager::install("DESeq2")`
# load libraries - notes show the install command needed to install (pre installed)
library(DESeq2) # note: this was previously installed with the command `BiocManager::install("DESeq2")`
library(edgeR)
library(goseq)
library(dplyr)
library(GenomicFeatures)
library(data.table)
library(calibrate)
library(affycoretools) # note: this was previously installed with the BiocManager::install("affycoretools")
library(data.table)
library(vsn)
library(tidybulk)
### raw counts tables
raw_counts_matrix_annotation  <-
read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep=',',
header=TRUE) %>% dplyr::select(!c(Ai19, Ai3))
counts_matrix <-
data.frame(raw_counts_matrix_annotation[,-c(1,41:44)], #[,-c(1,39:42)] - if you run dplyr::select(!c(Ai19, Ai3)) above
row.names=raw_counts_matrix_annotation[,1])
### filtered counts tables 3CPM - format matrix after upload [from Count_Matrix_Stats.Filter.R]
filtered_counts_matrix_annotation  <-
read.csv(file="../../Output/Transcriptomics/Filtered_counts_matrix/filter_3cmpm50perc_WITH_ANNOTATION.csv",
sep=',',
header=TRUE)  %>% dplyr::select(!c(Ai19, Ai3))
counts_matrix <-
data.frame(filtered_counts_matrix_annotation[,-c(1,41:44)], # [,-c(1,39:42)] - if you run dplyr::select(!c(Ai19, Ai3)) above
row.names=filtered_counts_matrix_annotation[,1])
ncol(counts_matrix) # 39 samples
### experiment metadata [from Count_Matrix_Stats.Filter.R]  - convert characaters to factors for DESeq2
exp_data  <- read.csv(file="../../Data/Transcriptomics/exp.metadata.csv", sep=',', header=TRUE)
# ==========================================================
#  FULL MODEL ==  design = ~ pCO2
# ========================================================== #
#####
Exp.metadata       <- exp_data %>%
dplyr::select(c('SampleName_readmatrix', 'pCO2')) %>%
dplyr::rename(Sample.Name = SampleName_readmatrix) %>% # coondense dataset to build target matrix
dplyr::filter(Sample.Name %in% colnames(counts_matrix))
Exp.metadata.df    <- data.frame(Exp.metadata[,-1], row.names=Exp.metadata[,1]) # move Sample.Name column as row names
Exp.metadata.mtx   <- as.matrix(Exp.metadata.df, row.names="BayScallop.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
Exp.metadata.mtx_2 <- as.data.frame(Exp.metadata.mtx[match(colnames(counts_matrix),rownames(Exp.metadata.mtx)), ]) %>% rename(pCO2 = 1)
all(rownames(Exp.metadata.mtx_2) %in% colnames(counts_matrix)) # should be TRUE
all(rownames(Exp.metadata.mtx_2) == colnames(counts_matrix)) # should be TRUE
# build dds
dds <- DESeqDataSetFromMatrix(countData = counts_matrix,
colData = Exp.metadata.mtx_2,
design = ~pCO2) # DESeq Data Set (dds) - design as ~Primary_Treatment
# build dds
dds <- DESeqDataSetFromMatrix(countData = counts_matrix,
colData = Exp.metadata.mtx_2,
design = ~pCO2) # DESeq Data Set (dds) - design as ~Primary_Treatment
counts_matrix
Exp.metadata.mtx_2
# ==========================================================
#  FULL MODEL ==  design = ~ pCO2
# ========================================================== #
#####
Exp.metadata       <- exp_data %>%
dplyr::select(c('SampleName_readmatrix', 'pCO2')) %>%
dplyr::rename(Sample.Name = SampleName_readmatrix) %>% # coondense dataset to build target matrix
dplyr::filter(Sample.Name %in% colnames(counts_matrix))
Exp.metadata.df    <- data.frame(Exp.metadata[,-1], row.names=Exp.metadata[,1]) # move Sample.Name column as row names
Exp.metadata.mtx   <- as.matrix(Exp.metadata.df, row.names="BayScallop.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
Exp.metadata.mtx_2 <- as.data.frame(Exp.metadata.mtx[match(colnames(counts_matrix),rownames(Exp.metadata.mtx)), ]) %>% rename(pCO2 = 1)
all(rownames(Exp.metadata.mtx_2) %in% colnames(counts_matrix)) # should be TRUE
colnames(counts_matrix)
filtered_counts_matrix_annotation
counts_matrix <-
data.frame(filtered_counts_matrix_annotation[,-c(1,41:44)], # [,-c(1,39:42)] - if you run dplyr::select(!c(Ai19, Ai3)) above
row.names=filtered_counts_matrix_annotation[,1])
counts_matrix
counts_matrix <-
data.frame(filtered_counts_matrix_annotation[,c(1,41:44)], # [,-c(1,39:42)] - if you run dplyr::select(!c(Ai19, Ai3)) above
row.names=filtered_counts_matrix_annotation[,1])
### raw counts tables
raw_counts_matrix_annotation  <-
read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep=',',
header=TRUE) %>% dplyr::select(!c(Ai19, Ai3))
### raw counts tables
raw_counts_matrix_annotation  <-
read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep=',',
header=TRUE) %>% dplyr::select(!c(Ai19, Ai3))
counts_matrix <-
data.frame(raw_counts_matrix_annotation[,-c(1,39:42)], # [,-c(1,41:44)] if you do not run dplyr::select(!c(Ai19, Ai3))
row.names=raw_counts_matrix_annotation[,1])
### filtered counts tables 3CPM - format matrix after upload [from Count_Matrix_Stats.Filter.R]
filtered_counts_matrix_annotation  <-
read.csv(file="../../Output/Transcriptomics/Filtered_counts_matrix/filter_3cmpm50perc_WITH_ANNOTATION.csv",
sep=',',
header=TRUE)  %>% dplyr::select(!c(Ai19, Ai3))
counts_matrix <-
data.frame(filtered_counts_matrix_annotation[,-c(1,39:42)], # [,-c(1,41:44)] if you do not run above dplyr::select(!c(Ai19, Ai3))
row.names=filtered_counts_matrix_annotation[,1])
counts_matrix
ncol(counts_matrix) # 39 samples
### experiment metadata [from Count_Matrix_Stats.Filter.R]  - convert characaters to factors for DESeq2
exp_data  <- read.csv(file="../../Data/Transcriptomics/exp.metadata.csv", sep=',', header=TRUE)
# ==========================================================
#  FULL MODEL ==  design = ~ pCO2
# ========================================================== #
#####
Exp.metadata       <- exp_data %>%
dplyr::select(c('SampleName_readmatrix', 'pCO2')) %>%
dplyr::rename(Sample.Name = SampleName_readmatrix) %>% # coondense dataset to build target matrix
dplyr::filter(Sample.Name %in% colnames(counts_matrix))
Exp.metadata.df    <- data.frame(Exp.metadata[,-1], row.names=Exp.metadata[,1]) # move Sample.Name column as row names
Exp.metadata.mtx   <- as.matrix(Exp.metadata.df, row.names="BayScallop.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
Exp.metadata.mtx_2 <- as.data.frame(Exp.metadata.mtx[match(colnames(counts_matrix),rownames(Exp.metadata.mtx)), ]) %>% rename(pCO2 = 1)
all(rownames(Exp.metadata.mtx_2) %in% colnames(counts_matrix)) # should be TRUE
all(rownames(Exp.metadata.mtx_2) == colnames(counts_matrix)) # should be TRUE
# build dds
dds <- DESeqDataSetFromMatrix(countData = counts_matrix,
colData = Exp.metadata.mtx_2,
design = ~pCO2) # DESeq Data Set (dds) - design as ~Primary_Treatment
vstExp  <- vst(dds)
hist(assay(vstExp)) # view histogram
meanSdPlot(assay(vstExp)) # shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
plotPCA
pcaData_rlogExp    <- plotPCA(rlogExp, intgroup = "pCO2", returnData = TRUE)
rlogExp <- rlogTransformation(dds)
pcaData_rlogExp    <- plotPCA(rlogExp, intgroup = "pCO2", returnData = TRUE)
percentVar_rlogExp <- round(100 * attr(pcaData_rlogExp, "percentVar"))
ggplot(pcaData_rlogExp, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar_rlogExp[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_rlogExp[2], "% variance")) +
coord_fixed()
# Plotting
library(ggplot2)
ggplot(pcaData_rlogExp, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar_rlogExp[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_rlogExp[2], "% variance")) +
coord_fixed()
all(rownames(Exp.metadata.mtx_2) %in% colnames(counts_matrix)) # should be TRUE
all(rownames(Exp.metadata.mtx_2) == colnames(counts_matrix)) # should be TRUE
ncol(counts_matrix) # 39 samples
### raw counts tables
raw_counts_matrix_annotation  <-
read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep=',',
header=TRUE) %>% dplyr::select(!c(Ai19, Ai3))
### raw counts tables
raw_counts_matrix_annotation  <-
read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep=',',
header=TRUE) %>% dplyr::select(!c(Ai19, Ai3))
counts_matrix <-
data.frame(raw_counts_matrix_annotation[,-c(1,39:42)], # [,-c(1,41:44)] if you do not run dplyr::select(!c(Ai19, Ai3))
row.names=raw_counts_matrix_annotation[,1])
ncol(counts_matrix) # 39 samples
### experiment metadata [from Count_Matrix_Stats.Filter.R]  - convert characaters to factors for DESeq2
exp_data  <- read.csv(file="../../Data/Transcriptomics/exp.metadata.csv", sep=',', header=TRUE)
# ==========================================================
#  FULL MODEL ==  design = ~ pCO2
# ========================================================== #
#####
Exp.metadata       <- exp_data %>%
dplyr::select(c('SampleName_readmatrix', 'pCO2')) %>%
dplyr::rename(Sample.Name = SampleName_readmatrix) %>% # coondense dataset to build target matrix
dplyr::filter(Sample.Name %in% colnames(counts_matrix))
Exp.metadata.df    <- data.frame(Exp.metadata[,-1], row.names=Exp.metadata[,1]) # move Sample.Name column as row names
Exp.metadata.mtx   <- as.matrix(Exp.metadata.df, row.names="BayScallop.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
Exp.metadata.mtx_2 <- as.data.frame(Exp.metadata.mtx[match(colnames(counts_matrix),rownames(Exp.metadata.mtx)), ]) %>% rename(pCO2 = 1)
all(rownames(Exp.metadata.mtx_2) %in% colnames(counts_matrix)) # should be TRUE
all(rownames(Exp.metadata.mtx_2) == colnames(counts_matrix)) # should be TRUE
# build dds
dds <- DESeqDataSetFromMatrix(countData = counts_matrix,
colData = Exp.metadata.mtx_2,
design = ~pCO2) # DESeq Data Set (dds) - design as ~Primary_Treatment
vstExp  <- vst(dds)
meanSdPlot(assay(vstExp)) # shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
### raw counts tables
raw_counts_matrix_annotation  <-
read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep=',',
header=TRUE) %>% dplyr::select(!c(Ai19, Ai3))
raw_counts_matrix_annotation[,c(1,39:42)]
counts_matrix <-
data.frame(raw_counts_matrix_annotation[,-c(1,39:42)], # [,-c(1,41:44)] if you do not run dplyr::select(!c(Ai19, Ai3))
row.names=raw_counts_matrix_annotation[,1])
counts_matrix
rlogExp <- rlogTransformation(dds)
meanSdPlot(assay(rlogExp)) # shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
pcaData_rlogExp    <- plotPCA(rlogExp, intgroup = "pCO2", returnData = TRUE)
percentVar_rlogExp <- round(100 * attr(pcaData_rlogExp, "percentVar"))
ggplot(pcaData_rlogExp, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar_rlogExp[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_rlogExp[2], "% variance")) +
coord_fixed()
### raw counts tables
raw_counts_matrix_annotation  <-
read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep=',',
header=TRUE) #%>% dplyr::select(!c(Ai19, Ai3))
counts_matrix <-
data.frame(raw_counts_matrix_annotation[,-c(1,41:44)], # [,-c(1,39:42)] if you  run dplyr::select(!c(Ai19, Ai3))
row.names=raw_counts_matrix_annotation[,1])
ncol(counts_matrix) # 39 samples
### experiment metadata [from Count_Matrix_Stats.Filter.R]  - convert characaters to factors for DESeq2
exp_data  <- read.csv(file="../../Data/Transcriptomics/exp.metadata.csv", sep=',', header=TRUE)
# ==========================================================
#  FULL MODEL ==  design = ~ pCO2
# ========================================================== #
#####
Exp.metadata       <- exp_data %>%
dplyr::select(c('SampleName_readmatrix', 'pCO2')) %>%
dplyr::rename(Sample.Name = SampleName_readmatrix) %>% # coondense dataset to build target matrix
dplyr::filter(Sample.Name %in% colnames(counts_matrix))
Exp.metadata.df    <- data.frame(Exp.metadata[,-1], row.names=Exp.metadata[,1]) # move Sample.Name column as row names
Exp.metadata.mtx   <- as.matrix(Exp.metadata.df, row.names="BayScallop.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
Exp.metadata.mtx_2 <- as.data.frame(Exp.metadata.mtx[match(colnames(counts_matrix),rownames(Exp.metadata.mtx)), ]) %>% rename(pCO2 = 1)
all(rownames(Exp.metadata.mtx_2) %in% colnames(counts_matrix)) # should be TRUE
all(rownames(Exp.metadata.mtx_2) == colnames(counts_matrix)) # should be TRUE
# build dds
dds <- DESeqDataSetFromMatrix(countData = counts_matrix,
colData = Exp.metadata.mtx_2,
design = ~pCO2) # DESeq Data Set (dds) - design as ~Primary_Treatment
vstExp  <- vst(dds)
meanSdPlot(assay(vstExp)) # shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
pcaData_vstExp    <- plotPCA(vstExp, intgroup = "pCO2", returnData = TRUE)
percentVar_vstExp <- round(100 * attr(pcaData_vstExp, "percentVar"))
ggplot(pcaData_vstExp, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("PCA: vst expression data") +
xlab(paste0("PC1: ", percentVar_vstExp[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_vstExp[2], "% variance")) +
coord_fixed()
rlogExp <- rlogTransformation(dds)
meanSdPlot(assay(rlogExp)) # shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
pcaData_rlogExp    <- plotPCA(rlogExp, intgroup = "pCO2", returnData = TRUE)
percentVar_rlogExp <- round(100 * attr(pcaData_rlogExp, "percentVar"))
ggplot(pcaData_rlogExp, aes(x = PC1, y = PC2, color = pCO2, label=name)) +
scale_shape_manual(values = c(4, 19, 17)) +
geom_text(aes(label=name),hjust=0.2, vjust=1.4, size=5) +
geom_point(size =6) +
theme_classic() +
theme(text = element_text(size=15)) +
ggtitle("PCA: rlog expression data") +
xlab(paste0("PC1: ", percentVar_rlogExp[1], "% variance")) +
ylab(paste0("PC2: ", percentVar_rlogExp[2], "% variance")) +
coord_fixed()
hist(assay(rlogExp)) # view histogram
dds.run <- DESeq(dds) # wait for this to complete....
meanSdPlot(assay(rlogExp)) # shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
rlogExp <- rlogTransformation(dds.run)
meanSdPlot(assay(rlogExp)) # shows the sd y axis (sq root of varaince in all samples) - flat curve may seem like a goals, BUT may be unreasonable in cases with MANY true DEGs from experimental conditions
# Exxplore the 'dds.run' model
resprimary         <- results(dds.run, contrast=c("pCO2", "High", "Low"), alpha = 0.05) # FDR is the alpha 0.05
numDEGs_padj       <- data.frame(table(resprimary$padj<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
numDEGs_pval       <- data.frame(table(resprimary$pvalue<0.05))[2,2] # DEGs - NOT considering LFC - just p adj
resprimary.ordered <- resprimary[order(resprimary$padj), ] # Order by adjusted p-value
num.UpReg          <- sum((resprimary.ordered$log2FoldChange[1:numDEGs_padj] > 0) == TRUE) #  LFC >= 1
num.DownReg        <- sum((resprimary.ordered$log2FoldChange[1:numDEGs_padj] < 0) == TRUE) # LFC >= 1
total              <- sum(num.DownReg,num.UpReg) # sum of DEGs with the criteria pdj < 0.05 + LFC>1 (< -1)
total
# Write results - covert to as.data.frame for the ordered results
resdata.primary           <- merge(as.data.frame(resprimary.ordered),
as.data.frame(counts(dds.run, normalized=TRUE)),
by="row.names",
sort=FALSE) ## Merge with normalized count data
names(resdata.primary)[1] <- "Gene"
resdata.primary           <- resdata.primary[order(resdata.primary$padj), ] # Order by adjusted p-value
write.csv(resdata.primary, "../../Output/Transcriptomics/DESeq2/DESeq2results.csv") # write
# What are the Protein names of these DEGs?
# first gather gene IDs for the DEGs (note: this is also used for the pheatmap in the transformed Exp heatmap)
numDEGs_padj # 54 - number of DEGs (from above) - use as integer in call below
topgenes.IDs <- head(rownames(resprimary.ordered),numDEGs_padj) # call gene IDs for DEGs: pdj < 0.05 FDR < 0.05
length(topgenes.IDs) == numDEGs_padj # must be TRUE
# now load in the annotated csv
Airr_Cvirg_annotation <- read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep = ',',
header = T) %>%
dplyr::select(c('Airradians_TranscriptID',
"blastxEval_CvirgTranscriptID",
"blastxEval_CvirgProteinID",
"blastxEval_CvirgGeneID",
"blastxEval_CvirgGOterms"))
# DEGs Protein IDs - lets take a look shall we!
DEGs_annotated <- Airr_Cvirg_annotation %>% filter(Airradians_TranscriptID %in% topgenes.IDs)
nrow(DEGs_annotated) # 52 - all are present!
View(DEGs_annotated)
topgenes.IDs
resdata.primary
resdata.primary           <- resdata.primary[order(resdata.primary$padj), ] # Order by adjusted p-value
resdata.primary
# Write results - covert to as.data.frame for the ordered results
resdata.primary           <- merge(as.data.frame(resprimary.ordered),
as.data.frame(counts(dds.run, normalized=TRUE)),
by="row.names",
sort=FALSE) %>% ## Merge with normalized count data
dplyr::rename(Airradians_TranscriptID = Gene)
# Write results - covert to as.data.frame for the ordered results
resdata.primary           <- merge(as.data.frame(resprimary.ordered),
as.data.frame(counts(dds.run, normalized=TRUE)),
by="row.names",
sort=FALSE) ## Merge with normalized count data
names(resdata.primary)[1] <- "Airradians_TranscriptID"
resdata.primary           <- resdata.primary[order(resdata.primary$padj), ]  # Order by adjusted p-value
Airr_Cvirg_annotation <- read.csv(file="../../Output/Transcriptomics/Raw_counts_matrix/raw_count_matrix_WITH_ANNOTATION.csv",
sep = ',',
header = T) %>%
dplyr::select(c('Airradians_TranscriptID',
"blastxEval_CvirgTranscriptID",
"blastxEval_CvirgProteinID",
"blastxEval_CvirgGeneID",
"blastxEval_CvirgGOterms"))
merge(resdata.primary, Airr_Cvirg_annotation, by = 'Airradians_TranscriptID')
Airr_Cvirg_annotation
resdata.primary
# Write results - covert to as.data.frame for the ordered results
resdata.primary           <- merge(as.data.frame(resprimary.ordered),
as.data.frame(counts(dds.run, normalized=TRUE)),
by="row.names",
sort=FALSE) ## Merge with normalized count data
names(resdata.primary)[1] <- "Airradians_TranscriptID"
resdata.primary.annot     <- merge(resdata.primary, Airr_Cvirg_annotation, by = 'Airradians_TranscriptID')
resdata.primary.annot     <- resdata.primary.annot[order(resdata.primary.annot$padj), ]  # Order by adjusted p-value
resdata.primary.annot
# Write results - covert to as.data.frame for the ordered results
resdata.primary           <- merge(as.data.frame(resprimary.ordered),
as.data.frame(counts(dds.run, normalized=TRUE)),
by="row.names",
sort=FALSE) ## Merge with normalized count data
names(resdata.primary)[1] <- "Airradians_TranscriptID"
resdata.primary.annot     <- merge(Airr_Cvirg_annotation,resdata.primary, by = 'Airradians_TranscriptID')
resdata.primary.annot     <- resdata.primary.annot[order(resdata.primary.annot$padj), ]  # Order by adjusted p-value
write.csv(resdata.primary, "../../Output/Transcriptomics/DESeq2/DESeq2results.csv") # write
resdata.primary
write.csv(resdata.primary.annot, "../../Output/Transcriptomics/DESeq2/DESeq2results.csv") # write
