FINAL_TABLE                <- FINAL_TABLE[,-1] # view table
FINAL_TABLE %>%
kbl(caption = "Table 1. Seawater chemistry") %>%
kable_classic(full_width = T, html_font = "Cambria")
carbchem.MASTER_long
unique(carbchem.MASTER_long$Date)
unique(carbchem.MASTER_long$Date)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(reshape2)
library(knitr)
library(kableExtra)
library(car)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/") # personal computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
chem_larvae <- read.csv(file="Data/Chemistry/F1/cumulative_raw/F1_water_chemistry_raw_larvae.csv", header=TRUE) # load the chem data
chem_spat.adult <- read.csv(file="Data/Chemistry/F1/cumulative_raw/F1_water_chemistry_raw.csv", header=TRUE) # load the chem data
ncol(chem_larvae) == ncol(chem_spat.adult) # TRUE - same spreadsheet
colnames(chem_larvae) == colnames(chem_spat.adult) # TRUE - also the same
chem.MASTER <- rbind(chem_larvae, chem_spat.adult)
carbchem                <- chem.MASTER[!(is.na(chem.MASTER$War_out_DIC_pH)),]
carbchem.flagged.DIC.TA <- subset(carbchem, (TCO2_mmol_kgSW > TA_mmol_kgSW)) # 13 rows flagged for DIC<TA
carbchem.flagged.odd    <- subset(carbchem, War_out_DIC_pH > 400) # 8 w/ high aragonite, next highest is 2.05
write.csv((rbind(carbchem.flagged.DIC.TA, carbchem.flagged.odd)), "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/SeawaterChemistry/F1s/flagged_data.csv")
carbchem.MASTER         <- subset(carbchem, !(TCO2_mmol_kgSW > TA_mmol_kgSW)) %>% # DIC>TA omit
dplyr::filter(War_out_DIC_pH < 3) %>% # omit these odd aragonite points
dplyr::mutate(pCO2_treatment =
case_when(Treatment == 8 ~ 'Low',
Treatment == 7.5 ~ 'Moderate',
Treatment == 7 ~ 'Severe'))
write.csv(carbchem.MASTER, "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/SeawaterChemistry/F1s/master/CarbChem_master.csv")
```{r plotting}
# change to long format to properly facet
carbchem.MASTER_long <- carbchem.MASTER %>%
dplyr::select(!c(Treatment,Replicate)) %>%
melt(id.vars=c('Date', 'Type', 'pCO2_treatment'))
carbchem.MASTER_long$value <- as.numeric(carbchem.MASTER_long$value) # make numeric
# aquire means by group for mean SE plotting by Date and treamtent
carbchem.MASTER_MEANS <- carbchem.MASTER_long %>% # calc means and standard error
na.omit() %>%
dplyr::group_by(Date, Type, pCO2_treatment, variable) %>%
dplyr::summarise(mean = mean(value),
sd   = sd(value),
se   = sd/(sqrt(n())) )
# plot em!
colnames(carbchem.MASTER) # target select
pd <- position_dodge(0.1) # adjust the jitter for the different treatments
Larvae <- carbchem.MASTER_MEANS %>%
dplyr::filter(Type %in% 'Larvae') %>%
dplyr::filter(variable %in% (c('Temperature_bucket_C',
'Salinity',
'DO_mg_l',
'pH',
'pH_out',
'TCO2_mmol_kgSW',
'TA_mmol_kgSW',
'War_out_DIC_pH',
'Wca_out'))) %>%
ggplot(aes(x=Date, y=mean, shape=Type, colour=factor(pCO2_treatment))) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
scale_colour_manual(values = c("Low" = "green",
"Moderate"="orange",
"Severe" = "purple")) +
theme_classic() +
geom_point(position=pd, size=2) +
theme(axis.text.x = element_text(angle = 45, hjust=1, size = 5)) +
#scale_y_continuous(expand = c(0, 0), limits = c(0, 300000)) +
facet_wrap(~variable, scales = "free")
print(Larvae)
carbchem.MASTER_MEANS <- carbchem.MASTER_long %>% # calc means and standard error
na.omit() %>%
dplyr::group_by(Date, Type, pCO2_treatment, variable) %>%
dplyr::summarise(mean = mean(value),
sd   = sd(value),
se   = sd/(sqrt(n())) )
chem_meanDate <- carbchem.MASTER_MEANS %>%
na.omit() %>%
dplyr::group_by(pCO2_treatment, variable) %>%
dplyr::summarise(mean2 = mean(mean),
sd   = sd(mean),
se   = sd/(sqrt(n())) ,
n = n())
carbchem.MASTER_wideMEANS <- dcast(chem_meanDate, pCO2_treatment ~ variable, value.var="mean2")
carbchem.MASTER_wideStErr <- dcast(chem_meanDate, pCO2_treatment ~ variable, value.var="se")
carbchem.MASTER_wideN     <- dcast(chem_meanDate, pCO2_treatment ~ variable, value.var="n")
carbchem.MASTER_MEANS
carbchem.MASTER_long
carbchem.MASTER
# NOTE (as of 1/28/2022): 9/28/2021 DIC data is reversed between 7.5 and 8 buckets - need to ping the team to fix
# LOAD PACKAGES
library(dplyr)
library(ggplot2)
library(kableExtra)
library(data.table)
library(stringr)
library(latex2exp)
library(Rmisc)
library(kableExtra)
library(ggpubr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # personal computer
#  setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis") # Work computer
# LOAD & FORMAT THE DATA
# All data  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
chem    <- data.frame(read.csv(file="Data/Seawater_chemistry/Water_Chemistry_Scallops_2021.csv", header=T, sep = '\t')) %>%
dplyr::filter(!X  %in% c('Checking the system', 'RESPO', 'Tank Farm', 'Blue bucket check')) # %>%  # ommit all occurances of 'checks' of the system
# dplyr::rename(Date = Ã¯..Date)
chem$Date <- as.factor(gsub("/2021.*","", chem$Date))
# FOOD  OA CHALLENGE ONLY  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# foodxOAchem    <- data.frame(read.csv(file="Data/Seawater_chemistry/Water_Chemistry_FoodxOA_Challenge.csv", header=T))[,c(1:20)] %>%
#   dplyr::filter(!(Date %in% "10/12/2021" & Food.Treatment %in% 'Low')) %>% # omit 10/12/2021 measurements for the 'Low' Food treatment (check notebook, I think CO2 turned off overnight?)
#   dplyr::filter(!X %in% 'checking the system') %>%  # ommit all occurances of 'checks' of the system
#   na.omit()
CarbChemfoodxOAchem    <- data.frame(read.csv(file="Data/Seawater_chemistry/MasterTable_FoodxOA.csv", header=T)) %>%
dplyr::filter(!Date %in% '9/24/2021') # two measurements on 9/24 for static depuration buckets - omit for our analysis
CarbChemfoodxOAchem
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
library(ggplot2)
library(stringr)
# SET WORKING DIRECTORY AND OUTPUT PATH :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = 'C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis')
path.p    <- "Data/Physiology/Respiration" #the location of all your respirometry files
folder.names           <- basename(list.files(path = path.p, pattern = "202", recursive = FALSE)) #list all csv file names in the folder and subfolders - all data in directories by YYYMMDD - data recorded in year 2021-2023
folder.names.table     <- data.frame(folder.names) # you see we have many data directories! each with resp data as .csv or .txt depending on resens or loligo data
folder.names.table    <- folder.names.table[15,] # 20230223 - we will call this directroy for this workflow example
file.names.table      <- data.frame(txt.files = # call a data frame with a list of all text files wihtin the folder.names.table (only 20230223)
(basename(
list.files(
path = paste(path.p,'/',folder.names.table ,sep=''), # "Data/Physiology/Respiration/20230223"
pattern = "txt$", recursive = TRUE))))  %>%  # list all text files - run here up and see this also contains the txt files WIHTOUT the 'raw' in the title - we DO NOT want these!
dplyr::filter(grepl('raw', txt.files))  # only call the txt files with 'raw' in the title
file.names.table
# take a look at the file  - we have three .txt files in 20230223 directroy
# txt.files
# 1 run_1_raw.txt
# 2 run_2_raw.txt
# 3 run_3_raw.txt
folder.names.table # our existing directroy 20230223 where the three runs in txt format are stored
file.names.table[1,1] # this calls the first row of the first columns in file.names.table as "run_1_raw.txt" - remember this is the exact name of the file!
# lets paste these parameters into our file name to call 'run_1_raw.txt'
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.names.table[1,1], sep=''), # call out path by stringing together known directories and filename
header = TRUE, # yes there is aheader here that we want to retain (column names!)
skip = 37,  # the raw loligo data has undesired metadata in the first 37 rows! thus we will skip this in order have the correct headers and data called downstream
fileEncoding= "windows-1252") #reads in the data files correctly in their raw format
# head(Resp.Data)
for(m in 1:nrow(file.names.table)) { # the following is ONLY structured for LiLigo data in txt format!
file.name <- file.names.table[m,1] # CHANGE HERE TO file.names.table[1,1] IF YOU WNAT TO RUN LINE BY LINE!!!
# read the file name one by one - runs the WHOLE loop with the first then the second and so on
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252") #reads in the data files one  by one first by 'm' as row 1 in file.names.table[m,1], second by 'm' as second row and so on!
# Data data
# reformat the raw date and call the seconds and minutes timestamp!
# raw format is "2/23/2023/11:52:07 AM" containing a lot of info but we need to parse and concvert for it to be meaningful
Resp.Data$date      <- paste((sub("2023.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2023', sep='') #  date - use 'sub' to call everything before 2023, add back 2023 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2023/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
# assign the remaining parameters
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])    # seconds as a time series where the first tow is now 0 and each substracted from that initial value
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60 # convert to minutes
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1]) # call the temperature data - the dsaem for each channel - this here from CH1
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10 # call the barometric pressure data - this was input manually before we started - we need this data to convert from air saturation to mg/L O2
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1]) # call the salinity - again this was input manually at the start of the experiment
Resp.Data           <- Resp.Data %>% # use 'dplyr'
#dplyr::filter(!Phase %in% 'Flush') %>% # remove the initial rows labeled flush
dplyr::select(c(date, seconds, minutes, contains(".O2...air.sat")))  # all target oxygen conuptiondata is labelled .O2...air.sat - call all these data (8 channels in the loligo system!)
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,3) # clean these column names to make things easier - firs all columns 4 and therafter.. sorted their column name as the first 3 characters (i.e. CH1, CH2, etc.)
# We have data every second - this is comutationally intensize and redundant
# truncate the data to every 15 sceonds
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15), ]
# lets plot!
date.plot  <- folder.names.table # the directroy timestamp as 20230223
run.plot   <- gsub("_raw.*","", file.name) # the looped run!
plot_title <- paste(date.plot, run.plot, sep = '_') # the title merging these two parameters as date_runn.umber
PLOT <- Resp.Data_15sec %>% # plote pipeline
# before we plot we need to convert the data from air saturation to mg/L O2!
dplyr::select(-c('date', 'seconds')) %>%  # select out the data we do not need- the date and seconds columns (we ONLY want columns contianing data and the minutes timestamp)
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "air.sat") %>% # melt the data from wide foramnt (channels as columns each with data) to long (one column with data, addition column to designate channel IDs)
dplyr::filter(!air.sat  %in% 'NaN') %>% # omit NAs in this data
dplyr::mutate(mg.L.min =   (DO.unit.convert(as.numeric(air.sat),  # use teh presens package DO.unit.convert to convert air saturation to mg/L, inputs several of the constants we called earlier!
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))) %>%
ggplot(aes(x = minutes , y = mg.L.min)) + # plot simple regression
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) + # call a loess curve
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) + # name y axis
xlab("minutes") + # name the x axis
geom_point() +
ggtitle(plot_title) + # insert the title we called earlier based on the loop file name and date directroy
facet_wrap(~channel) # wrap by channel ID column - creates separte plots for each channel
print(PLOT) # view!
# D. output the plot in RAnalysis\Output\Respiration\workflow_example\plots_raw
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/plots_raw/",folder.names.table,"_", sub("_raw.*","",file.name),"_regression.pdf"), width=10, height=12)
print(PLOT)
dev.off()
}
for(m in 1:nrow(file.names.table)) { # the following is ONLY structured for LiLigo data in txt format!
file.name <- file.names.table[m,1] # CHANGE HERE TO file.names.table[1,1] IF YOU WNAT TO RUN LINE BY LINE!!!
# read the file name one by one - runs the WHOLE loop with the first then the second and so on
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252") #reads in the data files one  by one first by 'm' as row 1 in file.names.table[m,1], second by 'm' as second row and so on!
# Data data
# reformat the raw date and call the seconds and minutes timestamp!
# raw format is "2/23/2023/11:52:07 AM" containing a lot of info but we need to parse and concvert for it to be meaningful
Resp.Data$date      <- paste((sub("2023.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2023', sep='') #  date - use 'sub' to call everything before 2023, add back 2023 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2023/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
# assign the remaining parameters
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])    # seconds as a time series where the first tow is now 0 and each substracted from that initial value
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60 # convert to minutes
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1]) # call the temperature data - the dsaem for each channel - this here from CH1
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10 # call the barometric pressure data - this was input manually before we started - we need this data to convert from air saturation to mg/L O2
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1]) # call the salinity - again this was input manually at the start of the experiment
Resp.Data           <- Resp.Data %>% # use 'dplyr'
#dplyr::filter(!Phase %in% 'Flush') %>% # remove the initial rows labeled flush
dplyr::select(c(date, seconds, minutes, contains(".O2...air.sat")))  # all target oxygen conuptiondata is labelled .O2...air.sat - call all these data (8 channels in the loligo system!)
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,3) # clean these column names to make things easier - firs all columns 4 and therafter.. sorted their column name as the first 3 characters (i.e. CH1, CH2, etc.)
# We have data every second - this is comutationally intensize and redundant
# truncate the data to every 15 sceonds
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15), ]
# lets plot!
date.plot  <- folder.names.table # the directroy timestamp as 20230223
run.plot   <- gsub("_raw.*","", file.name) # the looped run!
plot_title <- paste(date.plot, run.plot, sep = '_') # the title merging these two parameters as date_runn.umber
PLOT <- Resp.Data_15sec %>% # plote pipeline
# before we plot we need to convert the data from air saturation to mg/L O2!
dplyr::select(-c('date', 'seconds')) %>%  # select out the data we do not need- the date and seconds columns (we ONLY want columns contianing data and the minutes timestamp)
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "air.sat") %>% # melt the data from wide foramnt (channels as columns each with data) to long (one column with data, addition column to designate channel IDs)
dplyr::filter(!air.sat  %in% 'NaN') %>% # omit NAs in this data
dplyr::mutate(mg.L.min =   (DO.unit.convert(as.numeric(air.sat),  # use teh presens package DO.unit.convert to convert air saturation to mg/L, inputs several of the constants we called earlier!
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))) %>%
ggplot(aes(x = minutes , y = mg.L.min)) + # plot simple regression
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) + # call a loess curve
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) + # name y axis
xlab("minutes") + # name the x axis
geom_point() +
ggtitle(plot_title) + # insert the title we called earlier based on the loop file name and date directroy
facet_wrap(~channel) # wrap by channel ID column - creates separte plots for each channel
print(PLOT) # view!
# D. output the plot in RAnalysis\Output\Respiration\workflow_example\plots_raw
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/plots_raw/",folder.names.table,"_", sub("_raw.*","",file.name),"_regression.pdf"), width=10, height=12)
print(PLOT)
dev.off()
}
PLOT <- Resp.Data_15sec %>% # plote pipeline
# before we plot we need to convert the data from air saturation to mg/L O2!
dplyr::select(-c('date', 'seconds')) %>%  # select out the data we do not need- the date and seconds columns (we ONLY want columns contianing data and the minutes timestamp)
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "air.sat") %>% # melt the data from wide foramnt (channels as columns each with data) to long (one column with data, addition column to designate channel IDs)
dplyr::filter(!air.sat  %in% 'NaN') %>% # omit NAs in this data
dplyr::mutate(mg.L.min =   (DO.unit.convert(as.numeric(air.sat),  # use teh presens package DO.unit.convert to convert air saturation to mg/L, inputs several of the constants we called earlier!
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))) %>%
ggplot(aes(x = minutes , y = mg.L.min)) + # plot simple regression
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) + # call a loess curve
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) + # name y axis
xlab("minutes") + # name the x axis
geom_point() +
ggtitle(plot_title) + # insert the title we called earlier based on the loop file name and date directroy
facet_wrap(~channel) # wrap by channel ID column - creates separte plots for each channel
file.name <- file.names.table[m,1] # CHANGE HERE TO file.names.table[1,1] IF YOU WNAT TO RUN LINE BY LINE!!!
# read the file name one by one - runs the WHOLE loop with the first then the second and so on
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252") #reads in the data files one  by one first by 'm' as row 1 in file.names.table[m,1], second by 'm' as second row and so on!
paste(path.p,'/',folder.names.table, '/', file.name, sep='')
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(devtools) # devtools::install_github # use devtools to instlal github link
library(LoLinR) # install_github('colin-olito/LoLinR') # install LoLinR from github
library(dplyr)
library(lubridate)
library(rMR)
library(ggplot2)
library(stringr)
# SET WORKING DIRECTORY AND OUTPUT PATH :::::::::::::::::::::::::::::::::::::::::::::::
knitr::opts_knit$set(root.dir = 'C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis')
path.p    <- "Data/Physiology/Respiration" #the location of all your respirometry files
# read the file name one by one - runs the WHOLE loop with the first then the second and so on
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252") #reads in the data files one  by one first by 'm' as row 1 in file.names.table[m,1], second by 'm' as second row and so on!
for(m in 1:nrow(file.names.table)) { # the following is ONLY structured for LiLigo data in txt format!
file.name <- file.names.table[m,1] # CHANGE HERE TO file.names.table[1,1] IF YOU WNAT TO RUN LINE BY LINE!!!
# read the file name one by one - runs the WHOLE loop with the first then the second and so on
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252") #reads in the data files one  by one first by 'm' as row 1 in file.names.table[m,1], second by 'm' as second row and so on!
# Data data
# reformat the raw date and call the seconds and minutes timestamp!
# raw format is "2/23/2023/11:52:07 AM" containing a lot of info but we need to parse and concvert for it to be meaningful
Resp.Data$date      <- paste((sub("2023.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2023', sep='') #  date - use 'sub' to call everything before 2023, add back 2023 using paste
Resp.Data$time_Sec  <- period_to_seconds(hms(substr((strptime(sub(".*2023/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19))) # time - use 'sub' to call target time of the raw date time after 'year/' + strptime' convert to 24 hr clock + 'period_to_seconds' converts the hms to seconds
# assign the remaining parameters
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])    # seconds as a time series where the first tow is now 0 and each substracted from that initial value
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60 # convert to minutes
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1]) # call the temperature data - the dsaem for each channel - this here from CH1
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10 # call the barometric pressure data - this was input manually before we started - we need this data to convert from air saturation to mg/L O2
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1]) # call the salinity - again this was input manually at the start of the experiment
Resp.Data           <- Resp.Data %>% # use 'dplyr'
#dplyr::filter(!Phase %in% 'Flush') %>% # remove the initial rows labeled flush
dplyr::select(c(date, seconds, minutes, contains(".O2...air.sat")))  # all target oxygen conuptiondata is labelled .O2...air.sat - call all these data (8 channels in the loligo system!)
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,3) # clean these column names to make things easier - firs all columns 4 and therafter.. sorted their column name as the first 3 characters (i.e. CH1, CH2, etc.)
# We have data every second - this is comutationally intensize and redundant
# truncate the data to every 15 sceonds
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15), ]
# lets plot!
date.plot  <- folder.names.table # the directroy timestamp as 20230223
run.plot   <- gsub("_raw.*","", file.name) # the looped run!
plot_title <- paste(date.plot, run.plot, sep = '_') # the title merging these two parameters as date_runn.umber
PLOT <- Resp.Data_15sec %>% # plote pipeline
# before we plot we need to convert the data from air saturation to mg/L O2!
dplyr::select(-c('date', 'seconds')) %>%  # select out the data we do not need- the date and seconds columns (we ONLY want columns contianing data and the minutes timestamp)
reshape2::melt(id.vars = "minutes",variable.name = "channel", value.name = "air.sat") %>% # melt the data from wide foramnt (channels as columns each with data) to long (one column with data, addition column to designate channel IDs)
dplyr::filter(!air.sat  %in% 'NaN') %>% # omit NAs in this data
dplyr::mutate(mg.L.min =   (DO.unit.convert(as.numeric(air.sat),  # use teh presens package DO.unit.convert to convert air saturation to mg/L, inputs several of the constants we called earlier!
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou))) %>%
ggplot(aes(x = minutes , y = mg.L.min)) + # plot simple regression
geom_smooth(method = "loess", se=FALSE, color="black", formula = mg.L.min ~ minutes) + # call a loess curve
theme_classic() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none", plot.title = element_text(size=10))+
labs(y = expression(RAW_mg~L^{-1}~O[2]%.%min^{-1})) + # name y axis
xlab("minutes") + # name the x axis
geom_point() +
ggtitle(plot_title) + # insert the title we called earlier based on the loop file name and date directroy
facet_wrap(~channel) # wrap by channel ID column - creates separte plots for each channel
print(PLOT) # view!
# D. output the plot in RAnalysis\Output\Respiration\workflow_example\plots_raw
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/plots_raw/",folder.names.table,"_", sub("_raw.*","",file.name),"_regression.pdf"), width=10, height=12)
print(PLOT)
dev.off()
}
Resp_loop <- (Resp.Data_15sec[,c(3,1)]) %>%
dplyr::filter(!str_detect(((Resp.Data_15sec[,c(3,j)])[,2]),"NaN")) %>%  # omit the NAs
dplyr::mutate(minutes = as.numeric(minutes)) #  %>% # convert minutes to numeric
Resp_loop
Resp_loop <- (Resp.Data_15sec[,c(3,1)]) %>%
dplyr::filter(!str_detect(((Resp.Data_15sec[,c(3,1)])[,2]),"NaN")) %>%  # omit the NAs
dplyr::mutate(minutes = as.numeric(minutes)) #  %>% # convert minutes to numeric
Resp_loop
Resp_loop <- (Resp.Data_15sec[,c(3,4)]) %>%
dplyr::filter(!str_detect(((Resp.Data_15sec[,c(3,4)])[,2]),"NaN")) %>%  # omit the NAs
dplyr::mutate(minutes = as.numeric(minutes)) #  %>% # convert minutes to numeric
Resp_loop
Resp_loop <- Resp_loop %>%  dplyr::filter(!colnames(Resp_loop)[2] %in% 'NaN') #
Resp_loop
Resp_loop$mgL     <- DO.unit.convert(as.numeric(Resp_loop[,2]),  # DO in percent air sat to be converted to mgL - uses an R package from loligo rMR
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)
Resp_loop
# Loligo parametrs
a <- 0.04
folder.names.table[m,1]
folder.names.table
file.names.table[m,1]
sub("_raw.*","",file.names.table[m,1]),"_",colnames(Resp_loop)[2],"_regression.pdf")
file.names.table[m,1]
colnames(Resp_loop)[2]
sub("_raw.*","",file.names.table[m,1])
# Call the cumulative dataframe that we will write to in the for loop below
df_total             <- data.frame() # start dataframe
resp.table           <- data.frame(matrix(nrow = 1, ncol = 7)) # create dataframe to add cumulatively during for loop
colnames(resp.table) <- c('Date', 'Channel', 'Lpc', 'Leq' , 'Lz', 'alpha','Filename') # names for columns in the for loop
# Loligo parametrs
a <- 0.4 # alpha 0.4 by the authors default suggestions - review Olito et al. and their github page for details
# Run the loop!
for(m in 1:nrow(file.names.table)) { # the following is ONLY structured for LiLigo data in txt format!
# (1) start will the same steps in the previous loop we ran for plotting  (of coutse this time without the plotting)
# call the file 'm' and read it
file.name <- file.names.table[m,1]
Resp.Data  <- read.delim2(file =
paste(path.p,'/',folder.names.table, '/', file.name, sep=''),
header = TRUE,
skip = 37,
fileEncoding= "windows-1252")
# format the date and call variables needed to convert units of air saturation to mg O2
Resp.Data$date      <- paste((sub("2023.*", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.)), '2023', sep='')
Resp.Data$time_Sec  <- period_to_seconds(hms(
substr((strptime(sub(".*2023/", "", Resp.Data$Date..Time..DD.MM.YYYY.HH.MM.SS.), "%I:%M:%S %p")) , 12,19)))
Resp.Data$seconds   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])
Resp.Data$minutes   <- (Resp.Data$time_Sec - Resp.Data$time_Sec[1])/60
temperature_C       <- as.numeric(Resp.Data$CH1.temp...C.[1])
barromP_kPa         <- as.numeric(Resp.Data$Barometric.pressure..hPa.[1]) / 10
salinity.pp.thou    <- as.numeric(Resp.Data$Salinity....[1])
# select the columns we need for our table
Resp.Data           <- Resp.Data %>%
dplyr::select(c(date, seconds, minutes, contains(".O2...air.sat")))
colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] <- substr( ( colnames(Resp.Data)[c(4:(ncol(Resp.Data)))] ), 1,3)
# Call data every 15 seconds (else computationally intensive with LoLinr in next loop)
Resp.Data_15sec = Resp.Data[seq(1, nrow(Resp.Data), 15), ] %>%
dplyr::filter(minutes < 40) # IMPORTANT! we want  < 40 minutes in this record
# NEW!!!! the inside for loop for each column 'j' in filename 'm'
# remember, we called  columns date, seconds, minutes first, thus O2 rate data starts at column 4
for(j in 4:(ncol(Resp.Data_15sec))){ # for each sensor column 'j' (..starting at column 4)
Resp_loop <- (Resp.Data_15sec[,c(3,j)]) %>%
dplyr::filter(!str_detect(((Resp.Data_15sec[,c(3,j)])[,2]),"NaN")) %>%  # omit the NAs
dplyr::mutate(minutes = as.numeric(minutes)) #  %>% # convert minutes to numeric
# convert units using liligo package
Resp_loop$mgL     <- DO.unit.convert(as.numeric(Resp_loop[,2]),  #n R package from loligo rMR t convert
DO.units.in = "pct", DO.units.out ="mg/L",
bar.units.in = "kPa", bar.press = barromP_kPa, bar.units.out = "kpa",
temp.C = temperature_C,
salinity.units = "pp.thou", salinity = salinity.pp.thou)
# now run data!
if (nrow(Resp_loop) < 1) { # if column 'j' is NA write NA in the cumulative sheet...
resp.table$Date                <- Resp.Data_15sec[1,1]
resp.table$Channel             <- colnames(Resp_loop)[2]
resp.table[3:ncol(resp.table)] <- 'NA'
df       <- data.frame(resp.table) # name dataframe for this single row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
print(df_total) # print to monitor progress
} else { # else run LoLinR for x=mins and y=mg/l O2
model <- rankLocReg(
xall    = as.numeric(Resp_loop[, 1]),
yall    = as.numeric(Resp_loop[, 3]), # call x as the minute timeseries and y as the mg L-1 O2
alpha   = a,
method  = "pc",
verbose = TRUE)
sum.table <- summary(model)
resp.table$Date       <- Resp.Data_15sec[1,1]
resp.table$Channel    <- colnames(Resp_loop)[2]
resp.table$Lpc        <- sum.table$Lcompare[3,6] # Lpc slope - call the column 'b1'
resp.table$Leq        <- sum.table$Lcompare[2,6] # Leq slope - call the column 'b1'
resp.table$Lz         <- sum.table$Lcompare[1,6] # Lz slope  - call the column 'b1'
resp.table$alpha      <- a
resp.table$Filename   <- file.names.table[m,1]
df       <- data.frame(resp.table) # name dataframe for this single row
df_total <- rbind(df_total,df) #bind to a cumulative list dataframe
print(df_total) # print to monitor progress
}  # end of  else statement to run LoLinR
# save plots every inside loop and name by date_run_vialposition
pdf(paste0("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/plots_alpha0.4_increm15sec/20230223_", sub("_raw.*","",file.names.table[m,1]),"_",colnames(Resp_loop)[2],"_regression.pdf")) # call the pdf to output with loop
plot(model) # print the diagnostic plot
dev.off() # save it
} # inside for loop for 'j' O2 columns in each 'm' file
} # outside for loop for 'm' filenames
df_total
write.table(df_total,"C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/resp_raw_LoLin_output", row.names=FALSE)  # write out
write.table(df_total,"C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/resp_raw_LoLin_output.csv", row.names=FALSE)  # write out
write.table(df_total,"C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Respiration/workflow_example/RR_LoLin_raw.csv", sep=",",row.names=FALSE)  # write out
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/samjg/Documents/\Github_repositories/Airradians_multigen_OA/")
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/")
library(ggplot2)
library(dplyr)
df<-read.csv("RAnalysis/Data/Physiology/F2_phys.csv", header = T, na = "omit")
df<-read.csv("/RAnalysis/Data/Physiology/F2_phys.csv", header = T, na = "omit")
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/")
df<-read.csv("/RAnalysis/Data/Physiology/F2_phys.csv", header = T, na = "omit")
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/")
df<-read.csv("RAnalysis/Data/Physiology/F2_phys.csv", header = T, na = "omit")
df
# convert date info in format 'mm/dd/yyyy'
strDates <- c("9/21/2022", "10/5/2022", "10/26/2022")
dates <- as.Date(strDates, "%m/%d/%Y")
df$Treatment=as.factor(df$Treatment)
df$Treatment <- factor(df$Treatment,levels = c("low", "moderate", "high"))
ggplot(data=df, aes(x=Treatment, y=CR, fill=Treatment)) +
geom_boxplot()+  scale_fill_manual(values=c("forestgreen","orange", "purple"))+
theme_bw() +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Clearance Rate ", x ="Month", y = "CR") +
facet_wrap(~ Date)
CR <- ggplot(data=df, aes(x=Treatment, y=CR, fill=Treatment)) +
geom_boxplot()+  scale_fill_manual(values=c("forestgreen","orange", "purple"))+
theme_bw() +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Clearance Rate ", x ="Month", y = "CR") +
facet_wrap(~ Date)
AR <- ggplot(data=df, aes(x=Treatment, y=AR, fill=Treatment)) +
geom_boxplot()+  scale_fill_manual(values=c("forestgreen","orange", "purple"))+
theme_bw() +  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Absorption Rate ", x ="Month", y = "AR (mg/h)") +
facet_wrap(~ Date)
ggarrange(CR, AR)
library(ggpubr)
ggarrange(CR, AR)
ggarrange(CR, AR, ncol = 1)
