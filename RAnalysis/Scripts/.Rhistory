ggtitle("Metabolic scaling: log10_MO2 = log10_a + (b.factor * log10_BodyMass)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "left")
RR_master_OM_WDW
RR_master_OM_WDW %>%
ggplot(aes(x=log10_WDW, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_BodyMass; WDW in g") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none") +
ggtitle("Metabolic scaling: log10_MO2 = log10_a + (b.factor * log10_BodyMass)") +
geom_smooth(method = lm, color = 'red')
RR_master_OM_WDW %>%
ggplot(aes(x=log10_WDW, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_BodyMass; WDW in g") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none") +
ggtitle("Metabolic scaling: log10_MO2 = log10_a + (b.factor * log10_BodyMass)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "left")
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(Rmisc)
library(devtools)
library(ggpubr)
library(SciViews)
MO2_b.factorWDW_PLOT <- RR_master_OM_WDW %>%
ggplot(aes(x=log10_WDW, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_BodyMass; WDW in g") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none") +
ggtitle("Metabolic scaling: log10_MO2 = log10_a + (b.factor * log10_BodyMass)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "left")
?ggpmisc
library(ggpmisc)
install.packages("ggpmisc")
install.packages("ggpmisc")
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lme4)
library(lmerTest)
library(lme4)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(rlang)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.6.tar.gz", repos = NULL, type="source")
install.packages("Rtools")
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.6.tar.gz", repos = NULL, type="source")
install.packages("Rtools", dependencies = FALSE)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(forcats)
library(lme4)
library(lmerTest)
library(performance)
library(car)
library(kableExtra)
library(pander)
library(data.table)
library(Rmisc)
library(devtools)
library(ggpubr)
library(SciViews)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
RR_master <- read.csv(file="Output/Respiration/Calculated_Resp_Master.csv", header=T) %>%
filter(!Food %in% 'unfed') %>% # view script REspirationRates_Calc.Rmd for the road to this master file
dplyr::mutate(resp_umol_L_hr_mg_WDW = resp_umol_L_hr/whole_Dry_weight)
RR_master_OM            <- RR_master %>% filter(!is.na(resp_umol_L_hr)) %>%  filter(!is.na(Dry_Tissue_weight))
RR_master_OM$log10_VO2  <- log10(as.numeric(RR_master_OM$resp_umol_L_hr)) # assign resp value
RR_master_OM$log10_TDW  <- log10(as.numeric(RR_master_OM$Dry_Tissue_weight)) # assign length value
summary(lm(RR_master_OM$log10_VO2~RR_master_OM$log10_TDW)) # 0.79749 == b factor
MO2_b.factor_PLOT <- RR_master_OM %>%
ggplot(aes(x=log10_TDW, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_BodyMass; TDW in g") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none") +
ggtitle("Metabolic scaling: log10_MO2 = log10_a + (b.factor * log10_BodyMass)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "left")
MO2_b.factor_PLOT
unique(as.Date(RR_master$Date, format="%m/%d/%Y"))
RR_formatted <- RR_master %>%
dplyr::mutate(Date = as.Date(Date, format="%m/%d/%Y")) %>%
dplyr::mutate(Gen = case_when(Date < '2022-08-30' ~ "F1s",
Date > '2022-03-01' ~ "F2s")) %>%
dplyr::mutate(Gen_lifestage = case_when(Gen == 'F1s' & Date < '2022-02-02' ~ "F1s A: pre-winter",
Gen == 'F1s' & Date > '2021-10-26' ~ "F1s B: post-winter",
Date == '2022-08-30' & Num_indivs == 5 ~ "F2s A: larvae",
Date == '2022-08-30' & Num_indivs == 1 ~ "F2s B: spat"))%>%
dplyr::filter(!Fed_Unfed %in% 'Low food')
F1s.BOXPLOT_TDW_facetted <- RR_formatted %>%
dplyr::filter(!Gen %in% 'F2s') %>%
ggplot(aes(x = factor(Date),
y = resp_µmol_L_mg_TDW_hr,
fill = pCO2)) +
geom_boxplot(alpha = 0.5, # color hue
width=0.6, # boxplot width
outlier.size=0, # make outliers small
position = position_dodge(preserve = "single")) +
geom_point(pch = 19,
position = position_jitterdodge(0.01),
size=1) +
scale_fill_manual(values=c("white","grey")) +
theme_classic() +
#ylim(0, 0.2) +
ggtitle("Tissue Dry weight") +
stat_summary(fun.y=mean,
geom = "errorbar",
aes(ymax = ..y.., ymin = ..y..),
width = 0.6,
size=0.4,
linetype = "dashed",
position = position_dodge(preserve = "single")) +
facet_wrap(~Gen_lifestage, scales = "free")
F1s.BOXPLOT_TDW_facetted # not that we do not have TDW for 9/14 and 9/30 data
F2_spat   <- RR_master %>%
dplyr::filter(Date %in% '8/30/2022') %>% # call the date we completed respiromatery on F2 spat and larvae
dplyr::filter(Num_indivs %in% 1)# call only rows that say we used 1 animal per well (Note: 1 indiv per well for spat)
F2_spat[!is.na(F2_spat$resp_umol_L_hr),] %>%
ggplot( aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_µmol_L_mm_Length_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, width=0.5, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic()
F2_larvae <- RR_master %>%
dplyr::filter(Date %in% '8/30/2022') %>% # call the date we completed respiromatery on F2 spat and larvae
dplyr::filter(Num_indivs %in% 5)# call only rows that say we used 1 animal per well (Note: 1 indiv per well for spat)
F2_larvae[!is.na(F2_larvae$resp_umol_L_hr),] %>%
ggplot( aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_µmol_L_mm_Length_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, width=0.5, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic()
F2_larvae_spat  <- RR_master %>%
dplyr::filter(Date %in% '8/30/2022') %>% # call the date we completed respiromatery on F2 spat and larvae
dplyr::mutate(Type =
case_when(Num_indivs == 1 ~ 'spat',
Num_indivs == 5 ~ 'larvae')) %>%
dplyr::mutate(resp_µmol_L_mm_Length_hr = resp_µmol_L_mm_Length_hr/Num_indivs)
F2_larvae_spat[!is.na(F2_larvae_spat$resp_umol_L_hr),] %>%
ggplot( aes(x = factor(pCO2, level = c('500 μatm', '800 μatm')), resp_µmol_L_mm_Length_hr , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, width=0.5, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("white","grey50")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
facet_wrap(~Type)
RR_master_without_TDW                   <- RR_master[is.na(RR_master$Dry_Tissue_weight),]
RR_master_without_TDW$Dry_Tissue_weight <- 10^(-12.6+3.37*(log(RR_master_without_TDW$Length_um/1000))) # Calculate a TDW value based on the Local Polynomial Regression Fitting geom_smooth EQ  (file:///C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Survival_Size/TissueDryWeight_v_Length.pdf)
RR_master_with_TDW                      <- RR_master[!is.na(RR_master$Dry_Tissue_weight),] # call the data that does have TDW to merge with the updated data
RR_master_newTDW                        <- rbind(RR_master_without_TDW, RR_master_with_TDW) # we now have a new dataset with TDW for the smaller animals and those did not have it measured
# repeat the process above for metabolic scaling
RR_master_newTDW_OM            <- RR_master_newTDW %>% filter(!is.na(resp_umol_L_hr))
RR_master_newTDW_OM$log10_VO2  <- log10(as.numeric(RR_master_newTDW_OM$resp_umol_L_hr)) # assign resp value
RR_master_newTDW_OM$log10_TDW  <- log10(as.numeric(RR_master_newTDW_OM$Dry_Tissue_weight)) # assign length value
summary(lm(RR_master_newTDW_OM$log10_VO2~RR_master_newTDW_OM$log10_TDW)) # 0.71092 == b factor
RR_master_newTDW_OM
MO2_b.factor_PLOT <- RR_master_newTDW_OM %>%
ggplot(aes(x=log10_TDW, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_BodyMass; TDW in g") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none") +
ggtitle("Metabolic scaling: log10_MO2 = log10_a + (b.factor * log10_BodyMass)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "left")
MO2_b.factor_PLOT
RR_master_without_TDW                   <- RR_master[is.na(RR_master$Dry_Tissue_weight),]
RR_master_without_TDW
# LOAD LIBRARIES
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tidyr)
library(tidyverse)
library(car)
library(nlme)
library(Rmisc)
library(lmerTest)
library(lme4)
library(pander)
library(performance)
library(Rmisc)
library(reshape2)
library(ggpubr)
# SET WORKING DIRECTORY
setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA
ShellLength <- read.csv(file="Data/Survival_Size/Juvenile_lengths_master.csv", header = TRUE)
TDW_AFDW    <- read.csv(file="Data/Survival_Size/TDW_AFDW_Condition_master2.csv", header = TRUE) %>%
dplyr::mutate(pCO2 = case_when(pH == 8 ~ "500 μatm",  pH == 7.5 ~ "800 μatm")) %>% # create pCO2 column
dplyr::mutate(Shell_length_mm = as.numeric(Shell_length_mm)) # call shell lenght as numeric
TDW_AFDW    <- TDW_AFDW[!is.na(TDW_AFDW$Shell_length_mm),]# drop rows that have no date tied to them
Length_WholeDryWeight_facetted <- TDW_AFDW %>%
dplyr::filter(Shell_length_mm > 0 & Whole_animal_dry_weight_g > 0) %>% # just to ensure we are getting correct data
ggplot(aes(x=log(Shell_length_mm), y=log(Whole_animal_dry_weight_g), color=pCO2)) +
geom_point() +
scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="Shell length (mm)") +
scale_y_continuous(name ="Whole dry weight (g)")  +
theme_classic() +
theme(legend.position="none") +
geom_smooth(method = loess, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "right") +
facet_wrap(~pCO2)
Length_WholeDryWeight_all     <- TDW_AFDW %>%
dplyr::filter(Shell_length_mm > 0 & Whole_animal_dry_weight_g > 0) %>% # just to ensure we are getting correct data
ggplot(aes(x=log(Shell_length_mm), y=log(Whole_animal_dry_weight_g))) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="Shell length (mm)") +
scale_y_continuous(name ="Whole dry weight (g)")  +
theme_classic() +
ggtitle("F1 Bay scallops - Length vs. Whole Dry weight") +
theme(legend.position="none") +
#stat_smooth(method = "lm", formula = y ~ poly(x, 2), size = 1)
stat_smooth(method = "gam", formula = y ~ s(x), size = 1) +
#stat_smooth(method = "nls", formula = y ~ a*exp(-b *x))
geom_smooth(method = loess, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "right")
Length_WholeDryWeight_all
Length_TissueDryWeight_facetted <- TDW_AFDW %>%
dplyr::filter(Shell_length_mm > 0 & Dry_Tissue_weight_g > 0) %>% # just to ensure we are getting correct data
ggplot(aes(x=log(Shell_length_mm), y=log(Dry_Tissue_weight_g), color=pCO2)) +
geom_point() +
scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="Shell length (mm)") +
scale_y_continuous(name ="Tissue dry weight (g)")  +
theme_classic() +
theme(legend.position="none") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "right") +
facet_wrap(~pCO2)
Length_TissueDryWeight_all <- TDW_AFDW %>%
dplyr::filter(Shell_length_mm > 0 & Dry_Tissue_weight_g > 0) %>% # just to ensure we are getting correct data
ggplot(aes(x=log(Shell_length_mm), y=log(Dry_Tissue_weight_g))) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="Shell length (mm)") +
scale_y_continuous(name ="Tissue dry weight (g)")  +
theme_classic() +
ggtitle("F1 Bay scallops - Length vs. Tissue Dry weight") +
theme(legend.position="none") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "right")
Length_TissueDryWeight_spat <- TDW_AFDW %>%
dplyr::filter(Shell_length_mm > 0 & Dry_Tissue_weight_g > 0) %>% # just to ensure we are getting correct data
dplyr::filter(Shell_length_mm < 12) %>%
ggplot(aes(x=log(Shell_length_mm), y=log(Dry_Tissue_weight_g))) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="Shell length (mm)") +
scale_y_continuous(name ="Tissue dry weight (g)")  +
theme_classic() +
ggtitle("F1 Bay scallops - Length vs. Tissue Dry weight") +
theme(legend.position="none") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "right")
print(ggarrange(Length_TissueDryWeight_all, Length_TissueDryWeight_facetted, nrow = 2, ncol = 1)) # print the model diagnostics
Length_TissueDryWeight_facetted <- TDW_AFDW %>%
dplyr::filter(Shell_length_mm > 0 & Dry_Tissue_weight_g > 0) %>% # just to ensure we are getting correct data
ggplot(aes(x=log(Shell_length_mm), y=log(Dry_Tissue_weight_g), color=pCO2)) +
geom_point() +
scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="Shell length (mm)") +
scale_y_continuous(name ="Tissue dry weight (g)")  +
theme_classic() +
theme(legend.position="none") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "right") +
facet_wrap(~pCO2)
Length_TissueDryWeight_all <- TDW_AFDW %>%
dplyr::filter(Shell_length_mm > 0 & Dry_Tissue_weight_g > 0) %>% # just to ensure we are getting correct data
ggplot(aes(x=log(Shell_length_mm), y=log(Dry_Tissue_weight_g))) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="Shell length (mm)") +
scale_y_continuous(name ="Tissue dry weight (g)")  +
theme_classic() +
ggtitle("F1 Bay scallops - Length vs. Tissue Dry weight") +
theme(legend.position="none") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "right")
Length_TissueDryWeight_spat <- TDW_AFDW %>%
dplyr::filter(Shell_length_mm > 0 & Dry_Tissue_weight_g > 0) %>% # just to ensure we are getting correct data
dplyr::filter(Shell_length_mm < 12) %>%
ggplot(aes(x=log(Shell_length_mm), y=log(Dry_Tissue_weight_g))) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="Shell length (mm)") +
scale_y_continuous(name ="Tissue dry weight (g)")  +
theme_classic() +
ggtitle("F1 Bay scallops - Length vs. Tissue Dry weight") +
theme(legend.position="none") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "right")
Length_TissueDryWeight_spat
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Survival_Size/TissueDryWeight_v_Length.pdf"), width = 8, height = 8)
print(ggarrange(Length_TissueDryWeight_all, Length_TissueDryWeight_facetted, nrow = 2, ncol = 1)) # print the model diagnostics
dev.off()
Length_TissueDryWeight_facetted <- TDW_AFDW %>%
dplyr::filter(Shell_length_mm > 0 & Dry_Tissue_weight_g > 0) %>% # just to ensure we are getting correct data
ggplot(aes(x=log(Shell_length_mm), y=log(Dry_Tissue_weight_g), color=pCO2)) +
geom_point() +
scale_color_manual(values=c("blue","orange")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="LOG(Shell length (mm)") +
scale_y_continuous(name ="LOG(Tissue dry weight (g)")  +
theme_classic() +
theme(legend.position="none") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "right") +
facet_wrap(~pCO2)
Length_TissueDryWeight_all <- TDW_AFDW %>%
dplyr::filter(Shell_length_mm > 0 & Dry_Tissue_weight_g > 0) %>% # just to ensure we are getting correct data
ggplot(aes(x=log(Shell_length_mm), y=log(Dry_Tissue_weight_g))) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="LOG(Shell length (mm)") +
scale_y_continuous(name ="LOG(Tissue dry weight (g)")  +
theme_classic() +
ggtitle("F1 Bay scallops - LOG(Length vs. Tissue Dry weight") +
theme(legend.position="none") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "right")
pdf(paste0(filename = "C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Survival_Size/TissueDryWeight_v_Length.pdf"), width = 8, height = 8)
print(ggarrange(Length_TissueDryWeight_all, Length_TissueDryWeight_facetted, nrow = 2, ncol = 1)) # print the model diagnostics
dev.off()
Length_TissueDryWeight_all
TDW_AFDW
RR_master_without_TDW$Length_um/1000
log(RR_master_without_TDW$Length_um/1000)
(-12.6+3.37*(log(RR_master_without_TDW$Length_um/1000)))
10^(-12.6+3.37*(log(RR_master_without_TDW$Length_um/1000)))
10^(3.37*(log(RR_master_without_TDW$Length_um/1000)))
10^(-12.6+3.37*(log(RR_master_without_TDW$Length_um/1000)))
RR_master_without_TDW$Length_um/1000)
RR_master_without_TDW$Length_um/1000
log(RR_master_without_TDW$Length_um/1000)
10^(-12.6+3.37*(2.5))
10^(-12.6+3.37*(2.5))*1000
10^(-12.6+3.37*(2.5))*100000
10^(-12.6+3.37*(2.5))*(-100000)
10^(-12.6+3.37*(3))*(-100000)
10^(-12.6+3.37*(3))
log10(-12.6+3.37*(3))
(-12.6+3.37*(3))
10^-2.49
log(TDW_AFDW$Shell_length_mm)
10^-2.49
10^-2.49(*1000)
10^-2.49*(1000)
(10^(-12.6+3.37*(log(RR_master_without_TDW$Length_um/1000))))*1000
10^-2.49*(1000)
log(TDW_AFDW$Dry_Tissue_weight_g)
10^log(TDW_AFDW$Dry_Tissue_weight_g)
TDW_AFDW$Dry_Tissue_weight_g
TDW_AFDW$Dry_Tissue_weight_g
10^log(TDW_AFDW$Dry_Tissue_weight_g)
10^(log(TDW_AFDW$Dry_Tissue_weight_g))
log(TDW_AFDW$Shell_length_mm)
TDW_AFDW$Dry_Tissue_weight_g
(log(TDW_AFDW$Dry_Tissue_weight_g))
10^-1.6445471
log10(-1.6445471)
log10(1.6445471)
(10^(-12.6+3.37*(log(RR_master_without_TDW$Length_um/1000))))*1000
(-12.6+3.37*(log(RR_master_without_TDW$Length_um/1000))))
(-12.6+3.37*(log(RR_master_without_TDW$Length_um/1000)))
log(RR_master_without_TDW$Length_um/1000)
log(5)
log(34)
log(0.04)
(-12.6+3.37*(log(RR_master_without_TDW$Length_um/1000)))
10^(-12.6+3.37*(log(RR_master_without_TDW$Length_um/1000)))
RR_master_without_TDW$Dry_Tissue_weight <- 10^(-12.6+3.37*(log(RR_master_without_TDW$Length_um/1000))) # Calculate a TDW value based on the Local Polynomial Regression Fitting geom_smooth EQ  (file:///C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Survival_Size/TissueDryWeight_v_Length.pdf)
RR_master_with_TDW                      <- RR_master[!is.na(RR_master$Dry_Tissue_weight),] # call the data that does have TDW to merge with the updated data
RR_master_newTDW                        <- rbind(RR_master_without_TDW, RR_master_with_TDW) # we now have a new dataset with TDW for the smaller animals and those did not have it measured
# repeat the process above for metabolic scaling
RR_master_newTDW_OM            <- RR_master_newTDW %>% filter(!is.na(resp_umol_L_hr))
RR_master_newTDW_OM$log10_VO2  <- log10(as.numeric(RR_master_newTDW_OM$resp_umol_L_hr)) # assign resp value
RR_master_newTDW_OM$log10_TDW  <- log10(as.numeric(RR_master_newTDW_OM$Dry_Tissue_weight)) # assign length value
summary(lm(RR_master_newTDW_OM$log10_VO2~RR_master_newTDW_OM$log10_TDW)) # 0.71092 == b factor
RR_master_newTDW_OM
MO2_b.factor_PLOT <- RR_master_newTDW_OM %>%
ggplot(aes(x=log10_TDW, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_BodyMass; TDW in g") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none") +
ggtitle("Metabolic scaling: log10_MO2 = log10_a + (b.factor * log10_BodyMass)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "left")
MO2_b.factor_PLOT
RR_master_without_TDW$Dry_Tissue_weight <- 10^(-5+3.37*(log(RR_master_without_TDW$Length_um/1000))) # Calculate a TDW value based on the Local Polynomial Regression Fitting geom_smooth EQ  (file:///C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Survival_Size/TissueDryWeight_v_Length.pdf)
RR_master_with_TDW                      <- RR_master[!is.na(RR_master$Dry_Tissue_weight),] # call the data that does have TDW to merge with the updated data
RR_master_newTDW                        <- rbind(RR_master_without_TDW, RR_master_with_TDW) # we now have a new dataset with TDW for the smaller animals and those did not have it measured
# repeat the process above for metabolic scaling
RR_master_newTDW_OM            <- RR_master_newTDW %>% filter(!is.na(resp_umol_L_hr))
RR_master_newTDW_OM$log10_VO2  <- log10(as.numeric(RR_master_newTDW_OM$resp_umol_L_hr)) # assign resp value
RR_master_newTDW_OM$log10_TDW  <- log10(as.numeric(RR_master_newTDW_OM$Dry_Tissue_weight)) # assign length value
summary(lm(RR_master_newTDW_OM$log10_VO2~RR_master_newTDW_OM$log10_TDW)) # 0.71092 == b factor
RR_master_newTDW_OM
MO2_b.factor_PLOT <- RR_master_newTDW_OM %>%
ggplot(aes(x=log10_TDW, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_BodyMass; TDW in g") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none") +
ggtitle("Metabolic scaling: log10_MO2 = log10_a + (b.factor * log10_BodyMass)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "left")
MO2_b.factor_PLOT
RR_master_without_TDW$Dry_Tissue_weight <- 10^(-7+3.37*(log(RR_master_without_TDW$Length_um/1000))) # Calculate a TDW value based on the Local Polynomial Regression Fitting geom_smooth EQ  (file:///C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Survival_Size/TissueDryWeight_v_Length.pdf)
RR_master_with_TDW                      <- RR_master[!is.na(RR_master$Dry_Tissue_weight),] # call the data that does have TDW to merge with the updated data
RR_master_newTDW                        <- rbind(RR_master_without_TDW, RR_master_with_TDW) # we now have a new dataset with TDW for the smaller animals and those did not have it measured
# repeat the process above for metabolic scaling
RR_master_newTDW_OM            <- RR_master_newTDW %>% filter(!is.na(resp_umol_L_hr))
RR_master_newTDW_OM$log10_VO2  <- log10(as.numeric(RR_master_newTDW_OM$resp_umol_L_hr)) # assign resp value
RR_master_newTDW_OM$log10_TDW  <- log10(as.numeric(RR_master_newTDW_OM$Dry_Tissue_weight)) # assign length value
summary(lm(RR_master_newTDW_OM$log10_VO2~RR_master_newTDW_OM$log10_TDW)) # 0.71092 == b factor
RR_master_newTDW_OM
MO2_b.factor_PLOT <- RR_master_newTDW_OM %>%
ggplot(aes(x=log10_TDW, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_BodyMass; TDW in g") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none") +
ggtitle("Metabolic scaling: log10_MO2 = log10_a + (b.factor * log10_BodyMass)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "left")
MO2_b.factor_PLOT
RR_master_without_TDW                   <- RR_master[is.na(RR_master$Dry_Tissue_weight),]
RR_master_without_TDW$Dry_Tissue_weight <- 10^(-10+3.37*(log(RR_master_without_TDW$Length_um/1000))) # Calculate a TDW value based on the Local Polynomial Regression Fitting geom_smooth EQ  (file:///C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis/Output/Survival_Size/TissueDryWeight_v_Length.pdf)
RR_master_with_TDW                      <- RR_master[!is.na(RR_master$Dry_Tissue_weight),] # call the data that does have TDW to merge with the updated data
RR_master_newTDW                        <- rbind(RR_master_without_TDW, RR_master_with_TDW) # we now have a new dataset with TDW for the smaller animals and those did not have it measured
# repeat the process above for metabolic scaling
RR_master_newTDW_OM            <- RR_master_newTDW %>% filter(!is.na(resp_umol_L_hr))
RR_master_newTDW_OM$log10_VO2  <- log10(as.numeric(RR_master_newTDW_OM$resp_umol_L_hr)) # assign resp value
RR_master_newTDW_OM$log10_TDW  <- log10(as.numeric(RR_master_newTDW_OM$Dry_Tissue_weight)) # assign length value
summary(lm(RR_master_newTDW_OM$log10_VO2~RR_master_newTDW_OM$log10_TDW)) # 0.71092 == b factor
RR_master_newTDW_OM
MO2_b.factor_PLOT <- RR_master_newTDW_OM %>%
ggplot(aes(x=log10_TDW, y=log10_VO2)) +
geom_point() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
scale_x_continuous(name ="log10_BodyMass; TDW in g") +
scale_y_continuous(name ="log10_MO2; RR in umol L-1 hr-1)") +
theme_classic() +
theme(legend.position="none") +
ggtitle("Metabolic scaling: log10_MO2 = log10_a + (b.factor * log10_BodyMass)") +
geom_smooth(method = lm, color = 'red') +
ggpmisc::stat_poly_eq(parse=T, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), label.x.npc = "left")
MO2_b.factor_PLOT
