dplyr::summarise(n = n()))
ChemTable_MeanSE                 <- data.frame(matrix(nrow = 4, ncol = 1))
ChemTable_MeanSE$pCO2_level      <- c('Elevated','Low','Elevated','Low')
ChemTable_MeanSE$Food_supply     <- chemTable_n$Fed_Unfed
ChemTable_MeanSE$N               <- chemTable_n$n
ChemTable_MeanSE$Salinity        <- paste(signif(MeasuredValuesTable$Salinity_mean,digits=3), signif(MeasuredValuesTable$Salinity_se,digits=3), sep="± ")
ChemTable_MeanSE$Temperature     <- paste(signif(MeasuredValuesTable$t.oC._of_bucket_mean,digits=3), signif(MeasuredValuesTable$t.oC._of_bucket_se,digits=3), sep="± ")
ChemTable_MeanSE$TA              <- paste(signif(MeasuredValuesTable$TA_.mmol.kgSW._mean,digits=3), signif(MeasuredValuesTable$TA_.mmol.kgSW._se,digits=3), sep="± ")
ChemTable_MeanSE$TCO2            <- paste(signif(MeasuredValuesTable$TCO2_.mmol.kgSW._mean,digits=3), signif(MeasuredValuesTable$TCO2_.mmol.kgSW._se,digits=3), sep="± ")
ChemTable_MeanSE$pH_Chosen.scale <- paste(signif(MeasuredValuesTable$pH_Chosen_scale_.4.decimals._mean,digits=3), signif(MeasuredValuesTable$pH_Chosen_scale_.4.decimals._se,digits=3), sep="± ")
ChemTable_MeanSE$CO2SYS_calc     <- x
ChemTable_MeanSE$pH_out          <- paste(signif(chemTable$pH_out_mean,digits=3), signif(chemTable$pH_out_se,digits=3), sep="± ")
ChemTable_MeanSE$fCO2_matm       <- paste(signif(chemTable$fCO2_out_.matm._mean,digits=3), signif(chemTable$fCO2_out_.matm._se,digits=3), sep="± ")
ChemTable_MeanSE$pCO2_matm       <- paste(signif(chemTable$pCO2_out_.matm._mean,digits=3), signif(chemTable$pCO2_out_.matm._se,digits=3), sep="± ")
ChemTable_MeanSE$HCO3_mmol.kgSW  <- paste(signif(chemTable$HCO3_out_.mmol.kgSW._mean,digits=3), signif(chemTable$HCO3_out_.mmol.kgSW._se,digits=3), sep="± ")
ChemTable_MeanSE$CO3_mmol.kgSW   <- paste(signif(chemTable$CO3_out_.mmol.kgSW._mean,digits=3), signif(chemTable$CO3_out_.mmol.kgSW._se,digits=3), sep="± ")
ChemTable_MeanSE$CO2_mmol.kgSW   <- paste(signif(chemTable$CO2_out_.mmol.kgSW._mean,digits=3), signif(chemTable$CO2_out_.mmol.kgSW._se,digits=3), sep="± ")
ChemTable_MeanSE$B_Alk_mmol.kgSW <- paste(signif(chemTable$B_Alk_out_.mmol.kgSW._mean,digits=3), signif(chemTable$B_Alk_out_.mmol.kgSW._se,digits=3), sep="± ")
ChemTable_MeanSE$OH_mmol.kgSW    <- paste(signif(chemTable$OH_out_.mmol.kgSW._mean,digits=3), signif(chemTable$OH_out_.mmol.kgSW._se,digits=3), sep="± ")
ChemTable_MeanSE$Revelle         <- paste(signif(chemTable$Revelle_out_mean,digits=3), signif(chemTable$Revelle_out_se,digits=3), sep="± ")
ChemTable_MeanSE$Calcite.Sat     <- paste(signif(chemTable$WCa_out_mean,digits=3), signif(chemTable$WCa_out_se,digits=3), sep="± ")
ChemTable_MeanSE$Aragonite.Sat   <- paste(signif(chemTable$WAr_out_mean,digits=3), signif(chemTable$WAr_out_se,digits=3), sep="± ")
ChemTable_MeanSE$xCO2_ppm        <- paste(signif(chemTable$xCO2_out_.ppm._mean,digits=3), signif(chemTable$xCO2_out_.ppm._se,digits=3), sep="± ")
ChemTable_MeanSE                 <- ChemTable_MeanSE[,-1] # view table
# write csv
#write.csv(Resp.Master_OM, "C:/Users/samjg/Documents/Github_repositories/Airradians_OA/RAnalysis/Output/Respiration/Calculated_Resp_Master.csv")
write.csv(ChemTable_MeanSE, paste("C:/Users/samuel.gurr/Documents/Github_repositories/Airradians_OA-foodsupply/RAnalysis/Output/Water_Chemistry/CO2SYS_", x, "_Master.csv", sep = ''))
}
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(lme4)
library(lmerTest)
library(performance)
library(kableExtra)
library(pander)
library(ggpubr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_hemolymph_OA/RAnalysis/") # personal computer
MitPotential_dat
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(lme4)
library(lmerTest)
library(performance)
library(kableExtra)
library(pander)
library(ggpubr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_hemolymph_OA/RAnalysis/") # personal computer
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(lme4)
library(lmerTest)
library(performance)
library(kableExtra)
library(pander)
library(ggpubr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_hemolymph_OA/RAnalysis/") # personal computer
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_hemolymph_OA/RAnalysis/") # personal computer
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(lme4)
library(lmerTest)
library(performance)
library(kableExtra)
library(pander)
library(ggpubr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_hemolymph_OA/Flow_cytometry_data/") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
MitPotential_dat    <- read.csv(file="Flow_cytometry_data/Output/JC10_results.csv", header=T)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(lme4)
library(lmerTest)
library(performance)
library(kableExtra)
library(pander)
library(ggpubr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_hemolymph_OA/Flow_cytometry_data/") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
MitPotential_dat    <- read.csv(file="Output/JC10_results.csv", header=T)
ROS_dat             <- read.csv(file="Output/DCFHDA_results.csv", header=T)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(lme4)
library(lmerTest)
library(performance)
library(kableExtra)
library(pander)
library(ggpubr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_hemolymph_OA/RAnalysis/") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
MitPotential_dat    <- read.csv(file="Flow_cytometry_data/Output/JC10_results.csv", header=T)
ROS_dat             <- read.csv(file="Flow_cytometry_data/Output/DCFHDA_results.csv", header=T)
MitPotential_dat
# add column for pCO2 treatment
MitPotential_dat <- MitPotential_dat %>%
dplyr::mutate(pCO2 = case_when(pCO2_Treatment == "Low"  ~ "500 μatm", pCO2_Treatment == "High" ~ "1200 μatm")) %>% # add a column for pCO2
dplyr::mutate(Ratio_FL1.FL2 = as.numeric(Ratio_FL1.FL2))  %>%
dplyr::mutate(Ratio_FL2.FL1 =  Mean_FL2/Mean_FL1)  %>%
dplyr::mutate(pCO2_Treatment = as.factor(pCO2_Treatment))
# parse by cell type for stats
MitPotential_MG     <- MitPotential_dat %>% dplyr::filter(cell_type %in% 'mature_granular')   %>% na.omit()
MitPotential_IG     <- MitPotential_dat %>% dplyr::filter(cell_type %in% 'immature_granular') %>% na.omit()
MitPotential_MA     <- MitPotential_dat %>% dplyr::filter(cell_type %in% 'mature_agranular')  %>% na.omit()
MitPotential_Degran <- MitPotential_dat %>% dplyr::filter(cell_type %in% 'degranulated')      %>% na.omit()
MitPotential_dat %>%
na.omit() %>%
summarySE(measurevar="Ratio_FL2.FL1", groupvars=c("pCO2_Treatment", "cell_type")) %>%
dplyr::mutate(pCO2 = case_when(pCO2_Treatment == "Low"  ~ "500 μatm", pCO2_Treatment == "High" ~ "1200 μatm")) %>%
dplyr::arrange(cell_type)
# LOAD PACKAGES :::::::::::::::::::::::::::::::::::::::::::::::::::::::
library(dplyr)
library(ggplot2)
library(lme4)
library(lmerTest)
library(performance)
library(kableExtra)
library(pander)
library(ggpubr)
# SET WORKING DIRECTORY :::::::::::::::::::::::::::::::::::::::::::::::
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_hemolymph_OA/RAnalysis/") # personal computer
# setwd("C:/Users/samjg/Documents/Github_repositories/Airradians_multigen_OA/RAnalysis") # Work computer
# LOAD DATA :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
MitPotential_dat    <- read.csv(file="Flow_cytometry_data/Output/JC10_results.csv", header=T)
ROS_dat             <- read.csv(file="Flow_cytometry_data/Output/DCFHDA_results.csv", header=T)
# add column for pCO2 treatment
MitPotential_dat <- MitPotential_dat %>%
dplyr::mutate(pCO2 = case_when(pCO2_Treatment == "Low"  ~ "500 μatm", pCO2_Treatment == "High" ~ "1200 μatm")) %>% # add a column for pCO2
dplyr::mutate(Ratio_FL1.FL2 = as.numeric(Ratio_FL1.FL2))  %>%
dplyr::mutate(Ratio_FL2.FL1 =  Mean_FL2/Mean_FL1)  %>%
dplyr::mutate(pCO2_Treatment = as.factor(pCO2_Treatment))
# parse by cell type for stats
MitPotential_MG     <- MitPotential_dat %>% dplyr::filter(cell_type %in% 'mature_granular')   %>% na.omit()
MitPotential_IG     <- MitPotential_dat %>% dplyr::filter(cell_type %in% 'immature_granular') %>% na.omit()
MitPotential_MA     <- MitPotential_dat %>% dplyr::filter(cell_type %in% 'mature_agranular')  %>% na.omit()
MitPotential_Degran <- MitPotential_dat %>% dplyr::filter(cell_type %in% 'degranulated')      %>% na.omit()
MitPotential_dat %>%
na.omit() %>%
summarySE(measurevar="Ratio_FL2.FL1", groupvars=c("pCO2_Treatment", "cell_type")) %>%
dplyr::mutate(pCO2 = case_when(pCO2_Treatment == "Low"  ~ "500 μatm", pCO2_Treatment == "High" ~ "1200 μatm")) %>%
dplyr::arrange(cell_type)
library(Rmisc)
MitPotential_dat %>%
na.omit() %>%
summarySE(measurevar="Ratio_FL2.FL1", groupvars=c("pCO2_Treatment", "cell_type")) %>%
dplyr::mutate(pCO2 = case_when(pCO2_Treatment == "Low"  ~ "500 μatm", pCO2_Treatment == "High" ~ "1200 μatm")) %>%
dplyr::arrange(cell_type)
MitPot_TwoWayANOVA <- lm(Ratio_FL1.FL2~pCO2_Treatment*cell_type, data = MitPotential_dat)
pander(anova(MitPot_TwoWayANOVA), style='rmarkdown') # anova table of lmer
MitPotenital_PLOT <- ggplot(MitPotential_dat, aes(x = factor(pCO2, level = c('500 μatm', '1200 μatm')), Ratio_FL1.FL2 , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, width=0.5, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("grey20","white")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
scale_x_discrete(labels= c('~500 μatm', '~1200 μatm')) +
# scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
labs(title = "Cvirginica - Mitchondrial potenital under OA",
y = expression(Arbitrary~units~"("~A~U~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~μ*atm~")")) +
theme(axis.text=element_text(size=8),
axis.title=element_text(size=8,face="bold")) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
facet_wrap(~cell_type, scales = "free")
MitPotenital_PLOT # print this figure...
MitPotenital_PLOT <- ggplot(MitPotential_dat, aes(x = factor(pCO2, level = c('500 μatm', '1200 μatm')), Ratio_FL2.FL1 , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, width=0.5, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("grey20","white")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
scale_x_discrete(labels= c('~500 μatm', '~1200 μatm')) +
# scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
labs(title = "Cvirginica - Mitchondrial potenital under OA",
y = expression(Arbitrary~units~"("~A~U~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~μ*atm~")")) +
theme(axis.text=element_text(size=8),
axis.title=element_text(size=8,face="bold")) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
facet_wrap(~cell_type, scales = "free")
MitPotenital_PLOT # print this figure...
# Export the figures to pdf
ggarrange(MitPotenital_PLOT,ROS_PLOT,nrow = 2) %>%
ggexport(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_hemolymph_OA/RAnalysis/Flow_cytometry_data/Output/MitochondrialPotential_ROS.pdf")
# add column for pCO2 treatment
ROS_dat <- ROS_dat %>%
dplyr::mutate(pCO2 = case_when(pCO2_Treatment == "Low"  ~ "500 μatm", pCO2_Treatment == "High" ~ "1200 μatm")) %>% # add a column for pCO2
dplyr::mutate(Mean_FL1 = as.numeric(Mean_FL1))  %>%
dplyr::mutate(pCO2_Treatment = as.factor(pCO2_Treatment))
# parse by cell type for stats
ROS_MG     <- ROS_dat %>% dplyr::filter(cell_type %in% 'mature_granular')   %>% na.omit()
ROS_IG     <- ROS_dat %>% dplyr::filter(cell_type %in% 'immature_granular') %>% na.omit()
ROS_MA     <- ROS_dat %>% dplyr::filter(cell_type %in% 'mature_agranular')  %>% na.omit()
ROS_Degran <- ROS_dat %>% dplyr::filter(cell_type %in% 'degranulated')      %>% na.omit()
ROS_dat %>%
na.omit() %>%
summarySE(measurevar="Mean_FL1", groupvars=c("pCO2_Treatment", "cell_type")) %>%
dplyr::mutate(pCO2 = case_when(pCO2_Treatment == "Low"  ~ "500 μatm", pCO2_Treatment == "High" ~ "1200 μatm")) %>%
dplyr::arrange(cell_type)
ROS_PLOT <- ggplot(ROS_dat, aes(x = factor(pCO2, level = c('500 μatm', '1200 μatm')), Mean_FL1 , fill = pCO2)) +
theme(panel.grid=element_blank()) +
geom_boxplot(size=0.2, width=0.5, alpha=0.1, aes(fill=pCO2)) +
scale_fill_manual(values=c("grey20","white")) +
geom_point(shape = 21, size = 2, position = position_jitterdodge(jitter.width = 0.1)) +
theme_classic() +
scale_x_discrete(labels= c('~500 μatm', '~1200 μatm')) +
# scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
labs(title = "Cvirginica - ROS under OA",
y = expression(Arbitrary~units~"("~A~U~")"),
x = expression(italic(p)*CO[2]~Treatment~"("~μ*atm~")")) +
theme(axis.text=element_text(size=8),
axis.title=element_text(size=8,face="bold")) +
stat_summary(fun.y=mean, geom="point", shape=18, size=4, color="black", fill="white") +
facet_wrap(~cell_type, scales = "free")
ROS_PLOT # print this figure...
ggarrange(MitPotenital_PLOT,ROS_PLOT,nrow = 2)
# Export the figures to pdf
ggarrange(MitPotenital_PLOT,ROS_PLOT,nrow = 2) %>%
ggexport(filename = "C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_hemolymph_OA/RAnalysis/Flow_cytometry_data/Output/MitochondrialPotential_ROS.pdf")
library(devtools);install_github('vqv/ggbiplot')
library(ggbiplot)
pca = prcomp(iris[,1:4])
ggbiplot(pca,groups = iris$Species,ellipse = T,ellipse.prob = .95)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, cache = TRUE)
#BiocManager::install for these packages
BiocManager::install("DESeq2")
#BiocManager::install for these packages
BiocManager::install("edgeR")
#BiocManager::install for these packages
BiocManager::install("goseq")
#BiocManager::install for these packages
BiocManager::install("affycoretools")
#BiocManager::install for these packages
BiocManager::install("pcaExplorer")
# SET WORKING DIRECTORY AND LOAD DATA
setwd("C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/")
path = 'C:/Users/samuel.gurr/Documents/Github_repositories/Cvirginica_multistressor/RAnalysis/Output/DESeq2/' # personnal computer
getwd()
### filtered counts tables - format matrix after upload [from Count_Matrix_Stats.Filter.R]
d2.counts_matrix  <- read.csv(file="../Data/TagSeq/Filtered_counts/filtered_counts_5cpm_50perc/day2.filtered_5cpm50perc.csv", sep=',', header=TRUE)
d2.counts_matrix  <- data.frame(d2.counts_matrix[,-1], row.names=d2.counts_matrix[,1])
d18.counts_matrix  <- read.csv(file="../Data/TagSeq/Filtered_counts/filtered_counts_5cpm_50perc/day18.counts.filtered_5cpm50perc.csv", sep=',', header=TRUE)
d18.counts_matrix  <- data.frame(d18.counts_matrix[,-1], row.names=d18.counts_matrix[,1])
# annotation master data
Cvirginica_annot_reference  <- read.csv(file="../Data/TagSeq/Seq_details/seq_id_master.csv", sep=',', header=TRUE) %>%
dplyr::select(!X) %>%
dplyr::mutate(TranscriptID = gsub(" ", "", TranscriptID))
# NOTE: this data
Const.DEGs <- read.csv(file="../Output/DESeq2/5cpm/Summary_Primary_DEGs_occurances_5cpm_GeneIDs.csv", sep=',', header=TRUE)
### experiment metadata [from Count_Matrix_Stats.Filter.R]  - convert characaters to factors for DESeq2
all.exp_data   <- read.csv(file="../Data/TagSeq/all.exp.metadata.csv", sep=',', header=TRUE) %>%   mutate_if(is.character, as.factor)
d2.exp_data    <- read.csv(file="../Data/TagSeq/day2.exp.data.csv", sep=',', header=TRUE) %>%   mutate_if(is.character, as.factor)
d18.exp_data   <- read.csv(file="../Data/TagSeq/day18.exp.data.csv", sep=',', header=TRUE) %>%   mutate_if(is.character, as.factor)
# ==========================================================
# DAY 2 FULL MODEL ==  design = ~ Temperature * OA * Salinity
# ========================================================== #
# build the metadata matrix ::::::::::::::::::::::::::::
d2.metadata     <- d2.exp_data %>%
dplyr::select(c('SapleName_readmatrix', 'Temperature', 'OA', 'Salinity')) %>% # coondense dataset to build target matrix
dplyr::rename("Sample.Name" = "SapleName_readmatrix") %>%
dplyr::mutate(All_Treatment = paste(Temperature, OA, Salinity, sep = '.'))
d2.metadata     <- data.frame(d2.metadata[,-1], row.names=d2.metadata[,1]) # move Sample.Name column as row names
d2.metadata.mtx <- as.matrix(d2.metadata, row.names="Oyster.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
d2.metadata.mtx <- d2.metadata.mtx[match(colnames(d2.counts_matrix),rownames(d2.metadata.mtx)), ]
# build dds ::::::::::::::::::::::::::::::::::::::::::::
# FULL MODEL
dds.d2 <- DESeqDataSetFromMatrix(countData = d2.counts_matrix,
colData = d2.metadata.mtx,
design = ~ Temperature+
OA+
Salinity+
Temperature:OA+
Temperature:Salinity+
OA:Salinity)
library(DESeq2) # note: this was previously installed with the command `BiocManager::install("DESeq2")`
library(pcaExplorer)
# build dds ::::::::::::::::::::::::::::::::::::::::::::
# FULL MODEL
dds.d2 <- DESeqDataSetFromMatrix(countData = d2.counts_matrix,
colData = d2.metadata.mtx,
design = ~ Temperature+
OA+
Salinity+
Temperature:OA+
Temperature:Salinity+
OA:Salinity)
# GROUP MDOEL
dds.d2.group <- DESeqDataSetFromMatrix(countData = d2.counts_matrix,
colData = d2.metadata.mtx,
design = ~ All_Treatment-1)
# ADDITIVE MODEL
dds.d2.main <- DESeqDataSetFromMatrix(countData = d2.counts_matrix,
colData = d2.metadata.mtx,
design = ~ Temperature+OA+Salinity)
# build the metadata matrix ::::::::::::::::::::::::::::
d18.metadata     <- d18.exp_data %>%
dplyr::select(c('SapleName_readmatrix', 'Temperature', 'OA', 'Salinity')) %>% # coondense dataset to build target matrix
dplyr::rename("Sample.Name" = "SapleName_readmatrix") %>%
dplyr::mutate(All_Treatment = paste(Temperature, OA, Salinity, sep = '.'))
d18.metadata     <- data.frame(d18.metadata[,-1], row.names=d18.metadata[,1]) # move Sample.Name column as row names
d18.metadata.mtx <- as.matrix(d18.metadata, row.names="Oyster.ID") # create matrix
# check for 'TRUE' in each - check before proceeding  design
d18.metadata.mtx <- d18.metadata.mtx[match(colnames(d18.counts_matrix),rownames(d18.metadata.mtx)), ]
# build dds ::::::::::::::::::::::::::::::::::::::::::::
# FULL MODEL
dds.d18 <- DESeqDataSetFromMatrix(countData = d18.counts_matrix,
colData = d18.metadata.mtx,
design = ~ Temperature+
OA+
Salinity+
Temperature:OA+
Temperature:Salinity+
OA:Salinity)
# GROUP MDOEL
dds.d18.group <- DESeqDataSetFromMatrix(countData = d18.counts_matrix,
colData = d18.metadata.mtx,
design = ~ All_Treatment-1)
# DAY 2 PLOT THE (1) READS PER SAMPLE (2) READS PER GENE - FOR EACH DDS
d2.nsamples        <- ncol(counts(dds.d2)) # Number of samples - for the plot label
d2.rps             <- qplot(colSums(counts(dds.d2))) +# reads of reads per sample
labs(x = "Mapped reads per sample", y = "Number of samples",
title = "Day 2 (Larva): Mapped reads per sample") +
geom_label(aes(x = 12e5, y = 1, label = paste(d2.nsamples, "samples")))
d2.ngenes          <- nrow(counts(dds.d2)) # Number of genes
d2.ngenes_min      <- min(rowSums(counts(dds.d2))) #  minimum reads
d2.ngenes_mean.min <- min(rowMeans2(counts(dds.d2))) # minimum row mean
d2.ngenes_max      <- max(rowSums(counts(dds.d2))) #  maximum reads
d2.rpg             <- qplot(log10(rowSums(counts(dds.d2))), bins = 16) + # number of reads per gene
labs(x = "log10(Mapped reads per gene)", y = "Number of genes",
title = "Day 2 (Larva): Mapped reads per gene") +
geom_label(aes(x = 4, y = 3000, label = paste(d2.ngenes, "total genes"))) +
geom_label(aes(x = 4, y = 2700, label = paste("max count =", d2.ngenes_max))) +
geom_label(aes(x = 4, y = 2400, label = paste("min count =", d2.ngenes_min))) +
geom_label(aes(x = 4, y = 2100, label = paste("min mean =", d2.ngenes_mean.min))) +
expand_limits(y=c(NA, 3250))
d2.countfig        <- plot_grid(d2.rps, d2.rpg)
d2.rpg             <- qplot(log10(rowSums(counts(dds.d2))), bins = 16) + # number of reads per gene
labs(x = "log10(Mapped reads per gene)", y = "Number of genes",
title = "Day 2 (Larva): Mapped reads per gene") +
geom_label(aes(x = 4, y = 3000, label = paste(d2.ngenes, "total genes"))) +
geom_label(aes(x = 4, y = 2700, label = paste("max count =", d2.ngenes_max))) +
geom_label(aes(x = 4, y = 2400, label = paste("min count =", d2.ngenes_min))) +
geom_label(aes(x = 4, y = 2100, label = paste("min mean =", d2.ngenes_mean.min))) +
expand_limits(y=c(NA, 3250))
d2.nsamples        <- ncol(counts(dds.d2)) # Number of samples - for the plot label
d2.rps             <- qplot(colSums(counts(dds.d2))) +# reads of reads per sample
labs(x = "Mapped reads per sample", y = "Number of samples",
title = "Day 2 (Larva): Mapped reads per sample") +
geom_label(aes(x = 12e5, y = 1, label = paste(d2.nsamples, "samples")))
d2.ngenes          <- nrow(counts(dds.d2)) # Number of genes
d2.ngenes_min      <- min(rowSums(counts(dds.d2))) #  minimum reads
d2.ngenes_mean.min <- min(rowMeans2(counts(dds.d2))) # minimum row mean
d2.ngenes_max      <- max(rowSums(counts(dds.d2))) #  maximum reads
d2.rpg             <- qplot(log10(rowSums(counts(dds.d2))), bins = 16) + # number of reads per gene
labs(x = "log10(Mapped reads per gene)", y = "Number of genes",
title = "Day 2 (Larva): Mapped reads per gene") +
geom_label(aes(x = 4, y = 3000, label = paste(d2.ngenes, "total genes"))) +
geom_label(aes(x = 4, y = 2700, label = paste("max count =", d2.ngenes_max))) +
geom_label(aes(x = 4, y = 2400, label = paste("min count =", d2.ngenes_min))) +
geom_label(aes(x = 4, y = 2100, label = paste("min mean =", d2.ngenes_mean.min))) +
expand_limits(y=c(NA, 3250))
d2.countfig        <- plot_grid(d2.rps, d2.rpg)
library(dplyr)
library(GenomicFeatures)
library(data.table)
library(calibrate)
# load libraries - notes show the install command needed to install (pre installed)
install.packages("calibrate")
library(calibrate)
library(data.table)
# Plotting
library(ggplot2)
library(cowplot)
library(pheatmap)
library(gplots)
library(RColorBrewer)
library(pcaExplorer)
d2.nsamples        <- ncol(counts(dds.d2)) # Number of samples - for the plot label
d2.rps             <- qplot(colSums(counts(dds.d2))) +# reads of reads per sample
labs(x = "Mapped reads per sample", y = "Number of samples",
title = "Day 2 (Larva): Mapped reads per sample") +
geom_label(aes(x = 12e5, y = 1, label = paste(d2.nsamples, "samples")))
d2.ngenes          <- nrow(counts(dds.d2)) # Number of genes
d2.ngenes_min      <- min(rowSums(counts(dds.d2))) #  minimum reads
d2.ngenes_mean.min <- min(rowMeans2(counts(dds.d2))) # minimum row mean
d2.ngenes_max      <- max(rowSums(counts(dds.d2))) #  maximum reads
d2.rpg             <- qplot(log10(rowSums(counts(dds.d2))), bins = 16) + # number of reads per gene
labs(x = "log10(Mapped reads per gene)", y = "Number of genes",
title = "Day 2 (Larva): Mapped reads per gene") +
geom_label(aes(x = 4, y = 3000, label = paste(d2.ngenes, "total genes"))) +
geom_label(aes(x = 4, y = 2700, label = paste("max count =", d2.ngenes_max))) +
geom_label(aes(x = 4, y = 2400, label = paste("min count =", d2.ngenes_min))) +
geom_label(aes(x = 4, y = 2100, label = paste("min mean =", d2.ngenes_mean.min))) +
expand_limits(y=c(NA, 3250))
d2.countfig        <- plot_grid(d2.rps, d2.rpg)
d18.nsamples        <- ncol(counts(dds.d18.group)) # Number of samples - for the plot label
d18.rps             <- qplot(colSums(counts(dds.d18.group))) +# reads of reads per sample
labs(x = "Mapped reads per sample", y = "Number of samples",
title = "Day 18 (Spat): Mapped reads per sample") +
geom_label(aes(x = 12e5, y = 1, label = paste(d18.nsamples, "samples")))
d18.ngenes          <- nrow(counts(dds.d18.group)) # Number of genes
d18.ngenes_min      <- min(rowSums(counts(dds.d18.group))) #  minimum reads
d18.ngenes_mean.min <- min(rowMeans2(counts(dds.d18.group))) # minimum row mean
d18.ngenes_max      <- max(rowSums(counts(dds.d18.group))) #  maximum reads
d18.rpg             <- qplot(log10(rowSums(counts(dds.d18.group))), bins = 16) + # number of reads per gene
labs(x = "log10(Mapped reads per gene)", y = "Number of genes",
title = "Day 18 (Spat): Mapped reads per gene") +
geom_label(aes(x = 4, y = 3000, label = paste(d18.ngenes, "total genes"))) +
geom_label(aes(x = 4, y = 2700, label = paste("max count =", d18.ngenes_max))) +
geom_label(aes(x = 4, y = 2400, label = paste("min count =", d18.ngenes_min))) +
geom_label(aes(x = 4, y = 2100, label = paste("min mean =", d18.ngenes_mean.min))) +
expand_limits(y=c(NA, 3250))
d18.countfig
d18.countfig        <- plot_grid(d18.rps, d18.rpg)
d18.nsamples        <- ncol(counts(dds.d18.group)) # Number of samples - for the plot label
d18.rps             <- qplot(colSums(counts(dds.d18.group))) +# reads of reads per sample
labs(x = "Mapped reads per sample", y = "Number of samples",
title = "Day 18 (Spat): Mapped reads per sample") +
geom_label(aes(x = 12e5, y = 1, label = paste(d18.nsamples, "samples")))
d18.ngenes          <- nrow(counts(dds.d18.group)) # Number of genes
d18.ngenes_min      <- min(rowSums(counts(dds.d18.group))) #  minimum reads
d18.ngenes_mean.min <- min(rowMeans2(counts(dds.d18.group))) # minimum row mean
d18.ngenes_max      <- max(rowSums(counts(dds.d18.group))) #  maximum reads
d18.rpg             <- qplot(log10(rowSums(counts(dds.d18.group))), bins = 16) + # number of reads per gene
labs(x = "log10(Mapped reads per gene)", y = "Number of genes",
title = "Day 18 (Spat): Mapped reads per gene") +
geom_label(aes(x = 4, y = 3000, label = paste(d18.ngenes, "total genes"))) +
geom_label(aes(x = 4, y = 2700, label = paste("max count =", d18.ngenes_max))) +
geom_label(aes(x = 4, y = 2400, label = paste("min count =", d18.ngenes_min))) +
geom_label(aes(x = 4, y = 2100, label = paste("min mean =", d18.ngenes_mean.min))) +
expand_limits(y=c(NA, 3250))
d18.countfig        <- plot_grid(d18.rps, d18.rpg)
plot_grid(d2.countfig, d18.countfig)
# RUN DESEQ2 model - view all the pariwise comparisons
dds.d2        <- DESeq(dds.d2) #  full model            wait for this to complete....
dds.d2.group  <- DESeq(dds.d2.group) # group model      wait for this to complete....
dds.d18.group <- DESeq(dds.d18.group) # group model       wait for this to complete....
# Data transformations for heatmap and PCA visuals :::::::
# rlog - regularized log transformation of origin count data to log2 scale - fit for each sample and dist. of coefficients in the data
rlog.d2<- rlogTransformation(dds.d2) # rlog transform (regularized log)
rlog.d2
rlog.d2[,1:4]
iris
as.data.frame(rlog.d2)
rlog.d2
assay(rlog.d2[res.index,])
assay(rlog.d2)
head(assay(rlog.d2))
rlog.d2
head(assay(rlog.d2))[1]
head(assay(rlog.d2))[,1]
head(assay(rlog.d2))[1,]
head(assay(rlog.d2))[,1]
head(assay(rlog.d2))[,c(1:2)]
(ncol(assay(rlog.d2)))
head(assay(rlog.d2))[,c(1:(ncol(assay(rlog.d2))))]
dat <- assay(rlog.d2)[,c(1:(ncol(assay(rlog.d2))))]
dat <- as.data.frame(assay(rlog.d2)[,c(1:(ncol(assay(rlog.d2))))])
head(dat)
pca = prcomp(dat)
dat %>% remove_rownames %>% column_to_rownames(var="Sample.ID")
library(tidyverse)
dat %>% remove_rownames %>% column_to_rownames(var="Sample.ID")
samp.with.rownames <- data.frame(dat[,-1], row.names=dat[,1])
samp.with.rownames
samp.with.rownames <- as.data.frame(t(dat))
samp.with.rownames
samp.with.rownames <- as.data.frame(t(dat)) %>% tibble::rownames_to_column("Sample.ID")
samp.with.rownames
assay(rlog.d2)
samp.with.rownames
d2.exp_data
d18.exp_data
d2.exp_data_rename
d2.exp_data
d2.exp_data_rename <- d2.exp_data %>% rename('Sample.ID' = 'SapleName_readmatrix')
d2.exp_data_rename <- d2.exp_data %>% dplyr::rename('Sample.ID' = 'SapleName_readmatrix')
d2.exp_data_rename
samp.with.rownames <- as.data.frame(t(dat)) %>%
tibble::rownames_to_column("Sample.ID") %>%
merge(samp.with.rownames, d2.exp_data_rename)
merge(samp.with.rownames, d2.exp_data_rename)
ncol(samp.with.rownames)
samp.with.rownamesMERGED <- merge(samp.with.rownames, d2.exp_data_rename)
ncol(samp.with.rownamesMERGED)
ncol(samp.with.rownames)
pca = prcomp(samp.with.rownamesMERGED[,c(2:4821)])
ggbiplot(pca,groups = samp.with.rownamesMERGED$Salinity,ellipse = T,ellipse.prob = .95)
iris
d2.exp_data_rename
samp.with.rownames
iris
dat <- as.data.frame(assay(rlog.d2)[,c(1:(ncol(assay(rlog.d2))))])
dat
assay(rlog.d2$All_Treatment
assay(rlog.d2$All_Treatment)
assay(rlog.d2$All_Treatment)
